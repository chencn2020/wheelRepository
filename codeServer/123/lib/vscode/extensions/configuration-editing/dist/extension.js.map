{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"path\"","webpack:///external \"vscode\"","webpack:///./node_modules/vscode-nls/lib/main.js","webpack:///./src/extensionsProposals.ts","webpack:///./node_modules/jsonc-parser/lib/esm/impl/scanner.js","webpack:///./node_modules/jsonc-parser/lib/esm/impl/format.js","webpack:///./node_modules/jsonc-parser/lib/esm/impl/parser.js","webpack:///./node_modules/jsonc-parser/lib/esm/impl/edit.js","webpack:///./node_modules/jsonc-parser/lib/esm/main.js","webpack:///./src/extension.ts","webpack:///external \"fs\"","webpack:///./src/settingsDocumentHelper.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","MessageFormat","BundleFormat","LocalizeInfo","resolvedBundles","options","isPseudo","path","fs","toString","isDefined","isString","readJsonFileSync","filename","JSON","parse","readFileSync","format","message","args","replace","length","match","rest","index","arg","replacement","String","createScopedLocalizeFunction","messages","_i","arguments","isNumber","console","error","Error","stack","warn","localize","cacheBundle","bundle","loadNlsBundleOrCreateFromI18n","header","bundlePath","result","join","cacheRoot","id","hash","useMemoryOnly","writeBundle","encoding","flag","file","Date","utimes","touch","err","code","SyntaxError","log","unlink","metaDataPath","languagePackLocation","translationsConfig","languagePack","contents","metaData","module_2","entry","translations","outDir","resultMessages","keys","messageKey","translatedMessage","undefined","push","createNLSBundle","writeFileSync","stringify","loadDefaultNlsBundle","folder","module_1","createDefaultNlsBundle","loadNlsBundle","languagePackSupport","languagePackId","translationsConfigFile","candidate","root","language","existsSync","lastIndexOf","substring","findInTheBoxBundle","loadMessageBundle","ext","extname","substr","messageFormat","both","headerFile","dirname","parent","tryFindMetaDataHeaderFile","nlsBundle","module_3","json","resolvedLanguage","cacheLanguageResolution","locale","resolveLanguage","Array","isArray","is","comment","process","env","VSCODE_NLS_CONFIG","vscodeOptions","availableLanguages","toLowerCase","isBoolean","_languagePackSupport","_cacheRoot","_languagePackId","_translationsConfigFile","_corruptedFile","writeFile","_a","initializeSettings","config","opts","bundleFormat","standalone","vscode","__dirname","provideInstalledExtensionProposals","existing","range","includeBuiltinExtensions","knownExtensionProposals","extensions","all","filter","e","startsWith","indexOf","map","item","CompletionItem","insertText","kind","CompletionItemKind","Value","filterText","example","createScanner","text","ignoreTrivia","len","pos","tokenOffset","token","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","scanNext","isWhiteSpace","fromCharCode","isLineBreak","start","ch3","scanString","safeLength","commentClosed","isDigit","end","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError","documentText","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","isEOL","endOffset","content","nChars","tabSize","charAt","Math","floor","computeIndentLevel","indentValue","eol","getEOL","lineBreak","indentLevel","insertSpaces","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","startOffset","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","ParseOptions","parseTree","errors","DEFAULT","currentParent","type","children","ensurePropertyComplete","onValue","valueNode","visit","onObjectBegin","onObjectProperty","onObjectEnd","onArrayBegin","onArrayEnd","onLiteralValue","getNodeType","onSeparator","sep","colonOffset","onError","findNodeAtLocation","node","path_1","segment","found","_b","propertyNode","visitor","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","onComment","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseValue","needsComma","parseArray","parseObject","parseLiteral","allowEmptyContent","setProperty","originalPath","formattingOptions","getInsertionIndex","slice","lastSegment","pop","propertyIndex","removeBegin","removeEnd","previous","withFormatting","newProperty","edit","removalIndex","toRemove","newText","applyEdit","begin","edits","edit_1","min","max","__webpack_exports__","applyEdits","main_createScanner","main_getLocation","position","segments","earlyReturnException","previousNode","previousNodeInst","isAtPropertyKey","setPreviousNode","last","matches","pattern","k","main_parse","currentProperty","previousParents","array","main_parseTree","main_findNodeAtLocation","main_findNodeAtOffset","findNodeAtOffset","includeRightBound","contains","main_getNodePath","getNodePath","main_getNodeValue","getNodeValue","obj","prop","main_visit","main_stripComments","replaceCh","parts","printParseErrorCode","main_format","modify","jsonc_parser_1","nls","settingsDocumentHelper_1","extensionsProposals_1","registerVariableCompletions","languages","registerCompletionItemProvider","[object Object]","document","_token","location","getLocation","getText","offsetAt","indexOf$","lineAt","line","startPosition","Position","label","detail","variable","Range","activate","context","subscriptions","provideCompletionItems","SettingsDocument","getWordRangeAtPosition","extensionsContent","recommendations","registerDocumentSymbolProvider","lastProperty","depthInObjects","_offset","_length","SymbolInformation","SymbolKind","positionAt","this","provideWindowTitleCompletionItems","provideFilesAssociationsCompletionItems","provideExcludeCompletionItems","provideLanguageCompletionItems","then","items","newSimpleCompletionItem","ignoredExtensions","provideLanguageOverridesCompletionItems","_location","completions","Promise","resolve","provideLanguageCompletionItemsForLanguageOverrides","newSnippetCompletionItem","documentation","snippet","formatFunc","getLanguages","completionItems","configuration","workspace","getConfiguration","inspect","defaultValue","Property","trim","character","description","SnippetString"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"path\");","module.exports = require(\"vscode\");","/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path = require(\"path\");\r\nvar fs = require(\"fs\");\r\nvar toString = Object.prototype.toString;\r\nfunction isDefined(value) {\r\n    return typeof value !== 'undefined';\r\n}\r\nfunction isNumber(value) {\r\n    return toString.call(value) === '[object Number]';\r\n}\r\nfunction isString(value) {\r\n    return toString.call(value) === '[object String]';\r\n}\r\nfunction isBoolean(value) {\r\n    return value === true || value === false;\r\n}\r\nfunction readJsonFileSync(filename) {\r\n    return JSON.parse(fs.readFileSync(filename, 'utf8'));\r\n}\r\nvar MessageFormat;\r\n(function (MessageFormat) {\r\n    MessageFormat[\"file\"] = \"file\";\r\n    MessageFormat[\"bundle\"] = \"bundle\";\r\n    MessageFormat[\"both\"] = \"both\";\r\n})(MessageFormat = exports.MessageFormat || (exports.MessageFormat = {}));\r\nvar BundleFormat;\r\n(function (BundleFormat) {\r\n    // the nls.bundle format\r\n    BundleFormat[\"standalone\"] = \"standalone\";\r\n    BundleFormat[\"languagePack\"] = \"languagePack\";\r\n})(BundleFormat = exports.BundleFormat || (exports.BundleFormat = {}));\r\nvar LocalizeInfo;\r\n(function (LocalizeInfo) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && isDefined(candidate.key) && isDefined(candidate.comment);\r\n    }\r\n    LocalizeInfo.is = is;\r\n})(LocalizeInfo || (LocalizeInfo = {}));\r\nvar resolvedLanguage;\r\nvar resolvedBundles;\r\nvar options;\r\nvar isPseudo;\r\nfunction initializeSettings() {\r\n    options = { locale: undefined, language: undefined, languagePackSupport: false, cacheLanguageResolution: true, messageFormat: MessageFormat.bundle };\r\n    if (isString(process.env.VSCODE_NLS_CONFIG)) {\r\n        try {\r\n            var vscodeOptions = JSON.parse(process.env.VSCODE_NLS_CONFIG);\r\n            var language = void 0;\r\n            var locale = void 0;\r\n            if (vscodeOptions.availableLanguages) {\r\n                var value = vscodeOptions.availableLanguages['*'];\r\n                if (isString(value)) {\r\n                    language = value;\r\n                }\r\n            }\r\n            if (isString(vscodeOptions.locale)) {\r\n                options.locale = vscodeOptions.locale.toLowerCase();\r\n            }\r\n            if (language === undefined) {\r\n                options.language = options.locale;\r\n            }\r\n            else if (language !== 'en') {\r\n                options.language = language;\r\n            }\r\n            if (isBoolean(vscodeOptions._languagePackSupport)) {\r\n                options.languagePackSupport = vscodeOptions._languagePackSupport;\r\n            }\r\n            if (isString(vscodeOptions._cacheRoot)) {\r\n                options.cacheRoot = vscodeOptions._cacheRoot;\r\n            }\r\n            if (isString(vscodeOptions._languagePackId)) {\r\n                options.languagePackId = vscodeOptions._languagePackId;\r\n            }\r\n            if (isString(vscodeOptions._translationsConfigFile)) {\r\n                options.translationsConfigFile = vscodeOptions._translationsConfigFile;\r\n                try {\r\n                    options.translationsConfig = readJsonFileSync(options.translationsConfigFile);\r\n                }\r\n                catch (error) {\r\n                    // We can't read the translation config file. Mark the cache as corrupted.\r\n                    if (vscodeOptions._corruptedFile) {\r\n                        fs.writeFile(vscodeOptions._corruptedFile, 'corrupted', 'utf8', function (err) {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Do nothing.\r\n        }\r\n    }\r\n    isPseudo = options.locale === 'pseudo';\r\n    resolvedLanguage = undefined;\r\n    resolvedBundles = Object.create(null);\r\n}\r\ninitializeSettings();\r\nfunction supportsLanguagePack() {\r\n    return options.languagePackSupport === true && options.cacheRoot !== undefined && options.languagePackId !== undefined && options.translationsConfigFile !== undefined\r\n        && options.translationsConfig !== undefined;\r\n}\r\nfunction format(message, args) {\r\n    var result;\r\n    if (isPseudo) {\r\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\r\n        message = '\\uFF3B' + message.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\r\n    }\r\n    if (args.length === 0) {\r\n        result = message;\r\n    }\r\n    else {\r\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\r\n            var index = rest[0];\r\n            var arg = args[index];\r\n            var replacement = match;\r\n            if (typeof arg === 'string') {\r\n                replacement = arg;\r\n            }\r\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\r\n                replacement = String(arg);\r\n            }\r\n            return replacement;\r\n        });\r\n    }\r\n    return result;\r\n}\r\nfunction createScopedLocalizeFunction(messages) {\r\n    return function (key, message) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (isNumber(key)) {\r\n            if (key >= messages.length) {\r\n                console.error(\"Broken localize call found. Index out of bounds. Stacktrace is\\n: \" + new Error('').stack);\r\n                return;\r\n            }\r\n            return format(messages[key], args);\r\n        }\r\n        else {\r\n            if (isString(message)) {\r\n                console.warn(\"Message \" + message + \" didn't get externalized correctly.\");\r\n                return format(message, args);\r\n            }\r\n            else {\r\n                console.error(\"Broken localize call found. Stacktrace is\\n: \" + new Error('').stack);\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction localize(key, message) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    return format(message, args);\r\n}\r\nfunction resolveLanguage(file) {\r\n    var resolvedLanguage;\r\n    if (options.cacheLanguageResolution && resolvedLanguage) {\r\n        resolvedLanguage = resolvedLanguage;\r\n    }\r\n    else {\r\n        if (isPseudo || !options.language) {\r\n            resolvedLanguage = '.nls.json';\r\n        }\r\n        else {\r\n            var locale = options.language;\r\n            while (locale) {\r\n                var candidate = '.nls.' + locale + '.json';\r\n                if (fs.existsSync(file + candidate)) {\r\n                    resolvedLanguage = candidate;\r\n                    break;\r\n                }\r\n                else {\r\n                    var index = locale.lastIndexOf('-');\r\n                    if (index > 0) {\r\n                        locale = locale.substring(0, index);\r\n                    }\r\n                    else {\r\n                        resolvedLanguage = '.nls.json';\r\n                        locale = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (options.cacheLanguageResolution) {\r\n            resolvedLanguage = resolvedLanguage;\r\n        }\r\n    }\r\n    return file + resolvedLanguage;\r\n}\r\nfunction findInTheBoxBundle(root) {\r\n    var language = options.language;\r\n    while (language) {\r\n        var candidate = path.join(root, \"nls.bundle.\" + language + \".json\");\r\n        if (fs.existsSync(candidate)) {\r\n            return candidate;\r\n        }\r\n        else {\r\n            var index = language.lastIndexOf('-');\r\n            if (index > 0) {\r\n                language = language.substring(0, index);\r\n            }\r\n            else {\r\n                language = undefined;\r\n            }\r\n        }\r\n    }\r\n    // Test if we can reslove the default bundle.\r\n    if (language === undefined) {\r\n        var candidate = path.join(root, 'nls.bundle.json');\r\n        if (fs.existsSync(candidate)) {\r\n            return candidate;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction mkdir(directory) {\r\n    try {\r\n        fs.mkdirSync(directory);\r\n    }\r\n    catch (err) {\r\n        if (err.code === 'EEXIST') {\r\n            return;\r\n        }\r\n        else if (err.code === 'ENOENT') {\r\n            var parent = path.dirname(directory);\r\n            if (parent !== directory) {\r\n                mkdir(parent);\r\n                fs.mkdirSync(directory);\r\n            }\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\nfunction createDefaultNlsBundle(folder) {\r\n    var metaData = readJsonFileSync(path.join(folder, 'nls.metadata.json'));\r\n    var result = Object.create(null);\r\n    for (var module_1 in metaData) {\r\n        var entry = metaData[module_1];\r\n        result[module_1] = entry.messages;\r\n    }\r\n    return result;\r\n}\r\nfunction createNLSBundle(header, metaDataPath) {\r\n    var languagePackLocation = options.translationsConfig[header.id];\r\n    if (!languagePackLocation) {\r\n        return undefined;\r\n    }\r\n    var languagePack = readJsonFileSync(languagePackLocation).contents;\r\n    var metaData = readJsonFileSync(path.join(metaDataPath, 'nls.metadata.json'));\r\n    var result = Object.create(null);\r\n    for (var module_2 in metaData) {\r\n        var entry = metaData[module_2];\r\n        var translations = languagePack[header.outDir + \"/\" + module_2];\r\n        if (translations) {\r\n            var resultMessages = [];\r\n            for (var i = 0; i < entry.keys.length; i++) {\r\n                var messageKey = entry.keys[i];\r\n                var key = isString(messageKey) ? messageKey : messageKey.key;\r\n                var translatedMessage = translations[key];\r\n                if (translatedMessage === undefined) {\r\n                    translatedMessage = entry.messages[i];\r\n                }\r\n                resultMessages.push(translatedMessage);\r\n            }\r\n            result[module_2] = resultMessages;\r\n        }\r\n        else {\r\n            result[module_2] = entry.messages;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction touch(file) {\r\n    var d = new Date();\r\n    fs.utimes(file, d, d, function () {\r\n        // Do nothing. Ignore\r\n    });\r\n}\r\nfunction cacheBundle(key, bundle) {\r\n    resolvedBundles[key] = bundle;\r\n    return bundle;\r\n}\r\nfunction loadNlsBundleOrCreateFromI18n(header, bundlePath) {\r\n    var result;\r\n    var bundle = path.join(options.cacheRoot, header.id + \"-\" + header.hash + \".json\");\r\n    var useMemoryOnly = false;\r\n    var writeBundle = false;\r\n    try {\r\n        result = JSON.parse(fs.readFileSync(bundle, { encoding: 'utf8', flag: 'r' }));\r\n        touch(bundle);\r\n        return result;\r\n    }\r\n    catch (err) {\r\n        if (err.code === 'ENOENT') {\r\n            writeBundle = true;\r\n        }\r\n        else if (err instanceof SyntaxError) {\r\n            // We have a syntax error. So no valid JSON. Use\r\n            console.log(\"Syntax error parsing message bundle: \" + err.message + \".\");\r\n            fs.unlink(bundle, function (err) {\r\n                if (err) {\r\n                    console.error(\"Deleting corrupted bundle \" + bundle + \" failed.\");\r\n                }\r\n            });\r\n            useMemoryOnly = true;\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n    result = createNLSBundle(header, bundlePath);\r\n    if (!result || useMemoryOnly) {\r\n        return result;\r\n    }\r\n    if (writeBundle) {\r\n        try {\r\n            fs.writeFileSync(bundle, JSON.stringify(result), { encoding: 'utf8', flag: 'wx' });\r\n        }\r\n        catch (err) {\r\n            if (err.code === 'EEXIST') {\r\n                return result;\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction loadDefaultNlsBundle(bundlePath) {\r\n    try {\r\n        return createDefaultNlsBundle(bundlePath);\r\n    }\r\n    catch (err) {\r\n        console.log(\"Generating default bundle from meta data failed.\", err);\r\n        return undefined;\r\n    }\r\n}\r\nfunction loadNlsBundle(header, bundlePath) {\r\n    var result;\r\n    // Core decided to use a language pack. Do the same in the extension\r\n    if (supportsLanguagePack()) {\r\n        try {\r\n            result = loadNlsBundleOrCreateFromI18n(header, bundlePath);\r\n        }\r\n        catch (err) {\r\n            console.log(\"Load or create bundle failed \", err);\r\n        }\r\n    }\r\n    if (!result) {\r\n        // No language pack found, but core is running in language pack mode\r\n        // Don't try to use old in the box bundles since the might be stale\r\n        // Fall right back to the default bundle.\r\n        if (options.languagePackSupport) {\r\n            return loadDefaultNlsBundle(bundlePath);\r\n        }\r\n        var candidate = findInTheBoxBundle(bundlePath);\r\n        if (candidate) {\r\n            try {\r\n                return readJsonFileSync(candidate);\r\n            }\r\n            catch (err) {\r\n                console.log(\"Loading in the box message bundle failed.\", err);\r\n            }\r\n        }\r\n        result = loadDefaultNlsBundle(bundlePath);\r\n    }\r\n    return result;\r\n}\r\nfunction tryFindMetaDataHeaderFile(file) {\r\n    var result;\r\n    var dirname = path.dirname(file);\r\n    while (true) {\r\n        result = path.join(dirname, 'nls.metadata.header.json');\r\n        if (fs.existsSync(result)) {\r\n            break;\r\n        }\r\n        var parent = path.dirname(dirname);\r\n        if (parent === dirname) {\r\n            result = undefined;\r\n            break;\r\n        }\r\n        else {\r\n            dirname = parent;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction loadMessageBundle(file) {\r\n    if (!file) {\r\n        // No file. We are in dev mode. Return the default\r\n        // localize function.\r\n        return localize;\r\n    }\r\n    // Remove extension since we load json files.\r\n    var ext = path.extname(file);\r\n    if (ext) {\r\n        file = file.substr(0, file.length - ext.length);\r\n    }\r\n    if (options.messageFormat === MessageFormat.both || options.messageFormat === MessageFormat.bundle) {\r\n        var headerFile = tryFindMetaDataHeaderFile(file);\r\n        if (headerFile) {\r\n            var bundlePath = path.dirname(headerFile);\r\n            var bundle = resolvedBundles[bundlePath];\r\n            if (bundle === undefined) {\r\n                try {\r\n                    var header = JSON.parse(fs.readFileSync(headerFile, 'utf8'));\r\n                    try {\r\n                        var nlsBundle = loadNlsBundle(header, bundlePath);\r\n                        bundle = cacheBundle(bundlePath, nlsBundle ? { header: header, nlsBundle: nlsBundle } : null);\r\n                    }\r\n                    catch (err) {\r\n                        console.error('Failed to load nls bundle', err);\r\n                        bundle = cacheBundle(bundlePath, null);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error('Failed to read header file', err);\r\n                    bundle = cacheBundle(bundlePath, null);\r\n                }\r\n            }\r\n            if (bundle) {\r\n                var module_3 = file.substr(bundlePath.length + 1).replace(/\\\\/g, '/');\r\n                var messages = bundle.nlsBundle[module_3];\r\n                if (messages === undefined) {\r\n                    console.error(\"Messages for file \" + file + \" not found. See console for details.\");\r\n                    return function () {\r\n                        return 'Messages not found.';\r\n                    };\r\n                }\r\n                return createScopedLocalizeFunction(messages);\r\n            }\r\n        }\r\n    }\r\n    if (options.messageFormat === MessageFormat.both || options.messageFormat === MessageFormat.file) {\r\n        // Try to load a single file bundle\r\n        try {\r\n            var json = readJsonFileSync(resolveLanguage(file));\r\n            if (Array.isArray(json)) {\r\n                return createScopedLocalizeFunction(json);\r\n            }\r\n            else {\r\n                if (isDefined(json.messages) && isDefined(json.keys)) {\r\n                    return createScopedLocalizeFunction(json.messages);\r\n                }\r\n                else {\r\n                    console.error(\"String bundle '\" + file + \"' uses an unsupported format.\");\r\n                    return function () {\r\n                        return 'File bundle has unsupported format. See console for details';\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err.code !== 'ENOENT') {\r\n                console.error('Failed to load single file bundle', err);\r\n            }\r\n        }\r\n    }\r\n    console.error(\"Failed to load message bundle for file \" + file);\r\n    return function () {\r\n        return 'Failed to load message bundle. See console for details.';\r\n    };\r\n}\r\nexports.loadMessageBundle = loadMessageBundle;\r\nfunction config(opts) {\r\n    if (opts) {\r\n        if (isString(opts.locale)) {\r\n            options.locale = opts.locale.toLowerCase();\r\n            options.language = options.locale;\r\n            resolvedLanguage = undefined;\r\n            resolvedBundles = Object.create(null);\r\n        }\r\n        if (opts.messageFormat !== undefined) {\r\n            options.messageFormat = opts.messageFormat;\r\n        }\r\n        if (opts.bundleFormat === BundleFormat.standalone && options.languagePackSupport === true) {\r\n            options.languagePackSupport = false;\r\n        }\r\n    }\r\n    isPseudo = options.locale === 'pseudo';\r\n    return loadMessageBundle;\r\n}\r\nexports.config = config;\r\n//# sourceMappingURL=main.js.map",null,"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var len = text.length;\n    var pos = 0, value = '', tokenOffset = 0, token = 16 /* Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                var ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenStartLine: function () { return lineStartOffset; },\n        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },\n        getTokenError: function () { return scanError; },\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = undefined;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: undefined\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = undefined;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = undefined;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = undefined;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty !== null) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            ensurePropertyComplete(offset + length); // in case of a missing value for a property: make sure property is complete\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return undefined;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return undefined;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return undefined;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return undefined;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    var path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        var key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        var index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            var obj = Object.create(null);\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return undefined;\n    }\n}\nexport function contains(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    if (contains(node, offset, includeRightBound)) {\n        var children = node.children;\n        if (Array.isArray(children)) {\n            for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                var item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return undefined;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        if (options.allowEmptyContent) {\n            return true;\n        }\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== undefined) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nexport function getNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        case 'object': {\n            if (!value) {\n                return 'null';\n            }\n            else if (Array.isArray(value)) {\n                return 'array';\n            }\n            return 'object';\n        }\n        default: return 'null';\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format';\nimport { parseTree, findNodeAtLocation } from './parser';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, originalPath, value, formattingOptions, getInsertionIndex) {\n    var _a;\n    var path = originalPath.slice();\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format';\nimport * as edit from './impl/edit';\nimport * as scanner from './impl/scanner';\nimport * as parser from './impl/parser';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ValueExpected */: return 'ValueExpected';\n        case 5 /* ColonExpected */: return 'ColonExpected';\n        case 6 /* CommaExpected */: return 'CommaExpected';\n        case 7 /* CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`.\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`.\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n",null,"module.exports = require(\"fs\");",null],"sourceRoot":""}