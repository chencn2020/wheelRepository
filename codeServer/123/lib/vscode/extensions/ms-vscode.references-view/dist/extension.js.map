{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/models.ts",".././src/history.ts",".././src/extension.ts",".././src/editorHighlights.ts",".././src/provider.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","getRequestRange","doc","pos","range","getWordRangeAtPosition","getPreviewChunks","beforeLen","trim","previewStart","start","with","character","Math","max","wordRange","before","getText","vscode","Range","inside","previewEnd","end","translate","after","replace","FileItem","uri","results","parent","warmUpNext","this","_document","workspace","openTextDocument","item","move","then","getDocument","ReferenceItem","location","ReferencesModel","source","position","locations","_onDidChange","EventEmitter","onDidChange","event","items","last","sort","_compareLocations","loc","toString","push","Promise","resolve","commands","executeCommand","args","e","preview","String","fromCharCode","HistoryItem","makeId","asRelativePath","arguments","title","command","length","ref","contains","lastBefore","isAfter","best","bestValue","_prefixLen","_del","fire","fwd","delta","_move","idx","indexOf","_tail","a","b","isBefore","charCodeAt","array","splice","RichCallsDirection","_mem","_value","raw","_key","update","CallItem","CallsModel","direction","roots","map","undefined","calls","from","fromRanges","Location","to","first","selectionRange","line","id","label","description","str","JSON","stringify","Buffer","_items","Map","size","iterator","values","delete","set","clear","context","callsDirection","globalState","history","History","provider","TreeDataProviderWrapper","viewId","view","window","createTreeView","treeDataProvider","showCollapseAll","editorHighlights","EditorHighlights","model","onDidChangeActiveTextEditor","visible","show","subscriptions","onDidChangeVisibility","hide","updateModel","async","newModel","message","setModel","Boolean","revealView","showResultsMessage","showNoResultsMessage","isEmpty","total","files","updateReferencesModel","selection","reveal","select","focus","add","asHistoryItem","findReferencesCommand","Uri","Position","activeTextEditor","editor","document","active","refindCommand","updateCallHierachyModel","expand","setCallHierarchyDirectionCommand","arg","showItemCommand","focusEditor","preserveFocus","showTextDocument","focusRefCommand","next","copyCommand","val","stack","pop","slice","chunks","env","clipboard","writeText","showReferences","showReferencesDisposable","config","updateShowReferences","affectsConfiguration","getConfiguration","dispose","registerCommand","onDidChangeConfiguration","remove","refresh","scheme","fsPath","picks","pick","showQuickPick","placeHolder","_view","_decorationType","createTextEditorDecorationType","backgroundColor","ThemeColor","rangeBehavior","DecorationRangeBehavior","ClosedClosed","overviewRulerLane","OverviewRulerLane","Center","overviewRulerColor","_ignore","Set","_model","_listener","onDidChangeTextDocument","onDidChangeSelection","viewColumn","ranges","has","sel","setDecorations","visibleTextEditors","ReferencesProvider","_onDidChangeTreeData","onDidChangeTreeData","_modelListener","element","result","TreeItem","contextValue","iconPath","ThemeIcon","File","collapsibleState","TreeItemCollapsibleState","Collapsed","highlights","TreeItem2","None","CallItemDataProvider","_emitter","detail","_getThemeIcon","kind","resolveCalls","_themeIconIds","HistoryDataProvider","_history","_providerListener","_provider","getTreeItem","getChildren","getParent"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,QAAQ,W,8ECKzB,aACA,OAGA,SAAgBC,EAAgBC,EAA0BC,GACtD,IAAIC,EAAQF,EAAIG,uBAAuBF,GAIvC,OAHKC,IACDA,EAAQF,EAAIG,uBAAuBF,EAAK,WAErCC,EAGX,SAAgBE,EAAiBJ,EAA0BE,EAAqBG,EAAoB,EAAGC,GAAgB,GACnH,IAAIC,EAAeL,EAAMM,MAAMC,KAAK,CAAEC,UAAWC,KAAKC,IAAI,EAAGV,EAAMM,MAAME,UAAYL,KACjFQ,EAAYb,EAAIG,uBAAuBI,GACvCO,EAASd,EAAIe,QAAQ,IAAIC,EAAOC,MAAMJ,EAAYA,EAAUL,MAAQD,EAAcL,EAAMM,QACxFU,EAASlB,EAAIe,QAAQb,GACrBiB,EAAajB,EAAMkB,IAAIC,UAAU,EAAG,KACpCC,EAAQtB,EAAIe,QAAQ,IAAIC,EAAOC,MAAMf,EAAMkB,IAAKD,IAKpD,OAJIb,IACAQ,EAASA,EAAOS,QAAQ,QAAS,IACjCD,EAAQA,EAAMC,QAAQ,QAAS,KAE5B,CAAET,SAAQI,SAAQI,SAnB7B,oBAQA,qBAwBA,MAAaE,EAIT,YACaC,EACAC,EACAC,GAFA,KAAAF,MACA,KAAAC,UACA,KAAAC,SAGb,kBAAkBC,GAId,GAHKC,KAAKC,YACND,KAAKC,UAAYd,EAAOe,UAAUC,iBAAiBH,KAAKJ,MAExDG,EAAY,CAGZ,MAAMK,QAAaJ,KAAKF,OAAOO,KAAKL,MAAM,GACtCI,IAASA,EAAKN,OAAOG,WACrBD,KAAKC,UAAUK,KAAK,IAAMF,EAAKN,OAAOS,aAAY,IAG1D,OAAOP,KAAKC,WAtBpB,aA0BA,MAAaO,EACT,YACaC,EACAX,GADA,KAAAW,WACA,KAAAX,UAHjB,kBAOA,MAAaY,EAkBT,YACaC,EACAf,EACAgB,EACTC,GAHS,KAAAF,SACA,KAAAf,MACA,KAAAgB,WARI,KAAAE,aAAe,IAAI3B,EAAO4B,aAClC,KAAAC,YAAchB,KAAKc,aAAaG,MAUrCjB,KAAKkB,MAAQL,EAAUP,KAAKO,IACxB,MAAMK,EAAoB,GAC1B,IAAIC,EACJN,EAAUO,KAAKV,EAAgBW,mBAC/B,IAAK,MAAMC,KAAOT,EACTM,GAAQA,EAAKvB,IAAI2B,aAAeD,EAAI1B,IAAI2B,aACzCJ,EAAO,IAAIxB,EAAS2B,EAAI1B,IAAK,GAAII,MACjCkB,EAAMM,KAAKL,IAEfA,EAAKtB,QAAQ2B,KAAK,IAAIhB,EAAcc,EAAKH,IAE7C,OAAOD,IAjCf,cAActB,EAAiBgB,EAA2BD,GACtD,MAAME,EAAYY,QAAQC,QAAQvC,EAAOwC,SAASC,eAAkCjB,EAAQf,EAAKgB,IAAWN,KAAKgB,GACxGA,EAGMA,EAAIF,KAAKV,EAAgBW,mBAFzB,IAKf,OAAO,IAAIX,EAAgBC,EAAQf,EAAKgB,EAAUC,GA6BtD,oBAAoBgB,GAChB,IAAI1D,EACJ,IACIA,QAAYgB,EAAOe,UAAUC,iBAAiBH,KAAKJ,KACrD,MAAOkC,GACL,OAEJ,MAAMzD,EAAQH,EAAgBC,EAAK6B,KAAKY,UACxC,IAAKvC,EACD,OAGJ,IAAI,OAAEY,EAAM,OAAEI,EAAM,MAAEI,GAAUlB,EAAiBJ,EAAKE,GAIlD0D,GAFJ9C,EAASA,EAAOS,QAAQ,MAAOsC,OAAOC,aAAa,OAE5B5C,GADvBI,EAAQA,EAAMC,QAAQ,MAAOsC,OAAOC,aAAa,OAI7CtB,EAAyB,yCAAhBX,KAAKW,OAAwC,kBAAoB,aAE9E,OAAO,IAAI,EAAAuB,YACP,EAAAA,YAAYC,OAAOnC,KAAKW,OAAQX,KAAKJ,IAAKI,KAAKY,UAC/CvB,EACA,GAAGF,EAAOe,UAAUkC,eAAepC,KAAKJ,UAAUmC,OAAapB,IAC/D,CAAE0B,UAAWR,EAAMS,MAAO,GAAIC,QAAS,mCACvCvC,KAAKJ,IACLI,KAAKY,UAIb,cACI,IAAIlD,EAAI,EACR,IAAK,MAAM0C,WAAcJ,KAAKkB,MAC1BxD,GAAK0C,EAAKP,QAAQ2C,OAEtB,OAAO9E,EAGX,UAAUkC,GACN,IAAK,MAAMQ,WAAcJ,KAAKkB,MAC1B,GAAId,EAAKR,IAAI2B,aAAe3B,EAAI2B,WAC5B,OAAOnB,EAMnB,cAEI,MAAMc,QAAclB,KAAKkB,MAEzB,GAAqB,IAAjBA,EAAMsB,OACN,OAGJ,IAAK,MAAMpC,KAAQc,EACf,GAAId,EAAKR,IAAI2B,aAAevB,KAAKJ,IAAI2B,WAAY,CAE7C,IAAK,MAAMkB,KAAOrC,EAAKP,QACnB,GAAI4C,EAAIhC,SAASpC,MAAMqE,SAAS1C,KAAKY,UACjC,OAAO6B,EAIf,IAAIE,EACJ,IAAK,MAAMF,KAAOrC,EAAKP,QAAS,CAC5B,GAAI4C,EAAIhC,SAASpC,MAAMkB,IAAIqD,QAAQ5C,KAAKY,UACpC,OAAO6B,EAEXE,EAAaF,EAEjB,GAAIE,EACA,OAAOA,EAGX,MAKR,IAAIE,EAAO,EACPC,EAAYpC,EAAgBqC,WAAW7B,EAAM2B,GAAMtB,WAAYvB,KAAKJ,IAAI2B,YAE5E,IAAK,IAAItF,EAAI,EAAGA,EAAIiF,EAAMsB,OAAQvG,IAAK,CACvByE,EAAgBqC,WAAW7B,EAAMjF,GAAG2D,IAAI2B,WAAYvB,KAAKJ,IAAI2B,YAC7DuB,IACRD,EAAO5G,GAIf,OAAOiF,EAAM2B,GAAMhD,QAAQ,GAG/B,aAAaO,GAELA,aAAgBT,GAChBe,EAAgBsC,WAAWhD,KAAKkB,MAAOd,GACvCJ,KAAKc,aAAamC,KAAKjD,OAEhBI,aAAgBI,IACvBE,EAAgBsC,KAAK5C,EAAKN,OAAOD,QAASO,GACP,IAA/BA,EAAKN,OAAOD,QAAQ2C,QACpB9B,EAAgBsC,WAAWhD,KAAKkB,MAAOd,EAAKN,QAC5CE,KAAKc,aAAamC,KAAKjD,OAEvBA,KAAKc,aAAamC,KAAK7C,EAAKN,SAKxC,WAAWM,EAAgC8C,GACvC,MAAMhC,QAAclB,KAAKkB,MACnBiC,EAAQD,EAAM,GAAM,EAEpBE,EAAShD,IACX,MAAMiD,GAAOnC,EAAMoC,QAAQlD,GAAQ+C,EAAQjC,EAAMsB,QAAUtB,EAAMsB,OACjE,OAAOtB,EAAMmC,IAGjB,GAAIjD,aAAgBT,EAChB,OAAIuD,EACOE,EAAMhD,GAAMP,QAAQ,GAEpBa,EAAgB6C,MAAMH,EAAMhD,GAAMP,SAIjD,GAAIO,aAAgBI,EAAe,CAC/B,MAAM6C,EAAMjD,EAAKN,OAAOD,QAAQyD,QAAQlD,GAAQ+C,EAChD,OAAIE,EAAM,EACC3C,EAAgB6C,MAAMH,EAAMhD,EAAKN,QAAQD,SACzCwD,GAAOjD,EAAKN,OAAOD,QAAQ2C,OAC3BY,EAAMhD,EAAKN,QAAQD,QAAQ,GAE3BO,EAAKN,OAAOD,QAAQwD,IAK/B,yBAAyBG,EAAoBC,GACjD,OAAID,EAAE5D,IAAI2B,WAAakC,EAAE7D,IAAI2B,YACjB,EACDiC,EAAE5D,IAAI2B,WAAakC,EAAE7D,IAAI2B,WACzB,EACAiC,EAAEnF,MAAMM,MAAM+E,SAASD,EAAEpF,MAAMM,QAC9B,EACD6E,EAAEnF,MAAMM,MAAMiE,QAAQa,EAAEpF,MAAMM,OAC9B,EAEA,EAIP,kBAAkB6E,EAAWC,GACjC,IAAIrF,EAAM,EACV,KAAOA,EAAMoF,EAAEhB,QAAUpE,EAAMqF,EAAEjB,QAAUgB,EAAEG,WAAWvF,KAASqF,EAAEE,WAAWvF,IAC1EA,GAAO,EAEX,OAAOA,EAGH,YAAewF,EAAY9B,GAC/B,MAAMuB,EAAMO,EAAMN,QAAQxB,GACtBuB,GAAO,GACPO,EAAMC,OAAOR,EAAK,GAIlB,aAAgBO,GACpB,OAAOA,EAAMA,EAAMpB,OAAS,IAjNpC,oBAgOA,MAAasB,EAIT,YACYC,EACAC,EAAA,GADA,KAAAD,OACA,KAAAC,SAER,MAAMC,EAAMF,EAAKjH,IAAYgH,EAAmBI,MAE5ClE,KAAK9C,MADU,iBAAR+G,GAAoBA,GAAO,GAAKA,GAAO,EACjCA,EAEAD,EAIrB,YACI,OAAOhE,KAAKgE,OAGhB,UAAU9G,GACN8C,KAAKgE,OAAS9G,EACdiC,EAAOwC,SAASC,eAAe,aAAc,oCAAqD,IAAhB5B,KAAKgE,OAAqC,eAAiB,gBAC7IhE,KAAK+D,KAAKI,OAAOL,EAAmBI,KAAMhH,IAvBlD,uBAEmB,EAAAgH,KAAO,oCAyB1B,MAAaE,EACT,YACahE,EACAN,EACAe,GAFA,KAAAT,OACA,KAAAN,SACA,KAAAe,aAJjB,aAQA,MAAawD,EAMT,YAAqBzE,EAA0BgB,EAAoC0D,GAA9D,KAAA1E,MAA0B,KAAAgB,WAAoC,KAAA0D,YAJ1E,KAAA3D,OAAS,gBAKdX,KAAKuE,MAAQ9C,QAAQC,QAAQvC,EAAOwC,SAASC,eAA2C,8BAA+BhC,EAAKgB,IAAWN,KAAKY,GACjIA,EAAQA,EAAMsD,IAAIpE,GAAQ,IAAIgE,EAAShE,OAAMqE,OAAWA,IAAc,IAIrF,mBAAmBrI,GACf,GAAuB,IAAnB4D,KAAKsE,UAAuC,CAC5C,MAAMI,QAAcvF,EAAOwC,SAASC,eAAmD,8BAA+BxF,EAAKgE,MAC3H,OAAOsE,EAAQA,EAAMF,IAAIpE,GAAQ,IAAIgE,EAAShE,EAAKuE,KAAMvI,EAAMgE,EAAKwE,WAAWJ,IAAInG,GAAS,IAAIc,EAAO0F,SAASzE,EAAKuE,KAAK/E,IAAKvB,MAAY,GACxI,CACH,MAAMqG,QAAcvF,EAAOwC,SAASC,eAAmD,8BAA+BxF,EAAKgE,MAC3H,OAAOsE,EAAQA,EAAMF,IAAIpE,GAAQ,IAAIgE,EAAShE,EAAK0E,GAAI1I,EAAMgE,EAAKwE,WAAWJ,IAAInG,GAAS,IAAIc,EAAO0F,SAASzI,EAAKgE,KAAKR,IAAKvB,MAAY,IAIjJ,kBACI,OAAO,IAAIgG,EAAWrE,KAAKJ,IAAKI,KAAKY,SAA6B,IAAnBZ,KAAKsE,UAAwC,EAA0B,GAG1H,gBACI,OAAqC,WAAvBtE,KAAKuE,OAAO/B,OAG9B,cACI,MAAOuC,SAAe/E,KAAKuE,MAC3B,OAAOQ,EAGX,oBAAoBlD,GAEhB,MAAOkD,SAAe/E,KAAKuE,MACrB5D,EAA4B,IAAnBX,KAAKsE,UAAwC,aAAe,aAE3E,OAAO,IAAI,EAAApC,YACP,EAAAA,YAAYC,OAAO4C,EAAM3E,KAAKR,IAAKmF,EAAM3E,KAAK4E,eAAerG,MAAMsG,KAAMF,EAAM3E,KAAK4E,eAAerG,MAAME,UAAWmB,KAAKsE,WACzHS,EAAM3E,KAAK5D,KACX,GAAG2C,EAAOe,UAAUkC,eAAepC,KAAKJ,WAAWe,IACnD,CAAE0B,UAAWR,EAAMS,MAAO,GAAIC,QAAS,qCACvCvC,KAAKJ,IACLI,KAAKY,WA9CjB,gB,8ECxUA,aAEA,oBAUI,YACasE,EACAC,EACAC,EACA7C,EACA3C,EACAgB,GALA,KAAAsE,KACA,KAAAC,QACA,KAAAC,cACA,KAAA7C,UACA,KAAA3C,MACA,KAAAgB,WAdb,iBAAiBiB,GACb,IAAIwD,EAAM,GACV,IAAK,MAAM7B,KAAK3B,EACZwD,GAAOC,KAAKC,UAAU/B,GAE1B,OAAOgC,OAAOb,KAAKU,GAAK9D,SAAS,YAazC,8BAEqB,KAAAkE,OAAS,IAAIC,IAE9B,cACI,OAA2B,GAApB1F,KAAKyF,OAAOE,KAGvB,EAAE3I,OAAO4I,YACL,IAAIC,EAAS,IAAI7F,KAAKyF,OAAOI,UAC7B,IAAK,IAAI5J,EAAI4J,EAAOrD,OAAS,EAAGvG,GAAK,EAAGA,UAC9B4J,EAAO5J,GAIrB,IAAImE,GACIA,IAGAJ,KAAKyF,OAAOK,OAAO1F,EAAK8E,IACxBlF,KAAKyF,OAAOM,IAAI3F,EAAK8E,GAAI9E,GACzBjB,EAAOwC,SAASC,eAAe,aAAc,6BAA6B,IAIlF,IAAIsD,GACA,OAAOlF,KAAKyF,OAAO3I,IAAIoI,GAG3B,QACIlF,KAAKyF,OAAOO,QACZ7G,EAAOwC,SAASC,eAAe,aAAc,6BAA6B,M,8ECrDlF,aACA,OACA,OACA,OACA,OAEA,oBAAyBqE,GAErB,MAAMC,EAAiB,IAAI,EAAApC,mBAAmBmC,EAAQE,aAChDC,EAAU,IAAI,EAAAC,QACdC,EAAW,IAAI,EAAAC,wBAEfC,EAAS,uBAQTC,EAAOtH,EAAOuH,OAAOC,eAAoDH,EAAQ,CACnFI,iBAAkBN,EAClBO,iBAAiB,IAIfC,EAAmB,IAAI,EAAAC,iBAAiBN,GAK9C,IAAIO,EAJJ7H,EAAOuH,OAAOO,4BAA4B,IAAMR,EAAKS,SAAWJ,EAAiBK,YAAQ1C,EAAWwB,EAAQmB,eAC5GX,EAAKY,sBAAsBvF,GAAKA,EAAEoF,QAAUJ,EAAiBK,OAASL,EAAiBQ,YAAQ7C,EAAWwB,EAAQmB,eAKlH,MAAMG,EAAcC,MAAOC,I,MACvBT,EAAQS,EAGRhB,EAAKiB,aAAUjD,EACfqC,EAAiBa,SAASX,GAC1B7H,EAAOwC,SAASC,eAAe,aAAc,2BAA4BgG,QAAQZ,IACjF7H,EAAOwC,SAASC,eAAe,aAAc,wBAA8B,QAAP,EAAEoF,SAAK,eAAErG,QA1B9D6G,iBAETrI,EAAOwC,SAASC,eAAe,aAAc,2BAA2B,SACxEzC,EAAOwC,SAASC,eAAe,GAAG4E,YAyBxCqB,GACAvB,EAASnC,OAAOsD,GAAYrB,GAExBqB,EACAK,IAEAC,KAIFA,EAAuB,KACzB,IAAIL,EAEAA,EADAtB,EAAQ4B,QACE,cAEA,mDAEdvB,EAAKiB,QAAUA,EACfjB,EAAKnE,MAAQ,WAGXwF,EAAqBN,UACvB,GAAIR,aAAiB,EAAAtG,gBAAiB,CAElC,MAAMuH,QAAcjB,EAAMiB,QACpBC,cAAqBlB,EAAM9F,OAAOsB,OAIpCiE,EAAKiB,QADK,IAAVO,GAAyB,IAAVC,EACA,GAAGD,eAAmBC,SACpB,IAAVD,EACQ,GAAGA,eAAmBC,UACpB,IAAVA,EACQ,GAAGD,gBAAoBC,SAEvB,GAAGD,gBAAoBC,UAIrB,oCAAjBlB,EAAMrG,OACN8F,EAAKnE,MAAQ,YAAY2F,KACD,yCAAjBjB,EAAMrG,SACb8F,EAAKnE,MAAQ,oBAAoB2F,WAG9BjB,aAAiB,EAAA3C,YAEA,IAApB2C,EAAM1C,UACNmC,EAAKnE,MAAQ,aAEbmE,EAAKnE,MAAQ,aAEjBmE,EAAKiB,QAAU,KAGfjB,EAAKiB,aAAUjD,EACfgC,EAAKnE,MAAQ,YAIf6F,EAAwBX,MAAOR,IAKjC,GAFAO,EAAYP,GAERA,EAAO,CAEP,GAAmC,WAAxBA,EAAM9F,OAAOsB,OAEpB,YADA+E,OAAY9C,GAIhB,MAAM2D,QAAkBpB,EAAMjC,QAC1BqD,GAAa3B,EAAKS,SAClBT,EAAK4B,OAAOD,EAAW,CAAEE,QAAQ,EAAMC,OAAO,IAGlDnC,EAAQoC,UAAUxB,EAAMyB,cAAc,CAACzB,EAAMrG,OAAQqG,EAAMpH,IAAKoH,EAAMpG,cAIxE8H,EAAwBlB,MAAO7G,EAAoBf,EAAkBgB,KACvE,IAAIoG,EACJ,GAAIpH,aAAeT,EAAOwJ,KAAO/H,aAAoBzB,EAAOyJ,SAExD5B,EAAQ,EAAAtG,gBAAgBnD,OAAOqC,EAAKgB,EAAUD,QAE3C,GAAIxB,EAAOuH,OAAOmC,iBAAkB,CAEvC,IAAIC,EAAS3J,EAAOuH,OAAOmC,iBACvB,EAAA3K,gBAAgB4K,EAAOC,SAAUD,EAAOV,UAAUY,UAClDhC,EAAQ,EAAAtG,gBAAgBnD,OAAOuL,EAAOC,SAASnJ,IAAKkJ,EAAOV,UAAUY,OAAQrI,IAGrFwH,EAAsBnB,IAGpBiC,EAAiB7I,IACfA,aAAgB,EAAA8B,aAChB/C,EAAOwC,SAASC,eAAexB,EAAKmC,QAAQA,WAAYnC,EAAKmC,QAAQF,YAWvE6G,EAA0B1B,MAAO5H,EAAkBgB,EAA4B0D,EAAY4B,EAAehJ,SAE5G,IAAI8J,EAEJ,GAAIpH,aAAeT,EAAOwJ,KAAO/H,aAAoBzB,EAAOyJ,SAExD5B,EAAQ,IAAI,EAAA3C,WAAWzE,EAAKgB,EAAU0D,QAEnC,GAAInF,EAAOuH,OAAOmC,iBAAkB,CAEvC,IAAIC,EAAS3J,EAAOuH,OAAOmC,iBACvB,EAAA3K,gBAAgB4K,EAAOC,SAAUD,EAAOV,UAAUY,UAClDhC,EAAQ,IAAI,EAAA3C,WAAWyE,EAAOC,SAASnJ,IAAKkJ,EAAOV,UAAUY,OAAQ1E,IAM7E,GAFAiD,EAAYP,GAERA,aAAiB,EAAA3C,WAAY,CAC7B,SAAU2C,EAAMgB,UAEZ,YADAT,OAAY9C,GAIhB,MAAM2D,QAAkBpB,EAAMjC,QAC1BqD,GAAa3B,EAAKS,SAClBT,EAAK4B,OAAOD,EAAW,CAAEE,QAAQ,EAAMC,OAAO,EAAMY,QAAQ,IAGhE/C,EAAQoC,UAAUxB,EAAMyB,cAAc,CAACzB,EAAMpH,IAAKoH,EAAMpG,SAAUoG,EAAM1C,eAI1E8E,EAAmC5B,MAAOlD,EAA2B+E,KACvEnD,EAAehJ,MAAQoH,EACnB+E,aAAe,EAAAjF,SACR8E,EAAwBG,EAAIjJ,KAAKR,IAAKyJ,EAAIjJ,KAAK4E,eAAerG,MAAO2F,GAErE0C,aAAiB,EAAA3C,WACjB6E,EAAwBlC,EAAMpH,IAAKoH,EAAMpG,SAAU0D,QADvD,GAcLgF,EAAkB,CAACD,EAAoDE,KAEzE,IAAI3J,EACAxB,EACAoL,GAAiBD,EAErB,GAAIF,aAAe,EAAA7I,cAAe,CAC9B,MAAM,SAAEC,GAAa4I,EACrBzJ,EAAMa,EAASb,IACfxB,EAAMqC,EAASpC,MAAMM,WAEd0K,aAAe,EAAAjF,UACtBxE,EAAMyJ,EAAIjJ,KAAKR,IACfxB,EAAMiL,EAAIjJ,KAAK4E,eAAerG,OAEvB0K,aAAe,EAAAnH,cACtBtC,EAAMyJ,EAAIzJ,IACVxB,EAAMiL,EAAIzI,SACV4I,GAAgB,GAGhB5J,GAAOxB,GACPe,EAAOuH,OAAO+C,iBAAiB7J,EAAK,CAChCwI,UAAW,IAAIjJ,EAAOC,MAAMhB,EAAKA,GACjCoL,mBAuBNE,EAAkBlC,MAAOtE,IAC3B,KAAM8D,aAAiB,EAAAtG,iBACnB,OAEJ,MAAM0H,EAAY3B,EAAK2B,UAAU,IAAMpB,EAAMjC,QAC7C,GAAIqD,aAAqB,EAAAlG,aAAekG,aAAqB,EAAAhE,SACzD,OAEJ,MAAMuF,QAAa3C,EAAM3G,KAAK+H,EAAWlF,GACrCyG,IACAlD,EAAK4B,OAAOsB,EAAM,CAAErB,QAAQ,IAC5BgB,EAAgBK,GAAM,KAIxBC,EAAcpC,MAAO6B,IACvB,IAAIQ,EAAM,GACNC,EAAQ,CAACT,GACb,KAAOS,EAAMtH,OAAS,GAAG,CACrB,IAAIpC,EAAO0J,EAAMC,MACjB,GAAI3J,aAAgB,EAAAM,gBAChBoJ,EAAMtI,eAAepB,EAAKc,OAAO8I,MAAM,EAAG,UAEvC,GAAI5J,aAAgB,EAAAI,cAAe,CACtC,IAAIrC,QAAYiC,EAAKN,OAAOS,cACxB0J,EAAS,EAAA1L,iBAAiBJ,EAAKiC,EAAKK,SAASpC,MAAO,IAAI,GAC5DwL,GAAO,KAAKzJ,EAAKK,SAASpC,MAAMM,MAAMsG,KAAO,MAAM7E,EAAKK,SAASpC,MAAMM,MAAME,UAAY,MAAMoL,EAAOhL,OAASgL,EAAO5K,OAAS4K,EAAOxK,gBAE/HW,aAAgB,EAAAT,WACvBkK,GAAO,GAAG1K,EAAOe,UAAUkC,eAAehC,EAAKR,UAC/CkK,EAAMtI,QAAQpB,EAAKP,UAGvBgK,SACM1K,EAAO+K,IAAIC,UAAUC,UAAUP,IA6BvCQ,EAAiB7C,MAAO5H,EAAiBgB,EAA2BC,WAChEsH,EAAsB,IAAI,EAAAzH,gBAAgB,kCAAuBd,EAAKgB,EAAUa,QAAQC,QAAQb,MAE1G,IAAIyJ,EACJ,MAAMC,EAAS,+BACf,SAASC,EAAqBvJ,GAC1B,GAAIA,IAAUA,EAAMwJ,qBAAqBF,GACrC,OAEJ,MAAMrN,EAAQiC,EAAOe,UAAUwK,mBAAmB5N,IAAYyN,GAC1DD,IACAA,EAAyBK,UACzBL,OAA2B7F,GAEjB,SAAVvH,IACAoN,EAA2BnL,EAAOwC,SAASiJ,gBAAgB,+BAAgCP,IAGnGG,IAEAvE,EAAQmB,cAAc5F,KAClBiF,EACAtH,EAAOe,UAAU2K,yBAAyBL,GAC1CrL,EAAOwC,SAASiJ,gBAAgB,uBAAwB,IAAMlC,EAAsB,oCACpFvJ,EAAOwC,SAASiJ,gBAAgB,sCAAuC,IAAMlC,EAAsB,yCACnGvJ,EAAOwC,SAASiJ,gBAAgB,kCAAmClC,GACnEvJ,EAAOwC,SAASiJ,gBAAgB,oCAAqC1B,GACrE/J,EAAOwC,SAASiJ,gBAAgB,oCAAsCvB,GAAQD,EAAiC,EAAyBC,IACxIlK,EAAOwC,SAASiJ,gBAAgB,oCAAsCvB,GAAQD,EAAiC,EAAyBC,IACxIlK,EAAOwC,SAASiJ,gBAAgB,yBAA0B3B,GAC1D9J,EAAOwC,SAASiJ,gBAAgB,0BAvMbpD,UACnB,MAAOrG,GAAQiF,EACXjF,GACA8H,EAAc9H,KAqMlBhC,EAAOwC,SAASiJ,gBAAgB,wBAtJfpD,UACjBD,OAAY9C,KAsJZtF,EAAOwC,SAASiJ,gBAAgB,+BAnJRpD,UACxBpB,EAAQJ,QACRuB,OAAY9C,KAkJZtF,EAAOwC,SAASiJ,gBAAgB,uBAAwBtB,GACxDnK,EAAOwC,SAASiJ,gBAAgB,yBAnHXpD,MAAO6B,I,MAC5B,GAAIrC,aAAiB,EAAAtG,gBAAiB,CAClC,IAAIiJ,EACAN,aAAe,EAAA7I,gBAEP,QAAJ,EADJmJ,QAAa3C,EAAM3G,KAAKgJ,GAAK,UACrB,eAAEvJ,UAAWuJ,EAAIvJ,SACrB6J,OAAOlF,SAGTuC,EAAM8D,OAAOzB,GACnBvC,EAAiBiE,UACjBjD,IACI6B,GACAlD,EAAK4B,OAAOsB,EAAM,CAAErB,QAAQ,OAuGpCnJ,EAAOwC,SAASiJ,gBAAgB,uBAAwB,IAAMlB,GAAgB,IAC9EvK,EAAOwC,SAASiJ,gBAAgB,uBAAwB,IAAMlB,GAAgB,IAC9EvK,EAAOwC,SAASiJ,gBAAgB,uBAAwBhB,GACxDzK,EAAOwC,SAASiJ,gBAAgB,0BAA2B,IAAMhB,EAAY5C,IAC7E7H,EAAOwC,SAASiJ,gBAAgB,2BAhEXvB,IACjBA,aAAe,EAAA1J,WACQ,SAAnB0J,EAAIzJ,IAAIoL,OACR7L,EAAO+K,IAAIC,UAAUC,UAAUf,EAAIzJ,IAAIqL,QAEvC9L,EAAO+K,IAAIC,UAAUC,UAAUf,EAAIzJ,IAAI2B,UAAS,OA4DxDpC,EAAOwC,SAASiJ,gBAAgB,kCAvDZpD,UAIpB,MAAM0D,EAAQ,IAAI9E,GAAS5B,IAAIpE,IAAQ,CACnC+E,MAAO/E,EAAK+E,MACZC,YAAahF,EAAKgF,YAClBhF,UAEE+K,QAAahM,EAAOuH,OAAO0E,cAAcF,EAAO,CAAEG,YAAa,qCACjEF,SACMlC,EAAckC,EAAK/K,W,8ECtTrC,aACA,OAGA,yBAaI,YAA6BkL,GAAA,KAAAA,QAXZ,KAAAC,gBAAkBpM,EAAOuH,OAAO8E,+BAA+B,CAC5EC,gBAAiB,IAAItM,EAAOuM,WAAW,uCACvCC,cAAexM,EAAOyM,wBAAwBC,aAC9CC,kBAAmB3M,EAAO4M,kBAAkBC,OAC5CC,mBAAoB,IAAI9M,EAAOuM,WAAW,yCAKtC,KAAAQ,QAAU,IAAIC,IAItB,SAASnF,GACLhH,KAAKoM,OAASpF,EACdhH,KAAKkM,QAAQlG,QACThG,KAAKqM,WACLrM,KAAKqM,UAAU1B,UAGf3D,aAAiB,EAAAtG,gBACjBV,KAAKqM,UAAYlN,EAAOe,UAAUoM,wBAAwB9E,MAAM1F,IAI5D9B,KAAKkM,QAAQ1D,UAAUxB,EAAMlK,IAAIgF,EAAEiH,SAASnJ,QAGzCoH,aAAiB,EAAA3C,aACxBrE,KAAKqM,UAAYrM,KAAKsL,MAAMiB,qBAAqB,KAC7CvM,KAAKmH,UAIbnH,KAAKmH,OAGT,aACI,MAAQ0B,iBAAkBC,GAAW3J,EAAOuH,OAC5C,GAAIoC,GAAUA,EAAO0D,WAAY,CAC7B,MAAMC,EAAyB,GAC/B,GAAIzM,KAAKoM,kBAAkB,EAAA1L,gBAAiB,CACxC,MAAMN,QAAaJ,KAAKoM,OAAOtP,IAAIgM,EAAOC,SAASnJ,KAC/CQ,IAASJ,KAAKkM,QAAQQ,IAAItM,IAC1BqM,EAAOjL,QAAQpB,EAAKP,QAAQ2E,IAAI/B,GAAOA,EAAIhC,SAASpC,aAErD,GAAI2B,KAAKoM,kBAAkB,EAAA/H,WAAY,CAC1C,MAAOsI,GAAO3M,KAAKsL,MAAMlD,UACzB,GAAIuE,aAAe,EAAAvI,SAAU,CACzB,IAAIvD,EAAY8L,EAAI9L,UACfA,IACDA,EAAY,CAAC,IAAI1B,EAAO0F,SAAS8H,EAAIvM,KAAKR,IAAK+M,EAAIvM,KAAK4E,kBAE5D,IAAK,MAAM1D,KAAOT,EACVS,EAAI1B,IAAI2B,aAAeuH,EAAOC,SAASnJ,IAAI2B,YAC3CkL,EAAOjL,KAAKF,EAAIjD,QAKhCyK,EAAO8D,eAAe5M,KAAKuL,gBAAiBkB,IAIpD,OACI,IAAK,MAAM3D,KAAU3J,EAAOuH,OAAOmG,mBAC/B/D,EAAO8D,eAAe5M,KAAKuL,gBAAiB,IAIpD,UACIvL,KAAKsH,OACLtH,KAAKmH,U,8EC9Eb,aAEA,OAEA,MAAa2F,EAOT,YACYV,GAAA,KAAAA,SANK,KAAAW,qBAAuB,IAAI5N,EAAO4B,aAC1C,KAAAiM,oBAAsBhN,KAAK+M,qBAAqB9L,MAOrDjB,KAAKiN,eAAiBb,EAAOpL,YAAYc,GAAK9B,KAAK+M,qBAAqB9J,KAAKnB,aAAa,EAAAnC,SAAWmC,OAAI2C,IAG7G,UACIzE,KAAK+M,qBAAqBpC,UAC1B3K,KAAKiN,eAAetC,UAGxB,kBAAkBuC,GAEd,GAAIA,aAAmB,EAAAvN,SAAU,CAE7B,MAAMwN,EAAS,IAAIhO,EAAOiO,SAASF,EAAQtN,KAK3C,OAJAuN,EAAOE,aAAe,YACtBF,EAAO/H,aAAc,EACrB+H,EAAOG,SAAWnO,EAAOoO,UAAUC,KACnCL,EAAOM,iBAAmBtO,EAAOuO,yBAAyBC,UACnDR,EAEJ,CAEH,MAAM,MAAE9O,GAAU6O,EAAQzM,SACpBtC,QAAY+O,EAAQpN,OAAOS,aAAY,IACvC,OAAEtB,EAAM,OAAEI,EAAM,MAAEI,GAAU,EAAAlB,iBAAiBJ,EAAKE,GAElD8G,EAA8B,CAChCA,MAAOlG,EAASI,EAASI,EACzBmO,WAAY,CAAC,CAAC3O,EAAOuD,OAAQvD,EAAOuD,OAASnD,EAAOmD,UAGlD2K,EAAS,IAAIhO,EAAO0O,UAAU1I,GAIpC,OAHAgI,EAAOM,iBAAmBtO,EAAOuO,yBAAyBI,KAC1DX,EAAOE,aAAe,iBACtBF,EAAO5K,QAAU,CAAEA,QAAS,uBAAwBD,MAAO,iBAAkBD,UAAW,CAAC6K,IAClFC,GAIf,kBAAkBD,GACd,OAAKA,EAGMA,aAAmB,EAAAvN,SAEnBuN,EAAQrN,aAFZ,EADIG,KAAKoM,OAAOlL,MAO3B,UAAUgM,GACN,OAAOA,aAAmB,EAAA1M,cAAgB0M,EAAQpN,YAAS2E,GA3DnE,uBA+DA,MAAasJ,EAKT,YACY3B,GAAA,KAAAA,SAJK,KAAA4B,SAAW,IAAI7O,EAAO4B,aAC9B,KAAAiM,oBAAsBhN,KAAKgO,SAAS/M,MAM7C,YAAYiM,GAER,MAAM9M,EAAO,IAAIjB,EAAOiO,SAASF,EAAQ9M,KAAK5D,MAM9C,OALA4D,EAAKgF,YAAc8H,EAAQ9M,KAAK6N,OAChC7N,EAAKiN,aAAe,YACpBjN,EAAKkN,SAAWS,EAAqBG,cAAchB,EAAQ9M,KAAK+N,MAChE/N,EAAKmC,QAAU,CAAEA,QAAS,uBAAwBD,MAAO,YAAaD,UAAW,CAAC6K,IAClF9M,EAAKqN,iBAAmBtO,EAAOuO,yBAAyBC,UACjDvN,EAGX,YAAY8M,GACR,OAAKA,EAGMlN,KAAKoM,OAAOgC,aAAalB,GAFzBlN,KAAKoM,OAAO7H,MAM3B,UAAU2I,GACN,OAAOA,EAAQpN,OAYX,qBAAqBqO,GACzB,IAAIjJ,EAAK6I,EAAqBM,cAAcF,GAC5C,OAAOjJ,GAAM,IAAI/F,EAAOoO,UAAUrI,IA3C1C,yBAiCmB,EAAAmJ,cAAgB,CAC3B,cAAe,gBAAiB,mBAAoB,iBAAkB,eAAgB,gBACtF,kBAAmB,eAAgB,qBAAsB,cAAe,mBACxE,kBAAmB,kBAAmB,kBAAmB,gBAAiB,gBAAiB,iBAC3F,eAAgB,gBAAiB,aAAc,cAAe,qBAAsB,gBACpF,eAAgB,kBAAmB,yBAS3C,MAAaC,EAKT,YAA6BC,GAAA,KAAAA,WAHZ,KAAAP,SAAW,IAAI7O,EAAO4B,aAC9B,KAAAiM,oBAAsBhN,KAAKgO,SAAS/M,MAI7C,YAAYiM,GAUR,MAAMC,EAAS,IAAIhO,EAAOiO,SAASF,EAAQ/H,OAM3C,OAJAgI,EAAO/H,YAAc8H,EAAQ9H,YAC7B+H,EAAO5K,QAAU,CAAEA,QAAS,uBAAwBF,UAAW,CAAC6K,GAAU5K,MAAO,QACjF6K,EAAOM,iBAAmBtO,EAAOuO,yBAAyBI,KAC1DX,EAAOE,aAAe,eACfF,EAGX,cACI,MAAO,IAAInN,KAAKuO,UAGpB,cA9BJ,wBAsCA,8CAIY,KAAAzN,aAAe,IAAI3B,EAAO4B,aAEzB,KAAAiM,oBAAsBhN,KAAKc,aAAaG,MAEjD,OAAO+F,GACChH,KAAKwO,oBACLxO,KAAKwO,kBAAkB7D,UACvB3K,KAAKwO,uBAAoB/J,GAGzBzE,KAAKyO,WAAyE,mBAA5BzO,KAAKyO,UAAW9D,UACzC3K,KAAKyO,UAAW9D,UACzC3K,KAAKyO,eAAYhK,GAGjBuC,aAAiB,EAAAtG,gBACjBV,KAAKyO,UAAY,IAAI3B,EAAmB9F,GACjCA,aAAiB,EAAA3C,WACxBrE,KAAKyO,UAAY,IAAIV,EAAqB/G,GAE1ChH,KAAKyO,UAAY,IAAIH,EAAoBtH,GAG7ChH,KAAKc,aAAamC,OAClBjD,KAAKwO,kBAAoBxO,KAAKyO,UAAUzB,oBAAoBlL,GAAK9B,KAAKc,aAAamC,KAAKnB,IAG5F,YAAYoL,GACR,OAAOlN,KAAKyO,UAAWC,YAAYxB,GAGvC,YAAYA,G,MACR,OAAqB,QAArB,EAAOlN,KAAKyO,iBAAS,eAAEE,YAAYzB,GAGvC,UAAUA,G,MACN,OAAqB,QAArB,EAAOlN,KAAKyO,iBAAS,eAAEG,UAAU1B","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"vscode\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { HistoryItem } from './history';\n\n\nexport function getRequestRange(doc: vscode.TextDocument, pos: vscode.Position): vscode.Range | undefined {\n    let range = doc.getWordRangeAtPosition(pos);\n    if (!range) {\n        range = doc.getWordRangeAtPosition(pos, /[^\\s]+/);\n    }\n    return range;\n}\n\nexport function getPreviewChunks(doc: vscode.TextDocument, range: vscode.Range, beforeLen: number = 8, trim: boolean = true) {\n    let previewStart = range.start.with({ character: Math.max(0, range.start.character - beforeLen) });\n    let wordRange = doc.getWordRangeAtPosition(previewStart);\n    let before = doc.getText(new vscode.Range(wordRange ? wordRange.start : previewStart, range.start));\n    let inside = doc.getText(range);\n    let previewEnd = range.end.translate(0, 331);\n    let after = doc.getText(new vscode.Range(range.end, previewEnd));\n    if (trim) {\n        before = before.replace(/^\\s*/g, '');\n        after = after.replace(/\\s*$/g, '');\n    }\n    return { before, inside, after };\n}\n\nexport const enum ItemSource {\n    References = 'vscode.executeReferenceProvider',\n    Implementations = 'vscode.executeImplementationProvider',\n    CallHierarchy = 'vscode.prepareCallHierarchy'\n}\n\n\n//#region References Model\n\n\nexport class FileItem {\n\n    private _document: Thenable<vscode.TextDocument> | undefined;\n\n    constructor(\n        readonly uri: vscode.Uri,\n        readonly results: Array<ReferenceItem>,\n        readonly parent: ReferencesModel\n    ) { }\n\n    async getDocument(warmUpNext?: boolean) {\n        if (!this._document) {\n            this._document = vscode.workspace.openTextDocument(this.uri);\n        }\n        if (warmUpNext) {\n            // load next document once this document has been loaded\n            // and when next document has not yet been loaded\n            const item = await this.parent.move(this, true);\n            if (item && !item.parent._document) {\n                this._document.then(() => item.parent.getDocument(false));\n            }\n        }\n        return this._document;\n    }\n}\n\nexport class ReferenceItem {\n    constructor(\n        readonly location: vscode.Location,\n        readonly parent: FileItem,\n    ) { }\n}\n\nexport class ReferencesModel {\n\n    static create(uri: vscode.Uri, position: vscode.Position, source: ItemSource): ReferencesModel {\n        const locations = Promise.resolve(vscode.commands.executeCommand<vscode.Location[]>(source, uri, position)).then(loc => {\n            if (!loc) {\n                return [];\n            } else {\n                return loc.sort(ReferencesModel._compareLocations);\n            }\n        });\n        return new ReferencesModel(source, uri, position, locations);\n    }\n\n    private readonly _onDidChange = new vscode.EventEmitter<ReferencesModel | FileItem>();\n    readonly onDidChange = this._onDidChange.event;\n\n    readonly items: Promise<FileItem[]>;\n\n    constructor(\n        readonly source: ItemSource,\n        readonly uri: vscode.Uri,\n        readonly position: vscode.Position,\n        locations: Promise<vscode.Location[]>\n    ) {\n        this.items = locations.then(locations => {\n            const items: FileItem[] = [];\n            let last: FileItem | undefined;\n            locations.sort(ReferencesModel._compareLocations);\n            for (const loc of locations) {\n                if (!last || last.uri.toString() !== loc.uri.toString()) {\n                    last = new FileItem(loc.uri, [], this);\n                    items.push(last);\n                }\n                last.results.push(new ReferenceItem(loc, last));\n            }\n            return items;\n        });\n    }\n\n    async asHistoryItem(args: any[]) {\n        let doc: vscode.TextDocument;\n        try {\n            doc = await vscode.workspace.openTextDocument(this.uri);\n        } catch (e) {\n            return;\n        }\n        const range = getRequestRange(doc, this.position);\n        if (!range) {\n            return;\n        }\n        // make preview\n        let { before, inside, after } = getPreviewChunks(doc, range);\n        // ensure whitespace isn't trimmed when rendering MD\n        before = before.replace(/s$/g, String.fromCharCode(160));\n        after = after.replace(/^s/g, String.fromCharCode(160));\n        let preview = before + inside + after;\n\n        // source hint\n        let source = this.source === ItemSource.Implementations ? 'implementations' : 'references';\n\n        return new HistoryItem(\n            HistoryItem.makeId(this.source, this.uri, this.position),\n            inside,\n            `${vscode.workspace.asRelativePath(this.uri)} • ${preview} • ${source}`,\n            { arguments: args, title: '', command: 'references-view.refindReference' },\n            this.uri,\n            this.position\n        );\n    }\n\n    async total(): Promise<number> {\n        let n = 0;\n        for (const item of await this.items) {\n            n += item.results.length;\n        }\n        return n;\n    }\n\n    async get(uri: vscode.Uri): Promise<FileItem | undefined> {\n        for (const item of await this.items) {\n            if (item.uri.toString() === uri.toString()) {\n                return item;\n            }\n        }\n        return undefined;\n    }\n\n    async first(): Promise<ReferenceItem | undefined> {\n\n        const items = await this.items;\n\n        if (items.length === 0) {\n            return;\n        }\n        // NOTE: this.items is sorted by location (uri/range)\n        for (const item of items) {\n            if (item.uri.toString() === this.uri.toString()) {\n                // (1) pick the item at the request position\n                for (const ref of item.results) {\n                    if (ref.location.range.contains(this.position)) {\n                        return ref;\n                    }\n                }\n                // (2) pick the first item after or last before the request position\n                let lastBefore: ReferenceItem | undefined;\n                for (const ref of item.results) {\n                    if (ref.location.range.end.isAfter(this.position)) {\n                        return ref;\n                    }\n                    lastBefore = ref;\n                }\n                if (lastBefore) {\n                    return lastBefore;\n                }\n\n                break;\n            }\n        }\n\n        // (3) pick the file with the longest common prefix\n        let best = 0;\n        let bestValue = ReferencesModel._prefixLen(items[best].toString(), this.uri.toString());\n\n        for (let i = 1; i < items.length; i++) {\n            let value = ReferencesModel._prefixLen(items[i].uri.toString(), this.uri.toString());\n            if (value > bestValue) {\n                best = i;\n            }\n        }\n\n        return items[best].results[0];\n    }\n\n    async remove(item: FileItem | ReferenceItem): Promise<void> {\n\n        if (item instanceof FileItem) {\n            ReferencesModel._del(await this.items, item);\n            this._onDidChange.fire(this);\n\n        } else if (item instanceof ReferenceItem) {\n            ReferencesModel._del(item.parent.results, item);\n            if (item.parent.results.length === 0) {\n                ReferencesModel._del(await this.items, item.parent);\n                this._onDidChange.fire(this);\n            } else {\n                this._onDidChange.fire(item.parent);\n            }\n        }\n    }\n\n    async move(item: FileItem | ReferenceItem, fwd: boolean): Promise<ReferenceItem | undefined> {\n        const items = await this.items;\n        const delta = fwd ? +1 : -1;\n\n        const _move = (item: FileItem): FileItem => {\n            const idx = (items.indexOf(item) + delta + items.length) % items.length;\n            return items[idx];\n        };\n\n        if (item instanceof FileItem) {\n            if (fwd) {\n                return _move(item).results[0];\n            } else {\n                return ReferencesModel._tail(_move(item).results);\n            }\n        }\n\n        if (item instanceof ReferenceItem) {\n            const idx = item.parent.results.indexOf(item) + delta;\n            if (idx < 0) {\n                return ReferencesModel._tail(_move(item.parent).results);\n            } else if (idx >= item.parent.results.length) {\n                return _move(item.parent).results[0];\n            } else {\n                return item.parent.results[idx];\n            }\n        }\n    }\n\n    private static _compareLocations(a: vscode.Location, b: vscode.Location): number {\n        if (a.uri.toString() < b.uri.toString()) {\n            return -1;\n        } else if (a.uri.toString() > b.uri.toString()) {\n            return 1;\n        } else if (a.range.start.isBefore(b.range.start)) {\n            return -1;\n        } else if (a.range.start.isAfter(b.range.start)) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private static _prefixLen(a: string, b: string): number {\n        let pos = 0;\n        while (pos < a.length && pos < b.length && a.charCodeAt(pos) === b.charCodeAt(pos)) {\n            pos += 1;\n        }\n        return pos;\n    }\n\n    private static _del<T>(array: T[], e: T): void {\n        const idx = array.indexOf(e);\n        if (idx >= 0) {\n            array.splice(idx, 1);\n        }\n    }\n\n    private static _tail<T>(array: T[]): T | undefined {\n        return array[array.length - 1];\n    }\n}\n\n\n//#endregion\n\n//#region CallHierarchy Model\n\nexport const enum CallsDirection {\n    Incoming,\n    Outgoing\n}\n\n\nexport class RichCallsDirection {\n\n    private static _key = 'references-view.callHierarchyMode';\n\n    constructor(\n        private _mem: vscode.Memento,\n        private _value: CallsDirection = CallsDirection.Incoming,\n    ) {\n        const raw = _mem.get<number>(RichCallsDirection._key);\n        if (typeof raw === 'number' && raw >= 0 && raw <= 1) {\n            this.value = raw;\n        } else {\n            this.value = _value;\n        }\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    set value(value: CallsDirection) {\n        this._value = value;\n        vscode.commands.executeCommand('setContext', 'references-view.callHierarchyMode', this._value === CallsDirection.Incoming ? 'showIncoming' : 'showOutgoing');\n        this._mem.update(RichCallsDirection._key, value);\n    }\n}\n\nexport class CallItem {\n    constructor(\n        readonly item: vscode.CallHierarchyItem,\n        readonly parent: CallItem | undefined,\n        readonly locations: vscode.Location[] | undefined\n    ) { }\n}\n\nexport class CallsModel {\n\n    readonly source = 'callHierarchy';\n\n    readonly roots: Promise<CallItem[]>;\n\n    constructor(readonly uri: vscode.Uri, readonly position: vscode.Position, readonly direction: CallsDirection) {\n        this.roots = Promise.resolve(vscode.commands.executeCommand<vscode.CallHierarchyItem[]>('vscode.prepareCallHierarchy', uri, position)).then(items => {\n            return items ? items.map(item => new CallItem(item, undefined, undefined)) : [];\n        });\n    }\n\n    async resolveCalls(call: CallItem): Promise<CallItem[]> {\n        if (this.direction === CallsDirection.Incoming) {\n            const calls = await vscode.commands.executeCommand<vscode.CallHierarchyIncomingCall[]>('vscode.provideIncomingCalls', call.item);\n            return calls ? calls.map(item => new CallItem(item.from, call, item.fromRanges.map(range => new vscode.Location(item.from.uri, range)))) : [];\n        } else {\n            const calls = await vscode.commands.executeCommand<vscode.CallHierarchyOutgoingCall[]>('vscode.provideOutgoingCalls', call.item);\n            return calls ? calls.map(item => new CallItem(item.to, call, item.fromRanges.map(range => new vscode.Location(call.item.uri, range)))) : [];\n        }\n    }\n\n    changeDirection(): CallsModel {\n        return new CallsModel(this.uri, this.position, this.direction === CallsDirection.Incoming ? CallsDirection.Outgoing : CallsDirection.Incoming);\n    }\n\n    async isEmpty() {\n        return (await this.roots).length === 0;\n    }\n\n    async first() {\n        const [first] = await this.roots;\n        return first;\n    }\n\n    async asHistoryItem(args: any[]) {\n\n        const [first] = await this.roots;\n        const source = this.direction === CallsDirection.Incoming ? 'calls from' : 'callers of';\n\n        return new HistoryItem(\n            HistoryItem.makeId(first.item.uri, first.item.selectionRange.start.line, first.item.selectionRange.start.character, this.direction),\n            first.item.name,\n            `${vscode.workspace.asRelativePath(this.uri)}  • ${source}`,\n            { arguments: args, title: '', command: 'references-view.showCallHierarchy' },\n            this.uri,\n            this.position\n        );\n    }\n}\n\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\n\nexport class HistoryItem {\n\n    static makeId(...args: any[]): string {\n        let str = '';\n        for (const a of args) {\n            str += JSON.stringify(a);\n        }\n        return Buffer.from(str).toString('base64');\n    }\n\n    constructor(\n        readonly id: string,\n        readonly label: string,\n        readonly description: string,\n        readonly command: vscode.Command,\n        readonly uri: vscode.Uri,\n        readonly position: vscode.Position\n    ) { }\n}\n\nexport class History {\n\n    private readonly _items = new Map<string, HistoryItem>();\n\n    get isEmpty(): boolean {\n        return this._items.size == 0;\n    }\n\n    *[Symbol.iterator]() {\n        let values = [...this._items.values()];\n        for (let i = values.length - 1; i >= 0; i--) {\n            yield values[i];\n        }\n    }\n\n    add(item?: HistoryItem): void {\n        if (item) {\n            // maps have filo-ordering and by delete-insert we make\n            // sure to update the order for re-run queries\n            this._items.delete(item.id);\n            this._items.set(item.id, item);\n            vscode.commands.executeCommand('setContext', 'reference-list.hasHistory', true);\n        }\n    }\n\n    get(id: string): HistoryItem | undefined {\n        return this._items.get(id);\n    }\n\n    clear(): void {\n        this._items.clear();\n        vscode.commands.executeCommand('setContext', 'reference-list.hasHistory', false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { EditorHighlights } from './editorHighlights';\nimport { History, HistoryItem } from './history';\nimport { CallItem, CallsDirection, CallsModel, FileItem, getPreviewChunks, getRequestRange, ItemSource, ReferenceItem, ReferencesModel, RichCallsDirection } from './models';\nimport { TreeDataProviderWrapper, TreeItem } from './provider';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    const callsDirection = new RichCallsDirection(context.globalState);\n    const history = new History();\n    const provider = new TreeDataProviderWrapper<TreeItem>();\n\n    const viewId = 'references-view.tree';\n\n    const revealView = async () => {\n        // upon first interaction set the reference list as active and reveal it\n        await vscode.commands.executeCommand('setContext', 'reference-list.isActive', true);\n        await vscode.commands.executeCommand(`${viewId}.focus`);\n    };\n\n    const view = vscode.window.createTreeView<FileItem | ReferenceItem | CallItem>(viewId, {\n        treeDataProvider: provider,\n        showCollapseAll: true\n    });\n\n    // editor highlights\n    const editorHighlights = new EditorHighlights(view);\n    vscode.window.onDidChangeActiveTextEditor(() => view.visible && editorHighlights.show(), undefined, context.subscriptions);\n    view.onDidChangeVisibility(e => e.visible ? editorHighlights.show() : editorHighlights.hide(), undefined, context.subscriptions);\n\n    // current active model\n    let model: ReferencesModel | CallsModel | undefined;\n\n    const updateModel = async (newModel: ReferencesModel | CallsModel | undefined) => {\n        model = newModel;\n\n        // update state\n        view.message = undefined;\n        editorHighlights.setModel(model);\n        vscode.commands.executeCommand('setContext', 'reference-list.hasResult', Boolean(model));\n        vscode.commands.executeCommand('setContext', 'reference-list.source', model?.source);\n\n        revealView();\n        provider.update(newModel || history);\n\n        if (newModel) {\n            showResultsMessage();\n        } else {\n            showNoResultsMessage();\n        }\n    };\n\n    const showNoResultsMessage = () => {\n        let message: string;\n        if (history.isEmpty) {\n            message = 'No results.';\n        } else {\n            message = 'No results. Try running a previous search again:';\n        }\n        view.message = message;\n        view.title = 'Results';\n    };\n\n    const showResultsMessage = async () => {\n        if (model instanceof ReferencesModel) {\n\n            const total = await model.total();\n            const files = await (await model.items).length;\n\n            // update message\n            if (total === 1 && files === 1) {\n                view.message = `${total} result in ${files} file`;\n            } else if (total === 1) {\n                view.message = `${total} result in ${files} files`;\n            } else if (files === 1) {\n                view.message = `${total} results in ${files} file`;\n            } else {\n                view.message = `${total} results in ${files} files`;\n            }\n\n            // update title\n            if (model.source === ItemSource.References) {\n                view.title = `Results (${total})`;\n            } else if (model.source === ItemSource.Implementations) {\n                view.title = `Implementations (${total})`;\n            }\n\n        } else if (model instanceof CallsModel) {\n            // update title\n            if (model.direction === CallsDirection.Incoming) {\n                view.title = 'Callers Of';\n            } else {\n                view.title = 'Calls From';\n            }\n            view.message = '';\n\n        } else {\n            view.message = undefined;\n            view.title = 'Results';\n        }\n    };\n\n    const updateReferencesModel = async (model?: ReferencesModel) => {\n\n        // wait for model, update context and UI\n        updateModel(model);\n\n        if (model) {\n            // bail out when having no results...\n            if ((await model.items).length === 0) {\n                updateModel(undefined);\n                return;\n            }\n            // reveal\n            const selection = await model.first();\n            if (selection && view.visible) {\n                view.reveal(selection, { select: true, focus: true });\n            }\n            // add to history\n            history.add(await model.asHistoryItem([model.source, model.uri, model.position]));\n        }\n    };\n\n    const findReferencesCommand = async (source: ItemSource, uri?: vscode.Uri, position?: vscode.Position) => {\n        let model: ReferencesModel | undefined;\n        if (uri instanceof vscode.Uri && position instanceof vscode.Position) {\n            // trust args if correct'ish\n            model = ReferencesModel.create(uri, position, source);\n\n        } else if (vscode.window.activeTextEditor) {\n            // take args from active editor\n            let editor = vscode.window.activeTextEditor;\n            if (getRequestRange(editor.document, editor.selection.active)) {\n                model = ReferencesModel.create(editor.document.uri, editor.selection.active, source);\n            }\n        }\n        updateReferencesModel(model);\n    };\n\n    const refindCommand = (item: HistoryItem) => {\n        if (item instanceof HistoryItem) {\n            vscode.commands.executeCommand(item.command.command, ...item.command.arguments!);\n        }\n    };\n\n    const refreshCommand = async () => {\n        const [last] = history;\n        if (last) {\n            refindCommand(last);\n        }\n    };\n\n    const updateCallHierachyModel = async (uri?: vscode.Uri, position?: vscode.Position, direction = callsDirection.value) => {\n\n        let model: CallsModel | undefined;\n\n        if (uri instanceof vscode.Uri && position instanceof vscode.Position) {\n            // trust args if correct'ish\n            model = new CallsModel(uri, position, direction);\n\n        } else if (vscode.window.activeTextEditor) {\n            // take args from active editor\n            let editor = vscode.window.activeTextEditor;\n            if (getRequestRange(editor.document, editor.selection.active)) {\n                model = new CallsModel(editor.document.uri, editor.selection.active, direction);\n            }\n        }\n\n        updateModel(model);\n\n        if (model instanceof CallsModel) {\n            if (await model.isEmpty()) {\n                updateModel(undefined);\n                return;\n            }\n            // reveal\n            const selection = await model.first();\n            if (selection && view.visible) {\n                view.reveal(selection, { select: true, focus: true, expand: true });\n            }\n            // add to history\n            history.add(await model.asHistoryItem([model.uri, model.position, model.direction]));\n        }\n    };\n\n    const setCallHierarchyDirectionCommand = async (direction: CallsDirection, arg: any) => {\n        callsDirection.value = direction;\n        if (arg instanceof CallItem) {\n            return updateCallHierachyModel(arg.item.uri, arg.item.selectionRange.start, direction);\n\n        } else if (model instanceof CallsModel) {\n            return updateCallHierachyModel(model.uri, model.position, direction);\n        }\n    };\n\n    const clearCommand = async () => {\n        updateModel(undefined);\n    };\n\n    const clearHistoryCommand = async () => {\n        history.clear();\n        updateModel(undefined);\n    };\n\n    const showItemCommand = (arg?: ReferenceItem | HistoryItem | CallItem | any, focusEditor?: boolean) => {\n\n        let uri: vscode.Uri | undefined;\n        let pos: vscode.Position | undefined;\n        let preserveFocus = !focusEditor;\n\n        if (arg instanceof ReferenceItem) {\n            const { location } = arg;\n            uri = location.uri;\n            pos = location.range.start;\n\n        } else if (arg instanceof CallItem) {\n            uri = arg.item.uri;\n            pos = arg.item.selectionRange.start;\n\n        } else if (arg instanceof HistoryItem) {\n            uri = arg.uri;\n            pos = arg.position;\n            preserveFocus = false;\n        }\n\n        if (uri && pos) {\n            vscode.window.showTextDocument(uri, {\n                selection: new vscode.Range(pos, pos),\n                preserveFocus\n            });\n        }\n    };\n\n    const removeRefCommand = async (arg?: ReferenceItem | FileItem | any) => {\n        if (model instanceof ReferencesModel) {\n            let next: ReferenceItem | undefined;\n            if (arg instanceof ReferenceItem) {\n                next = await model.move(arg, true);\n                if (next?.parent !== arg.parent) {\n                    next = undefined;\n                }\n            }\n            await model.remove(arg);\n            editorHighlights.refresh();\n            showResultsMessage();\n            if (next) {\n                view.reveal(next, { select: true });\n            }\n        }\n    };\n\n    const focusRefCommand = async (fwd: boolean) => {\n        if (!(model instanceof ReferencesModel)) {\n            return;\n        }\n        const selection = view.selection[0] || model.first();\n        if (selection instanceof HistoryItem || selection instanceof CallItem) {\n            return;\n        }\n        const next = await model.move(selection, fwd);\n        if (next) {\n            view.reveal(next, { select: true });\n            showItemCommand(next, true);\n        }\n    };\n\n    const copyCommand = async (arg?: ReferenceItem | FileItem | ReferencesModel | any | undefined) => {\n        let val = '';\n        let stack = [arg];\n        while (stack.length > 0) {\n            let item = stack.pop();\n            if (item instanceof ReferencesModel) {\n                stack.push(...(await item.items).slice(0, 99));\n\n            } else if (item instanceof ReferenceItem) {\n                let doc = await item.parent.getDocument();\n                let chunks = getPreviewChunks(doc, item.location.range, 21, false);\n                val += `  ${item.location.range.start.line + 1}, ${item.location.range.start.character + 1}: ${chunks.before + chunks.inside + chunks.after} \\n`;\n\n            } else if (item instanceof FileItem) {\n                val += `${vscode.workspace.asRelativePath(item.uri)} \\n`;\n                stack.push(...item.results);\n            }\n        }\n        if (val) {\n            await vscode.env.clipboard.writeText(val);\n        }\n    };\n\n    const copyPathCommand = (arg?: FileItem) => {\n        if (arg instanceof FileItem) {\n            if (arg.uri.scheme === 'file') {\n                vscode.env.clipboard.writeText(arg.uri.fsPath);\n            } else {\n                vscode.env.clipboard.writeText(arg.uri.toString(true));\n            }\n        }\n    };\n\n    const showHistryPicks = async () => {\n        interface HistoryPick extends vscode.QuickPickItem {\n            item: HistoryItem;\n        }\n        const picks = [...history].map(item => <HistoryPick>{\n            label: item.label,\n            description: item.description,\n            item\n        });\n        const pick = await vscode.window.showQuickPick(picks, { placeHolder: 'Select previous reference search' });\n        if (pick) {\n            await refindCommand(pick.item);\n        }\n    };\n\n    const showReferences = async (uri: vscode.Uri, position: vscode.Position, locations: vscode.Location[]) => {\n        await updateReferencesModel(new ReferencesModel(ItemSource.References, uri, position, Promise.resolve(locations)));\n    };\n    let showReferencesDisposable: vscode.Disposable | undefined;\n    const config = 'references.preferredLocation';\n    function updateShowReferences(event?: vscode.ConfigurationChangeEvent) {\n        if (event && !event.affectsConfiguration(config)) {\n            return;\n        }\n        const value = vscode.workspace.getConfiguration().get<string>(config);\n        if (showReferencesDisposable) {\n            showReferencesDisposable.dispose();\n            showReferencesDisposable = undefined;\n        }\n        if (value === 'view') {\n            showReferencesDisposable = vscode.commands.registerCommand('editor.action.showReferences', showReferences);\n        }\n    };\n    updateShowReferences();\n\n    context.subscriptions.push(\n        view,\n        vscode.workspace.onDidChangeConfiguration(updateShowReferences),\n        vscode.commands.registerCommand('references-view.find', () => findReferencesCommand(ItemSource.References)),\n        vscode.commands.registerCommand('references-view.findImplementations', () => findReferencesCommand(ItemSource.Implementations)),\n        vscode.commands.registerCommand('references-view.refindReference', findReferencesCommand),\n        vscode.commands.registerCommand('references-view.showCallHierarchy', updateCallHierachyModel),\n        vscode.commands.registerCommand('references-view.showOutgoingCalls', (arg) => setCallHierarchyDirectionCommand(CallsDirection.Outgoing, arg)),\n        vscode.commands.registerCommand('references-view.showIncomingCalls', (arg) => setCallHierarchyDirectionCommand(CallsDirection.Incoming, arg)),\n        vscode.commands.registerCommand('references-view.refind', refindCommand),\n        vscode.commands.registerCommand('references-view.refresh', refreshCommand),\n        vscode.commands.registerCommand('references-view.clear', clearCommand),\n        vscode.commands.registerCommand('references-view.clearHistory', clearHistoryCommand),\n        vscode.commands.registerCommand('references-view.show', showItemCommand),\n        vscode.commands.registerCommand('references-view.remove', removeRefCommand),\n        vscode.commands.registerCommand('references-view.next', () => focusRefCommand(true)),\n        vscode.commands.registerCommand('references-view.prev', () => focusRefCommand(false)),\n        vscode.commands.registerCommand('references-view.copy', copyCommand),\n        vscode.commands.registerCommand('references-view.copyAll', () => copyCommand(model)),\n        vscode.commands.registerCommand('references-view.copyPath', copyPathCommand),\n        vscode.commands.registerCommand('references-view.pickFromHistory', showHistryPicks),\n    );\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { CallItem, CallsModel, FileItem, ReferencesModel } from './models';\nimport { TreeItem } from './provider';\n\nexport class EditorHighlights {\n\n    private readonly _decorationType = vscode.window.createTextEditorDecorationType({\n        backgroundColor: new vscode.ThemeColor('editor.findMatchHighlightBackground'),\n        rangeBehavior: vscode.DecorationRangeBehavior.ClosedClosed,\n        overviewRulerLane: vscode.OverviewRulerLane.Center,\n        overviewRulerColor: new vscode.ThemeColor('editor.findMatchHighlightBackground'),\n    });\n\n    private _model?: ReferencesModel | CallsModel;\n    private _listener?: vscode.Disposable;\n    private _ignore = new Set<FileItem | undefined>();\n\n    constructor(private readonly _view: vscode.TreeView<TreeItem>) { }\n\n    setModel(model?: ReferencesModel | CallsModel): void {\n        this._model = model;\n        this._ignore.clear();\n        if (this._listener) {\n            this._listener.dispose();\n        }\n\n        if (model instanceof ReferencesModel) {\n            this._listener = vscode.workspace.onDidChangeTextDocument(async e => {\n                // add those items that have been changed to a \n                // ignore list so that we won't update decorations\n                // for them again\n                this._ignore.add(await model.get(e.document.uri));\n            });\n\n        } else if (model instanceof CallsModel) {\n            this._listener = this._view.onDidChangeSelection(() => {\n                this.show();\n            });\n        }\n\n        this.show();\n    }\n\n    async show() {\n        const { activeTextEditor: editor } = vscode.window;\n        if (editor && editor.viewColumn) {\n            const ranges: vscode.Range[] = [];\n            if (this._model instanceof ReferencesModel) {\n                const item = await this._model.get(editor.document.uri);\n                if (item && !this._ignore.has(item)) {\n                    ranges.push(...item.results.map(ref => ref.location.range));\n                }\n            } else if (this._model instanceof CallsModel) {\n                const [sel] = this._view.selection;\n                if (sel instanceof CallItem) {\n                    let locations = sel.locations;\n                    if (!locations) {\n                        locations = [new vscode.Location(sel.item.uri, sel.item.selectionRange)];\n                    }\n                    for (const loc of locations) {\n                        if (loc.uri.toString() === editor.document.uri.toString()) {\n                            ranges.push(loc.range);\n                        }\n                    }\n                }\n            }\n            editor.setDecorations(this._decorationType, ranges);\n        }\n    }\n\n    hide() {\n        for (const editor of vscode.window.visibleTextEditors) {\n            editor.setDecorations(this._decorationType, []);\n        }\n    }\n\n    refresh() {\n        this.hide();\n        this.show();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { History, HistoryItem } from './history';\nimport { CallItem as CallHierarchyItem, CallsModel, FileItem, getPreviewChunks, ReferenceItem, ReferencesModel } from './models';\n\nexport class ReferencesProvider implements vscode.TreeDataProvider<FileItem | ReferenceItem> {\n\n    private readonly _onDidChangeTreeData = new vscode.EventEmitter<FileItem | ReferenceItem>();\n    readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n\n    private readonly _modelListener: vscode.Disposable;\n\n    constructor(\n        private _model: ReferencesModel\n    ) {\n        this._modelListener = _model.onDidChange(e => this._onDidChangeTreeData.fire(e instanceof FileItem ? e : undefined));\n    }\n\n    dispose(): void {\n        this._onDidChangeTreeData.dispose();\n        this._modelListener.dispose();\n    }\n\n    async getTreeItem(element: FileItem | ReferenceItem): Promise<vscode.TreeItem> {\n\n        if (element instanceof FileItem) {\n            // files\n            const result = new vscode.TreeItem(element.uri);\n            result.contextValue = 'file-item';\n            result.description = true;\n            result.iconPath = vscode.ThemeIcon.File;\n            result.collapsibleState = vscode.TreeItemCollapsibleState.Collapsed;\n            return result;\n\n        } else {\n            // references\n            const { range } = element.location;\n            const doc = await element.parent.getDocument(true);\n            const { before, inside, after } = getPreviewChunks(doc, range);\n\n            const label: vscode.TreeItemLabel = {\n                label: before + inside + after,\n                highlights: [[before.length, before.length + inside.length]]\n            };\n\n            const result = new vscode.TreeItem2(label);\n            result.collapsibleState = vscode.TreeItemCollapsibleState.None;\n            result.contextValue = 'reference-item';\n            result.command = { command: 'references-view.show', title: 'Open Reference', arguments: [element] };\n            return result;\n        }\n    }\n\n    async getChildren(element?: FileItem | ReferenceItem | undefined) {\n        if (!element) {\n            // group results by FileItem\n            return this._model.items;\n        } else if (element instanceof FileItem) {\n            // matches inside a file\n            return element.results;\n        }\n    }\n\n    getParent(element: FileItem | ReferenceItem) {\n        return element instanceof ReferenceItem ? element.parent : undefined;\n    }\n}\n\nexport class CallItemDataProvider implements vscode.TreeDataProvider<CallHierarchyItem> {\n\n    private readonly _emitter = new vscode.EventEmitter<CallHierarchyItem | undefined>();\n    readonly onDidChangeTreeData = this._emitter.event;\n\n    constructor(\n        private _model: CallsModel\n    ) { }\n\n    getTreeItem(element: CallHierarchyItem): vscode.TreeItem {\n\n        const item = new vscode.TreeItem(element.item.name);\n        item.description = element.item.detail;\n        item.contextValue = 'call-item';\n        item.iconPath = CallItemDataProvider._getThemeIcon(element.item.kind);\n        item.command = { command: 'references-view.show', title: 'Open Call', arguments: [element] };\n        item.collapsibleState = vscode.TreeItemCollapsibleState.Collapsed;\n        return item;\n    }\n\n    getChildren(element?: CallHierarchyItem | undefined) {\n        if (!element) {\n            return this._model.roots;\n        } else {\n            return this._model.resolveCalls(element);\n        }\n    }\n\n    getParent(element: CallHierarchyItem) {\n        return element.parent;\n    }\n\n    // vscode.SymbolKind.File === 0, Module === 1, etc...\n    private static _themeIconIds = [\n        'symbol-file', 'symbol-module', 'symbol-namespace', 'symbol-package', 'symbol-class', 'symbol-method',\n        'symbol-property', 'symbol-field', 'symbol-constructor', 'symbol-enum', 'symbol-interface',\n        'symbol-function', 'symbol-variable', 'symbol-constant', 'symbol-string', 'symbol-number', 'symbol-boolean',\n        'symbol-array', 'symbol-object', 'symbol-key', 'symbol-null', 'symbol-enum-member', 'symbol-struct',\n        'symbol-event', 'symbol-operator', 'symbol-type-parameter'\n    ];\n\n    private static _getThemeIcon(kind: vscode.SymbolKind): vscode.ThemeIcon | undefined {\n        let id = CallItemDataProvider._themeIconIds[kind];\n        return id && new vscode.ThemeIcon(id);\n    }\n}\n\nexport class HistoryDataProvider implements vscode.TreeDataProvider<HistoryItem> {\n\n    private readonly _emitter = new vscode.EventEmitter<HistoryItem | undefined>();\n    readonly onDidChangeTreeData = this._emitter.event;\n\n    constructor(private readonly _history: History) { }\n\n    getTreeItem(element: HistoryItem): vscode.TreeItem {\n        // history items\n        // let source: string | undefined;\n        // if (element.source === ItemSource.References) {\n        //     source = 'references';\n        // } else if (element.source === ItemSource.Implementations) {\n        //     source = 'implementations';\n        // } else if (element.source === ItemSource.CallHierarchy) {\n        //     source = 'call hierarchy';\n        // }\n        const result = new vscode.TreeItem(element.label);\n        // result.description = `${vscode.workspace.asRelativePath(element.uri)} • ${element.line} ${source && ` • ${source}`}`;\n        result.description = element.description;\n        result.command = { command: 'references-view.show', arguments: [element], title: 'Show' };\n        result.collapsibleState = vscode.TreeItemCollapsibleState.None;\n        result.contextValue = 'history-item';\n        return result;\n    }\n\n    getChildren() {\n        return [...this._history];\n    }\n\n    getParent() {\n        return undefined;\n    }\n}\n\n\nexport type TreeItem = FileItem | ReferenceItem | HistoryItem | CallHierarchyItem;\n\nexport class TreeDataProviderWrapper<T> implements vscode.TreeDataProvider<T> {\n\n    private _provider?: Required<vscode.TreeDataProvider<any>>;\n    private _providerListener?: vscode.Disposable;\n    private _onDidChange = new vscode.EventEmitter<any>();\n\n    readonly onDidChangeTreeData = this._onDidChange.event;\n\n    update(model: ReferencesModel | CallsModel | History) {\n        if (this._providerListener) {\n            this._providerListener.dispose();\n            this._providerListener = undefined;\n        }\n\n        if (this._provider && typeof (<vscode.Disposable><any>this._provider).dispose === 'function') {\n            (<vscode.Disposable><any>this._provider).dispose();\n            this._provider = undefined;\n        }\n\n        if (model instanceof ReferencesModel) {\n            this._provider = new ReferencesProvider(model);\n        } else if (model instanceof CallsModel) {\n            this._provider = new CallItemDataProvider(model);\n        } else {\n            this._provider = new HistoryDataProvider(model);\n        }\n\n        this._onDidChange.fire();\n        this._providerListener = this._provider.onDidChangeTreeData(e => this._onDidChange.fire(e));\n    }\n\n    getTreeItem(element: T): vscode.TreeItem | Thenable<vscode.TreeItem> {\n        return this._provider!.getTreeItem(element);\n    }\n\n    getChildren(element?: T | undefined) {\n        return this._provider?.getChildren(element);\n    }\n\n    getParent(element: T) {\n        return this._provider?.getParent(element);\n    }\n}\n"],"sourceRoot":""}