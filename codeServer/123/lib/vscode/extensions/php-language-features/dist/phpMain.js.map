{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"vscode\"","webpack:///./src/features/phpGlobals.ts","webpack:///./src/features/phpGlobalFunctions.ts","webpack:///external \"path\"","webpack:///./src/phpMain.ts","webpack:///./src/features/completionItemProvider.ts","webpack:///./src/features/hoverProvider.ts","webpack:///./src/features/utils/markedTextUtil.ts","webpack:///./src/features/signatureHelpProvider.ts","webpack:///./src/features/validationProvider.ts","webpack:///external \"child_process\"","webpack:///external \"string_decoder\"","webpack:///./src/features/utils/async.ts","webpack:///./node_modules/vscode-nls/lib/main.js","webpack:///external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","globalvariables","$GLOBALS","description","$_SERVER","$_GET","$_POST","$_FILES","$_REQUEST","$_SESSION","$_ENV","$_COOKIE","$php_errormsg","$HTTP_RAW_POST_DATA","$http_response_header","$argc","$argv","$this","compiletimeconstants","__CLASS__","__DIR__","__FILE__","__FUNCTION__","__LINE__","__METHOD__","__NAMESPACE__","TRUE","FALSE","NULL","M_PI","M_E","M_LOG2E","M_LOG10E","M_LN2","M_LN10","M_PI_2","M_PI_4","M_1_PI","M_2_PI","M_SQRTPI","M_2_SQRTPI","M_SQRT2","M_SQRT3","M_SQRT1_2","M_LNPI","M_EULER","PHP_ROUND_HALF_UP","PHP_ROUND_HALF_DOWN","PHP_ROUND_HALF_EVEN","PHP_ROUND_HALF_ODD","NAN","INF","PASSWORD_BCRYPT","PASSWORD_DEFAULT","keywords","define","signature","die","echo","empty","exit","eval","include","include_once","isset","list","require_once","return","print","unset","yield","abstract","and","array","as","break","case","catch","class","clone","const","continue","declare","default","do","else","elseif","enddeclare","endfor","endforeach","endif","endswitch","endwhile","extends","final","finally","for","foreach","function","global","goto","if","implements","interface","instanceof","insteadOf","namespace","new","or","parent","private","protected","public","self","static","switch","throw","trait","try","use","var","while","xor","globalfunctions","debug_backtrace","debug_print_backtrace","error_clear_last","error_get_last","error_log","error_reporting","restore_error_handler","restore_exception_handler","set_error_handler","set_exception_handler","trigger_error","user_error","opcache_compile_file","opcache_get_configuration","opcache_get_status","opcache_invalidate","opcache_is_script_cached","opcache_reset","flush","ob_clean","ob_end_clean","ob_end_flush","ob_flush","ob_get_clean","ob_get_contents","ob_get_flush","ob_get_length","ob_get_level","ob_get_status","ob_gzhandler","ob_implicit_flush","ob_list_handlers","ob_start","output_add_rewrite_var","output_reset_rewrite_vars","assert_options","assert","cli_get_process_title","cli_set_process_title","dl","extension_loaded","gc_collect_cycles","gc_disable","gc_enable","gc_enabled","gc_mem_caches","gc_status","get_cfg_var","get_current_user","get_defined_constants","get_extension_funcs","get_include_path","get_included_files","get_loaded_extensions","get_magic_quotes_gpc","get_magic_quotes_runtime","get_required_files","get_resources","getenv","getlastmod","getmygid","getmyinode","getmypid","getmyuid","getopt","getrusage","ini_alter","ini_get_all","ini_get","ini_restore","ini_set","magic_quotes_runtime","main","memory_get_peak_usage","memory_get_usage","php_ini_loaded_file","php_ini_scanned_files","php_logo_guid","php_sapi_name","php_uname","phpcredits","phpinfo","phpversion","putenv","restore_include_path","set_include_path","set_magic_quotes_runtime","set_time_limit","sys_get_temp_dir","version_compare","zend_logo_guid","zend_thread_id","zend_version","bzclose","bzcompress","bzdecompress","bzerrno","bzerror","bzerrstr","bzflush","bzopen","bzread","bzwrite","PharException","zip_close","zip_entry_close","zip_entry_compressedsize","zip_entry_compressionmethod","zip_entry_filesize","zip_entry_name","zip_entry_open","zip_entry_read","zip_open","zip_read","deflate_add","deflate_init","gzclose","gzcompress","gzdecode","gzdeflate","gzencode","gzeof","gzfile","gzgetc","gzgets","gzgetss","gzinflate","gzopen","gzpassthru","gzputs","gzread","gzrewind","gzseek","gztell","gzuncompress","gzwrite","inflate_add","inflate_get_read_len","inflate_get_status","inflate_init","readgzfile","zlib_decode","zlib_encode","zlib_get_coding_type","random_bytes","random_int","hash_algos","hash_copy","hash_equals","hash_file","hash_final","hash_hkdf","hash_hmac_algos","hash_hmac_file","hash_hmac","hash_init","hash_pbkdf2","hash_update_file","hash_update_stream","hash_update","hash","openssl_cipher_iv_length","openssl_csr_export_to_file","openssl_csr_export","openssl_csr_get_public_key","openssl_csr_get_subject","openssl_csr_new","openssl_csr_sign","openssl_decrypt","openssl_dh_compute_key","openssl_digest","openssl_encrypt","openssl_error_string","openssl_free_key","openssl_get_cert_locations","openssl_get_cipher_methods","openssl_get_curve_names","openssl_get_md_methods","openssl_get_privatekey","openssl_get_publickey","openssl_open","openssl_pbkdf2","openssl_pkcs12_export_to_file","openssl_pkcs12_export","openssl_pkcs12_read","openssl_pkcs7_decrypt","openssl_pkcs7_encrypt","openssl_pkcs7_read","openssl_pkcs7_sign","openssl_pkcs7_verify","openssl_pkey_export_to_file","openssl_pkey_export","openssl_pkey_free","openssl_pkey_get_details","openssl_pkey_get_private","openssl_pkey_get_public","openssl_pkey_new","openssl_private_decrypt","openssl_private_encrypt","openssl_public_decrypt","openssl_public_encrypt","openssl_random_pseudo_bytes","openssl_seal","openssl_sign","openssl_spki_export_challenge","openssl_spki_export","openssl_spki_new","openssl_spki_verify","openssl_verify","openssl_x509_check_private_key","openssl_x509_checkpurpose","openssl_x509_export_to_file","openssl_x509_export","openssl_x509_fingerprint","openssl_x509_free","openssl_x509_parse","openssl_x509_read","password_get_info","password_hash","password_needs_rehash","password_verify","sodium_add","sodium_base642bin","sodium_bin2base64","sodium_bin2hex","sodium_compare","sodium_crypto_aead_aes256gcm_decrypt","sodium_crypto_aead_aes256gcm_encrypt","sodium_crypto_aead_aes256gcm_is_available","sodium_crypto_aead_aes256gcm_keygen","sodium_crypto_aead_chacha20poly1305_decrypt","sodium_crypto_aead_chacha20poly1305_encrypt","sodium_crypto_aead_chacha20poly1305_ietf_decrypt","sodium_crypto_aead_chacha20poly1305_ietf_encrypt","sodium_crypto_aead_chacha20poly1305_ietf_keygen","sodium_crypto_aead_chacha20poly1305_keygen","sodium_crypto_aead_xchacha20poly1305_ietf_decrypt","sodium_crypto_aead_xchacha20poly1305_ietf_encrypt","sodium_crypto_aead_xchacha20poly1305_ietf_keygen","sodium_crypto_auth_keygen","sodium_crypto_auth_verify","sodium_crypto_auth","sodium_crypto_box_keypair_from_secretkey_and_publickey","sodium_crypto_box_keypair","sodium_crypto_box_open","sodium_crypto_box_publickey_from_secretkey","sodium_crypto_box_publickey","sodium_crypto_box_seal_open","sodium_crypto_box_seal","sodium_crypto_box_secretkey","sodium_crypto_box_seed_keypair","sodium_crypto_box","sodium_crypto_generichash_final","sodium_crypto_generichash_init","sodium_crypto_generichash_keygen","sodium_crypto_generichash_update","sodium_crypto_generichash","sodium_crypto_kdf_derive_from_key","sodium_crypto_kdf_keygen","sodium_crypto_kx_client_session_keys","sodium_crypto_kx_keypair","sodium_crypto_kx_publickey","sodium_crypto_kx_secretkey","sodium_crypto_kx_seed_keypair","sodium_crypto_kx_server_session_keys","sodium_crypto_pwhash_scryptsalsa208sha256_str_verify","sodium_crypto_pwhash_scryptsalsa208sha256_str","sodium_crypto_pwhash_scryptsalsa208sha256","sodium_crypto_pwhash_str_needs_rehash","sodium_crypto_pwhash_str_verify","sodium_crypto_pwhash_str","sodium_crypto_pwhash","sodium_crypto_scalarmult_base","sodium_crypto_scalarmult","sodium_crypto_secretbox_keygen","sodium_crypto_secretbox_open","sodium_crypto_secretbox","sodium_crypto_secretstream_xchacha20poly1305_init_pull","sodium_crypto_secretstream_xchacha20poly1305_init_push","sodium_crypto_secretstream_xchacha20poly1305_keygen","sodium_crypto_secretstream_xchacha20poly1305_pull","sodium_crypto_secretstream_xchacha20poly1305_push","sodium_crypto_secretstream_xchacha20poly1305_rekey","sodium_crypto_shorthash_keygen","sodium_crypto_shorthash","sodium_crypto_sign_detached","sodium_crypto_sign_ed25519_pk_to_curve25519","sodium_crypto_sign_ed25519_sk_to_curve25519","sodium_crypto_sign_keypair_from_secretkey_and_publickey","sodium_crypto_sign_keypair","sodium_crypto_sign_open","sodium_crypto_sign_publickey_from_secretkey","sodium_crypto_sign_publickey","sodium_crypto_sign_secretkey","sodium_crypto_sign_seed_keypair","sodium_crypto_sign_verify_detached","sodium_crypto_sign","sodium_crypto_stream_keygen","sodium_crypto_stream_xor","sodium_crypto_stream","sodium_hex2bin","sodium_increment","sodium_memcmp","sodium_memzero","sodium_pad","sodium_unpad","dba_close","dba_delete","dba_exists","dba_fetch","dba_firstkey","dba_handlers","dba_insert","dba_key_split","dba_list","dba_nextkey","dba_open","dba_optimize","dba_popen","dba_replace","dba_sync","pdo_drivers","cal_days_in_month","cal_from_jd","cal_info","cal_to_jd","easter_date","easter_days","frenchtojd","gregoriantojd","jddayofweek","jdmonthname","jdtofrench","jdtogregorian","jdtojewish","jdtojulian","jdtounix","jewishtojd","juliantojd","unixtojd","date_add","date_create","date_create_from_format","date_get_last_errors","date_modify","date_date_set","date_isodate_set","date_time_set","date_timestamp_set","date_timezone_set","date_sub","date_create_immutable","date_create_immutable_from_format","date_diff","date_format","date_offset_get","date_timestamp_get","date_timezone_get","timezone_open","timezone_location_get","timezone_name_get","timezone_offset_get","timezone_transitions_get","timezone_abbreviations_list","timezone_identifiers_list","checkdate","date_default_timezone_get","date_default_timezone_set","date_interval_create_from_date_string","date_interval_format","date_parse_from_format","date_parse","date_sun_info","date_sunrise","date_sunset","date","getdate","gettimeofday","gmdate","gmmktime","gmstrftime","idate","localtime","microtime","mktime","strftime","strptime","strtotime","time","timezone_name_from_abbr","timezone_version_get","chdir","chroot","closedir","dir","getcwd","opendir","readdir","rewinddir","scandir","finfo_buffer","finfo_close","finfo_file","finfo_open","finfo_set_flags","mime_content_type","basename","chgrp","chmod","chown","clearstatcache","copy","delete","dirname","disk_free_space","disk_total_space","diskfreespace","fclose","feof","fflush","fgetc","fgetcsv","fgets","fgetss","file_exists","file_get_contents","file_put_contents","file","fileatime","filectime","filegroup","fileinode","filemtime","fileowner","fileperms","filesize","filetype","flock","fnmatch","fopen","fpassthru","fputcsv","fputs","fread","fscanf","fseek","fstat","ftell","ftruncate","fwrite","glob","is_dir","is_executable","is_file","is_link","is_readable","is_uploaded_file","is_writable","is_writeable","lchgrp","lchown","link","linkinfo","lstat","mkdir","move_uploaded_file","parse_ini_file","parse_ini_string","pathinfo","pclose","popen","readfile","readlink","realpath_cache_get","realpath_cache_size","realpath","rename","rewind","rmdir","set_file_buffer","stat","symlink","tempnam","tmpfile","touch","umask","unlink","iconv_get_encoding","iconv_mime_decode_headers","iconv_mime_decode","iconv_mime_encode","iconv_set_encoding","iconv_strlen","iconv_strpos","iconv_strrpos","iconv_substr","iconv","ob_iconv_handler","collator_asort","collator_compare","collator_create","collator_get_attribute","collator_get_error_code","collator_get_error_message","collator_get_locale","collator_get_sort_key","collator_get_strength","collator_set_attribute","collator_set_strength","collator_sort_with_sort_keys","collator_sort","numfmt_create","numfmt_format_currency","numfmt_format","numfmt_get_attribute","numfmt_get_error_code","numfmt_get_error_message","numfmt_get_locale","numfmt_get_pattern","numfmt_get_symbol","numfmt_get_text_attribute","numfmt_parse_currency","numfmt_parse","numfmt_set_attribute","numfmt_set_pattern","numfmt_set_symbol","numfmt_set_text_attribute","locale_accept_from_http","locale_canonicalize","locale_compose","locale_filter_matches","locale_get_all_variants","locale_get_default","locale_get_display_language","locale_get_display_name","locale_get_display_region","locale_get_display_script","locale_get_display_variant","locale_get_keywords","locale_get_primary_language","locale_get_region","locale_get_script","locale_lookup","locale_parse","locale_set_default","normalizer_get_raw_decomposition","normalizer_is_normalized","normalizer_normalize","msgfmt_create","msgfmt_format_message","msgfmt_format","msgfmt_get_error_code","msgfmt_get_error_message","msgfmt_get_locale","msgfmt_get_pattern","msgfmt_parse_message","msgfmt_parse","msgfmt_set_pattern","intlcal_get_error_code","intlcal_get_error_message","intltz_get_error_code","intltz_get_error_message","datefmt_create","datefmt_format","datefmt_format_object","datefmt_get_calendar","datefmt_get_datetype","datefmt_get_error_code","datefmt_get_error_message","datefmt_get_locale","datefmt_get_pattern","datefmt_get_timetype","datefmt_get_timezone_id","datefmt_get_calendar_object","datefmt_get_timezone","datefmt_is_lenient","datefmt_localtime","datefmt_parse","datefmt_set_calendar","datefmt_set_lenient","datefmt_set_pattern","datefmt_set_timezone_id","datefmt_set_timezone","resourcebundle_count","resourcebundle_create","resourcebundle_get_error_code","resourcebundle_get_error_message","resourcebundle_get","resourcebundle_locales","transliterator_create","transliterator_create_from_rules","transliterator_create_inverse","transliterator_get_error_code","transliterator_get_error_message","transliterator_list_ids","transliterator_transliterate","intl_get_error_code","intl_get_error_message","grapheme_extract","grapheme_stripos","grapheme_stristr","grapheme_strlen","grapheme_strpos","grapheme_strripos","grapheme_strrpos","grapheme_strstr","grapheme_substr","idn_to_ascii","idn_to_utf8","intl_error_name","intl_is_failure","mb_check_encoding","mb_chr","mb_convert_case","mb_convert_encoding","mb_convert_kana","mb_convert_variables","mb_decode_mimeheader","mb_decode_numericentity","mb_detect_encoding","mb_detect_order","mb_encode_mimeheader","mb_encode_numericentity","mb_encoding_aliases","mb_ereg_match","mb_ereg_replace_callback","mb_ereg_replace","mb_ereg_search_getpos","mb_ereg_search_getregs","mb_ereg_search_init","mb_ereg_search_pos","mb_ereg_search_regs","mb_ereg_search_setpos","mb_ereg_search","mb_ereg","mb_eregi_replace","mb_eregi","mb_get_info","mb_http_input","mb_http_output","mb_internal_encoding","mb_language","mb_list_encodings","mb_ord","mb_output_handler","mb_parse_str","mb_preferred_mime_name","mb_regex_encoding","mb_regex_set_options","mb_scrub","mb_send_mail","mb_split","mb_strcut","mb_strimwidth","mb_stripos","mb_stristr","mb_strlen","mb_strpos","mb_strrchr","mb_strrichr","mb_strripos","mb_strrpos","mb_strstr","mb_strtolower","mb_strtoupper","mb_strwidth","mb_substitute_character","mb_substr_count","mb_substr","exif_imagetype","exif_read_data","exif_tagname","exif_thumbnail","read_exif_data","ezmlm_hash","mail","bcadd","bccomp","bcdiv","bcmod","bcmul","bcpow","bcpowmod","bcscale","bcsqrt","bcsub","abs","acos","acosh","asin","asinh","atan2","atan","atanh","base_convert","bindec","ceil","cos","cosh","decbin","dechex","decoct","deg2rad","exp","expm1","floor","fmod","getrandmax","hexdec","hypot","intdiv","is_finite","is_infinite","is_nan","lcg_value","log10","log1p","log","max","min","mt_getrandmax","mt_rand","mt_srand","octdec","pi","pow","rad2deg","rand","round","sin","sinh","sqrt","srand","tan","tanh","pcntl_alarm","pcntl_async_signals","pcntl_errno","pcntl_exec","pcntl_fork","pcntl_get_last_error","pcntl_getpriority","pcntl_setpriority","pcntl_signal_dispatch","pcntl_signal_get_handler","pcntl_signal","pcntl_sigprocmask","pcntl_sigtimedwait","pcntl_sigwaitinfo","pcntl_strerror","pcntl_wait","pcntl_waitpid","pcntl_wexitstatus","pcntl_wifexited","pcntl_wifsignaled","pcntl_wifstopped","pcntl_wstopsig","pcntl_wtermsig","posix_access","posix_ctermid","posix_errno","posix_get_last_error","posix_getcwd","posix_getegid","posix_geteuid","posix_getgid","posix_getgrgid","posix_getgrnam","posix_getgroups","posix_getlogin","posix_getpgid","posix_getpgrp","posix_getpid","posix_getppid","posix_getpwnam","posix_getpwuid","posix_getrlimit","posix_getsid","posix_getuid","posix_initgroups","posix_isatty","posix_kill","posix_mkfifo","posix_mknod","posix_setegid","posix_seteuid","posix_setgid","posix_setpgid","posix_setrlimit","posix_setsid","posix_setuid","posix_strerror","posix_times","posix_ttyname","posix_uname","escapeshellarg","escapeshellcmd","exec","passthru","proc_close","proc_get_status","proc_nice","proc_open","proc_terminate","shell_exec","system","ftok","msg_get_queue","msg_queue_exists","msg_receive","msg_remove_queue","msg_send","msg_set_queue","msg_stat_queue","sem_acquire","sem_get","sem_release","sem_remove","shm_attach","shm_detach","shm_get_var","shm_has_var","shm_put_var","shm_remove_var","shm_remove","shmop_close","shmop_delete","shmop_open","shmop_read","shmop_size","shmop_write","json_decode","json_encode","json_last_error_msg","json_last_error","connection_aborted","connection_status","constant","defined","get_browser","__halt_compiler","highlight_file","highlight_string","hrtime","ignore_user_abort","pack","php_check_syntax","php_strip_whitespace","sapi_windows_cp_conv","sapi_windows_cp_get","sapi_windows_cp_is_utf8","sapi_windows_cp_set","sapi_windows_vt100_support","show_source","sleep","sys_getloadavg","time_nanosleep","time_sleep_until","uniqid","unpack","usleep","class_implements","class_parents","class_uses","iterator_apply","iterator_count","iterator_to_array","spl_autoload_call","spl_autoload_extensions","spl_autoload_functions","spl_autoload_register","spl_autoload_unregister","spl_autoload","spl_classes","spl_object_hash","spl_object_id","set_socket_blocking","stream_bucket_append","stream_bucket_make_writeable","stream_bucket_new","stream_bucket_prepend","stream_context_create","stream_context_get_default","stream_context_get_options","stream_context_get_params","stream_context_set_default","stream_context_set_option","stream_context_set_params","stream_copy_to_stream","stream_filter_append","stream_filter_prepend","stream_filter_register","stream_filter_remove","stream_get_contents","stream_get_filters","stream_get_line","stream_get_meta_data","stream_get_transports","stream_get_wrappers","stream_is_local","stream_isatty","stream_notification_callback","stream_register_wrapper","stream_resolve_include_path","stream_select","stream_set_blocking","stream_set_chunk_size","stream_set_read_buffer","stream_set_timeout","stream_set_write_buffer","stream_socket_accept","stream_socket_client","stream_socket_enable_crypto","stream_socket_get_name","stream_socket_pair","stream_socket_recvfrom","stream_socket_sendto","stream_socket_server","stream_socket_shutdown","stream_supports_lock","stream_wrapper_register","stream_wrapper_restore","stream_wrapper_unregister","token_get_all","token_name","base64_decode","base64_encode","get_headers","get_meta_tags","http_build_query","parse_url","rawurldecode","rawurlencode","urldecode","urlencode","curl_close","curl_copy_handle","curl_errno","curl_error","curl_escape","curl_exec","curl_file_create","curl_getinfo","curl_init","curl_multi_add_handle","curl_multi_close","curl_multi_errno","curl_multi_exec","curl_multi_getcontent","curl_multi_info_read","curl_multi_init","curl_multi_remove_handle","curl_multi_select","curl_multi_setopt","curl_multi_strerror","curl_pause","curl_reset","curl_setopt_array","curl_setopt","curl_share_close","curl_share_errno","curl_share_init","curl_share_setopt","curl_share_strerror","curl_strerror","curl_unescape","curl_version","ftp_alloc","ftp_append","ftp_cdup","ftp_chdir","ftp_chmod","ftp_close","ftp_connect","ftp_delete","ftp_exec","ftp_fget","ftp_fput","ftp_get_option","ftp_get","ftp_login","ftp_mdtm","ftp_mkdir","ftp_mlsd","ftp_nb_continue","ftp_nb_fget","ftp_nb_fput","ftp_nb_get","ftp_nb_put","ftp_nlist","ftp_pasv","ftp_put","ftp_pwd","ftp_quit","ftp_raw","ftp_rawlist","ftp_rename","ftp_rmdir","ftp_set_option","ftp_site","ftp_size","ftp_ssl_connect","ftp_systype","checkdnsrr","closelog","define_syslog_variables","dns_check_record","dns_get_mx","dns_get_record","fsockopen","gethostbyaddr","gethostbyname","gethostbynamel","gethostname","getmxrr","getprotobyname","getprotobynumber","getservbyname","getservbyport","header_register_callback","header_remove","header","headers_list","headers_sent","http_response_code","inet_ntop","inet_pton","ip2long","long2ip","openlog","pfsockopen","setcookie","setrawcookie","socket_get_status","socket_set_blocking","socket_set_timeout","syslog","socket_accept","socket_addrinfo_bind","socket_addrinfo_connect","socket_addrinfo_explain","socket_addrinfo_lookup","socket_bind","socket_clear_error","socket_close","socket_cmsg_space","socket_connect","socket_create_listen","socket_create_pair","socket_create","socket_export_stream","socket_get_option","socket_getopt","socket_getpeername","socket_getsockname","socket_import_stream","socket_last_error","socket_listen","socket_read","socket_recv","socket_recvfrom","socket_recvmsg","socket_select","socket_send","socket_sendmsg","socket_sendto","socket_set_block","socket_set_nonblock","socket_set_option","socket_setopt","socket_shutdown","socket_strerror","socket_write","apache_child_terminate","apache_get_modules","apache_get_version","apache_getenv","apache_lookup_uri","apache_note","apache_request_headers","apache_reset_timeout","apache_response_headers","apache_setenv","getallheaders","virtual","nsapi_request_headers","nsapi_response_headers","nsapi_virtual","session_abort","session_cache_expire","session_cache_limiter","session_commit","session_create_id","session_decode","session_destroy","session_encode","session_gc","session_get_cookie_params","session_id","session_is_registered","session_module_name","session_name","session_regenerate_id","session_register_shutdown","session_register","session_reset","session_save_path","session_set_cookie_params","session_set_save_handler","session_start","session_status","session_unregister","session_unset","session_write_close","preg_filter","preg_grep","preg_last_error","preg_match_all","preg_match","preg_quote","preg_replace_callback_array","preg_replace_callback","preg_replace","preg_split","addcslashes","addslashes","bin2hex","chop","chr","chunk_split","convert_cyr_string","convert_uudecode","convert_uuencode","count_chars","crc32","crypt","explode","fprintf","get_html_translation_table","hebrev","hebrevc","hex2bin","html_entity_decode","htmlentities","htmlspecialchars_decode","htmlspecialchars","implode","join","lcfirst","levenshtein","localeconv","ltrim","md5_file","md5","metaphone","money_format","nl_langinfo","nl2br","number_format","ord","parse_str","printf","quoted_printable_decode","quoted_printable_encode","quotemeta","rtrim","setlocale","sha1_file","sha1","similar_text","soundex","sprintf","sscanf","str_getcsv","str_ireplace","str_pad","str_repeat","str_replace","str_rot13","str_shuffle","str_split","str_word_count","strcasecmp","strchr","strcmp","strcoll","strcspn","strip_tags","stripcslashes","stripos","stripslashes","stristr","strlen","strnatcasecmp","strnatcmp","strncasecmp","strncmp","strpbrk","strpos","strrchr","strrev","strripos","strrpos","strspn","strstr","strtok","strtolower","strtoupper","strtr","substr_compare","substr_count","substr_replace","substr","trim","ucfirst","ucwords","vfprintf","vprintf","vsprintf","wordwrap","array_change_key_case","array_chunk","array_column","array_combine","array_count_values","array_diff_assoc","array_diff_key","array_diff_uassoc","array_diff_ukey","array_diff","array_fill_keys","array_fill","array_filter","array_flip","array_intersect_assoc","array_intersect_key","array_intersect_uassoc","array_intersect_ukey","array_intersect","array_key_exists","array_key_first","array_key_last","array_keys","array_map","array_merge_recursive","array_merge","array_multisort","array_pad","array_pop","array_product","array_push","array_rand","array_reduce","array_replace_recursive","array_replace","array_reverse","array_search","array_shift","array_slice","array_splice","array_sum","array_udiff_assoc","array_udiff_uassoc","array_udiff","array_uintersect_assoc","array_uintersect_uassoc","array_uintersect","array_unique","array_unshift","array_values","array_walk_recursive","array_walk","arsort","asort","compact","count","current","each","end","extract","in_array","key_exists","krsort","ksort","natcasesort","natsort","next","pos","prev","range","reset","rsort","shuffle","sizeof","sort","uasort","uksort","usort","__autoload","call_user_method_array","call_user_method","class_alias","class_exists","get_called_class","get_class_methods","get_class_vars","get_class","get_declared_classes","get_declared_interfaces","get_declared_traits","get_object_vars","get_parent_class","interface_exists","is_a","is_subclass_of","method_exists","property_exists","trait_exists","ctype_alnum","ctype_alpha","ctype_cntrl","ctype_digit","ctype_graph","ctype_lower","ctype_print","ctype_punct","ctype_space","ctype_upper","ctype_xdigit","filter_has_var","filter_id","filter_input_array","filter_input","filter_list","filter_var_array","filter_var","call_user_func_array","call_user_func","create_function","forward_static_call_array","forward_static_call","func_get_arg","func_get_args","func_num_args","function_exists","get_defined_functions","register_shutdown_function","register_tick_function","unregister_tick_function","boolval","debug_zval_dump","doubleval","floatval","get_defined_vars","get_resource_type","gettype","import_request_variables","intval","is_array","is_bool","is_callable","is_countable","is_double","is_float","is_int","is_integer","is_iterable","is_long","is_null","is_numeric","is_object","is_real","is_resource","is_scalar","is_string","print_r","serialize","settype","strval","unserialize","var_dump","var_export","xmlrpc_decode_request","xmlrpc_decode","xmlrpc_encode_request","xmlrpc_encode","xmlrpc_get_type","xmlrpc_is_fault","xmlrpc_parse_method_descriptions","xmlrpc_server_add_introspection_data","xmlrpc_server_call_method","xmlrpc_server_create","xmlrpc_server_destroy","xmlrpc_server_register_introspection_callback","xmlrpc_server_register_method","xmlrpc_set_type","com_create_guid","com_event_sink","com_get_active_object","com_load_typelib","com_message_pump","com_print_typeinfo","variant_abs","variant_add","variant_and","variant_cast","variant_cat","variant_cmp","variant_date_from_timestamp","variant_date_to_timestamp","variant_div","variant_eqv","variant_fix","variant_get_type","variant_idiv","variant_imp","variant_int","variant_mod","variant_mul","variant_neg","variant_not","variant_or","variant_pow","variant_round","variant_set_type","variant_set","variant_sub","variant_xor","libxml_clear_errors","libxml_disable_entity_loader","libxml_get_errors","libxml_get_last_error","libxml_set_external_entity_loader","libxml_set_streams_context","libxml_use_internal_errors","simplexml_import_dom","simplexml_load_file","simplexml_load_string","utf8_decode","utf8_encode","xml_error_string","xml_get_current_byte_index","xml_get_current_column_number","xml_get_current_line_number","xml_get_error_code","xml_parse_into_struct","xml_parse","xml_parser_create_ns","xml_parser_create","xml_parser_free","xml_parser_get_option","xml_parser_set_option","xml_set_character_data_handler","xml_set_default_handler","xml_set_element_handler","xml_set_end_namespace_decl_handler","xml_set_external_entity_ref_handler","xml_set_notation_decl_handler","xml_set_object","xml_set_processing_instruction_handler","xml_set_start_namespace_decl_handler","xml_set_unparsed_entity_decl_handler","xmlwriter_end_attribute","xmlwriter_end_cdata","xmlwriter_end_comment","xmlwriter_end_document","xmlwriter_end_dtd_attlist","xmlwriter_end_dtd_element","xmlwriter_end_dtd_entity","xmlwriter_end_dtd","xmlwriter_end_element","xmlwriter_end_pi","xmlwriter_flush","xmlwriter_full_end_element","xmlwriter_open_memory","xmlwriter_open_uri","xmlwriter_output_memory","xmlwriter_set_indent_string","xmlwriter_set_indent","xmlwriter_start_attribute_ns","xmlwriter_start_attribute","xmlwriter_start_cdata","xmlwriter_start_comment","xmlwriter_start_document","xmlwriter_start_dtd_attlist","xmlwriter_start_dtd_element","xmlwriter_start_dtd_entity","xmlwriter_start_dtd","xmlwriter_start_element_ns","xmlwriter_start_element","xmlwriter_start_pi","xmlwriter_text","xmlwriter_write_attribute_ns","xmlwriter_write_attribute","xmlwriter_write_cdata","xmlwriter_write_comment","xmlwriter_write_dtd_attlist","xmlwriter_write_dtd_element","xmlwriter_write_dtd_entity","xmlwriter_write_dtd","xmlwriter_write_element_ns","xmlwriter_write_element","xmlwriter_write_pi","xmlwriter_write_raw","vscode","completionItemProvider_1","hoverProvider_1","signatureHelpProvider_1","validationProvider_1","activate","context","workspaceState","subscriptions","push","languages","registerCompletionItemProvider","registerHoverProvider","registerSignatureHelpProvider","setLanguageConfiguration","wordPattern","onEnterRules","beforeText","afterText","action","indentAction","IndentAction","IndentOutdent","appendText","None","removeText","vscode_1","phpGlobals","phpGlobalFunctions","[object Object]","document","position","_token","result","workspace","getConfiguration","Promise","resolve","getWordRangeAtPosition","prefix","getText","Range","triggerCharacter","twoBeforeCursor","Position","line","Math","character","added","createNewProposal","kind","entry","proposal","CompletionItem","documentation","detail","matches","length","start","twoBeforePosition","CompletionItemKind","Class","textEdit","TextEdit","Variable","Function","Field","Keyword","text","variableMatch","match","word","functionMatch","match2","word2","markedTextUtil_1","wordRange","contents","textToMarkedString","language","Hover","replace","_NL","charCodeAt","_TAB","_WSB","_LBracket","_RBracket","_LCurly","_RCurly","_LParent","_RParent","_Comma","_Quote","_DQuote","_USC","_a","_z","_A","_Z","_0","_9","BOF","BackwardIterator","model","offset","lineNumber","this","lineAt","ch","iterator","paramCount","readArguments","ident","readIdent","paramsString","substring","lastIndexOf","signatureInfo","SignatureInformation","re","parameters","label","ret","SignatureHelp","signatures","activeSignature","activeParameter","parentNesting","bracketNesting","curlyNesting","hasNext","identStarted","isIdentPart","String","fromCharCode","cp","string_decoder_1","async_1","localize","loadMessageBundle","__dirname","LineDecoder","encoding","stringDecoder","StringDecoder","remaining","buffer","write","idx","RunTrigger","strings","onSave","onType","from","PHPValidationProvider","workspaceStore","documentListener","executable","undefined","validationEnabled","trigger","pauseValidation","diagnosticCollection","createDiagnosticCollection","onDidChangeConfiguration","loadConfiguration","onDidOpenTextDocument","triggerValidate","onDidCloseTextDocument","textDocument","uri","delayers","toString","commands","registerCommand","untrustValidationExecutable","clear","dispose","section","oldExecutable","inspect","workspaceValue","executableIsUserDefined","globalValue","executeCommand","onDidChangeTextDocument","e","onDidSaveTextDocument","textDocuments","forEach","update","languageId","delayer","ThrottledDelayer","doValidate","checkedExecutablePath","window","showInformationMessage","title","id","isCloseAffordance","then","selected","args","decoder","diagnostics","processLine","MatchExpression","message","parseInt","diagnostic","Diagnostic","Number","MAX_VALUE","options","workspaceFolders","cwd","fsPath","FileArgs","slice","fileName","BufferArgs","childProcess","spawn","on","error","showError","pid","stdin","stdout","data","set","code","openSettings","Throttler","activePromise","queuedPromise","queuedPromiseFactory","promiseFactory","onComplete","queue","reject","err","Delayer","defaultDelay","timeout","completionPromise","onResolve","task","delay","cancelTimeout","setTimeout","clearTimeout","super","throttler","MessageFormat","LocalizeInfo","resolvedBundles","isPseudo","path","fs","isDefined","isString","readJsonFileSync","filename","JSON","parse","readFileSync","format","rest","index","arg","replaced","createScopedLocalizeFunction","messages","_i","arguments","isNumber","console","Error","stack","warn","cacheBundle","bundle","loadNlsBundleOrCreateFromI18n","bundlePath","cacheRoot","useMemoryOnly","writeBundle","flag","Date","utimes","SyntaxError","metaDataPath","languagePackLocation","translationsConfig","languagePack","metaData","module_2","translations","outDir","resultMessages","keys","messageKey","translatedMessage","createNLSBundle","writeFileSync","stringify","loadDefaultNlsBundle","folder","module_1","createDefaultNlsBundle","loadNlsBundle","languagePackSupport","languagePackId","translationsConfigFile","candidate","root","locale","existsSync","findInTheBoxBundle","ext","extname","messageFormat","both","headerFile","tryFindMetaDataHeaderFile","nlsBundle","module_3","json","resolvedLanguage","cacheLanguageResolution","resolveLanguage","Array","isArray","is","comment","process","env","VSCODE_NLS_CONFIG","vscodeOptions","toLowerCase","isBoolean","_languagePackSupport","_cacheRoot","_languagePackId","_translationsConfigFile","_corruptedFile","writeFile","initializeSettings","config","opts"],"mappings":"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","file":"phpMain.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"vscode\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// file generated from PHP53Schema.xml using php-exclude_generate_php_globals.js\n\nexport interface IEntry { description?: string; signature?: string; }\nexport interface IEntries { [name: string]: IEntry; }\n\nexport const globalvariables: IEntries = {\n\t$GLOBALS: {\n\t\tdescription: 'An associative array containing references to all variables which are currently defined in the global scope of the script. The variable names are the keys of the array.',\n\t},\n\t$_SERVER: {\n\t\tdescription: '$_SERVER is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these; servers may omit some, or provide others not listed here. That said, a large number of these variables are accounted for in the CGI/1.1 specification, so you should be able to expect those.',\n\t},\n\t$_GET: {\n\t\tdescription: 'An associative array of variables passed to the current script via the URL parameters.',\n\t},\n\t$_POST: {\n\t\tdescription: 'An associative array of variables passed to the current script via the HTTP POST method.',\n\t},\n\t$_FILES: {\n\t\tdescription: 'An associative array of items uploaded to the current script via the HTTP POST method.',\n\t},\n\t$_REQUEST: {\n\t\tdescription: 'An associative array that by default contains the contents of $_GET, $_POST and $_COOKIE.',\n\t},\n\t$_SESSION: {\n\t\tdescription: 'An associative array containing session variables available to the current script. See the Session functions documentation for more information on how this is used.',\n\t},\n\t$_ENV: {\n\t\tdescription: 'An associative array of variables passed to the current script via the environment method. \\r\\n\\r\\nThese variables are imported into PHP\\'s global namespace from the environment under which the PHP parser is running. Many are provided by the shell under which PHP is running and different systems are likely running different kinds of shells, a definitive list is impossible. Please see your shell\\'s documentation for a list of defined environment variables. \\r\\n\\r\\nOther environment variables include the CGI variables, placed there regardless of whether PHP is running as a server module or CGI processor.',\n\t},\n\t$_COOKIE: {\n\t\tdescription: 'An associative array of variables passed to the current script via HTTP Cookies.',\n\t},\n\t$php_errormsg: {\n\t\tdescription: '$php_errormsg is a variable containing the text of the last error message generated by PHP. This variable will only be available within the scope in which the error occurred, and only if the track_errors configuration option is turned on (it defaults to off).',\n\t},\n\t$HTTP_RAW_POST_DATA: {\n\t\tdescription: '$HTTP_RAW_POST_DATA contains the raw POST data. See always_populate_raw_post_data',\n\t},\n\t$http_response_header: {\n\t\tdescription: 'The $http_response_header array is similar to the get_headers() function. When using the HTTP wrapper, $http_response_header will be populated with the HTTP response headers. $http_response_header will be created in the local scope.',\n\t},\n\t$argc: {\n\t\tdescription: 'Contains the number of arguments passed to the current script when running from the command line.',\n\t},\n\t$argv: {\n\t\tdescription: 'Contains an array of all the arguments passed to the script when running from the command line.',\n\t},\n\t$this: {\n\t\tdescription: 'Refers to the current object',\n\t},\n};\nexport const compiletimeconstants: IEntries = {\n\t__CLASS__: {\n\t\tdescription: 'The class name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the class name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.',\n\t},\n\t__DIR__: {\n\t\tdescription: 'The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname(__FILE__). This directory name does not have a trailing slash unless it is the root directory. (Added in PHP 5.3.0.)',\n\t},\n\t__FILE__: {\n\t\tdescription: 'The full path and filename of the file. If used inside an include, the name of the included file is returned. Since PHP 4.0.2, __FILE__ always contains an absolute path with symlinks resolved whereas in older versions it contained relative path under some circumstances.',\n\t},\n\t__FUNCTION__: {\n\t\tdescription: 'The function name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the function name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.',\n\t},\n\t__LINE__: {\n\t\tdescription: 'The current line number of the file.',\n\t},\n\t__METHOD__: {\n\t\tdescription: 'The class method name. (Added in PHP 5.0.0) The method name is returned as it was declared (case-sensitive).',\n\t},\n\t__NAMESPACE__: {\n\t\tdescription: 'The name of the current namespace (case-sensitive). This constant is defined in compile-time (Added in PHP 5.3.0).',\n\t},\n\tTRUE: {\n\t},\n\tFALSE: {\n\t},\n\tNULL: {\n\t},\n\tM_PI: {\n\t\tdescription: 'The constant Pi: 3.14159265358979323846',\n\t},\n\tM_E: {\n\t\tdescription: 'The constant e: 2.7182818284590452354',\n\t},\n\tM_LOG2E: {\n\t\tdescription: 'The constant log_2 e: 1.4426950408889634074',\n\t},\n\tM_LOG10E: {\n\t\tdescription: 'The constant log_10 e: 0.43429448190325182765',\n\t},\n\tM_LN2: {\n\t\tdescription: 'The constant log_e 2: 0.69314718055994530942',\n\t},\n\tM_LN10: {\n\t\tdescription: 'The constant log_e 10: 2.30258509299404568402',\n\t},\n\tM_PI_2: {\n\t\tdescription: 'The constant pi/2: 1.57079632679489661923',\n\t},\n\tM_PI_4: {\n\t\tdescription: 'The constant pi/4: 0.78539816339744830962',\n\t},\n\tM_1_PI: {\n\t\tdescription: 'The constant 1/pi: 0.31830988618379067154',\n\t},\n\tM_2_PI: {\n\t\tdescription: 'The constant 2/pi: 0.63661977236758134308',\n\t},\n\tM_SQRTPI: {\n\t\tdescription: 'The constant sqrt(pi): 1.77245385090551602729',\n\t},\n\tM_2_SQRTPI: {\n\t\tdescription: 'The constant 2/sqrt(pi): 1.12837916709551257390',\n\t},\n\tM_SQRT2: {\n\t\tdescription: 'The constant sqrt(2): 1.41421356237309504880',\n\t},\n\tM_SQRT3: {\n\t\tdescription: 'The constant sqrt(3): 1.73205080756887729352',\n\t},\n\tM_SQRT1_2: {\n\t\tdescription: 'The constant 1/sqrt(2): 0.7071067811865475244',\n\t},\n\tM_LNPI: {\n\t\tdescription: 'The constant log_e(pi): 1.14472988584940017414',\n\t},\n\tM_EULER: {\n\t\tdescription: 'Euler constant: 0.57721566490153286061',\n\t},\n\tPHP_ROUND_HALF_UP: {\n\t\tdescription: 'Round halves up = 1',\n\t},\n\tPHP_ROUND_HALF_DOWN: {\n\t\tdescription: 'Round halves down = 2',\n\t},\n\tPHP_ROUND_HALF_EVEN: {\n\t\tdescription: 'Round halves to even numbers = 3',\n\t},\n\tPHP_ROUND_HALF_ODD: {\n\t\tdescription: 'Round halvesto odd numbers = 4',\n\t},\n\tNAN: {\n\t\tdescription: 'NAN (as a float): Not A Number',\n\t},\n\tINF: {\n\t\tdescription: 'INF (as a float): The infinite',\n\t},\n\tPASSWORD_BCRYPT: {\n\t\tdescription: 'PASSWORD_BCRYPT is used to create new password hashes using the CRYPT_BLOWFISH algorithm.',\n\t},\n\tPASSWORD_DEFAULT: {\n\t\tdescription: 'The default algorithm to use for hashing if no algorithm is provided. This may change in newer PHP releases when newer, stronger hashing algorithms are supported.',\n\t},\n};\nexport const keywords: IEntries = {\n\tdefine: {\n\t\tdescription: 'Defines a named constant at runtime.',\n\t\tsignature: '( string $name , mixed $value [, bool $case_insensitive = false ] ): bool'\n\t},\n\tdie: {\n\t\tdescription: 'This language construct is equivalent to exit().',\n\t},\n\techo: {\n\t\tdescription: 'Outputs all parameters. \\r\\n\\r\\necho() is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo() (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo(), the parameters must not be enclosed within parentheses.\\r\\n\\r\\necho() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. This short syntax only works with the short_open_tag configuration setting enabled.',\n\t\tsignature: '( string $arg1 [, string $... ] ): void'\n\t},\n\tempty: {\n\t\tdescription: 'Determine whether a variable is considered to be empty.',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\texit: {\n\t\tdescription: 'Terminates execution of the script. Shutdown functions and object destructors will always be executed even if exit() is called.',\n\t\tsignature: '([ string $status ] )\\r\\nvoid exit ( int $status ): void'\n\t},\n\teval: {\n\t\tdescription: 'Evaluates the string given in code_str as PHP code. Among other things, this can be useful for storing code in a database text field for later execution.\\r\\nThere are some factors to keep in mind when using eval(). Remember that the string passed must be valid PHP code, including things like terminating statements with a semicolon so the parser doesn\\'t die on the line after the eval(), and properly escaping things in code_str. To mix HTML output and PHP code you can use a closing PHP tag to leave PHP mode.\\r\\nAlso remember that variables given values under eval() will retain these values in the main script afterwards.',\n\t\tsignature: '( string $code_str ): mixed'\n\t},\n\tinclude: {\n\t\tdescription: 'The include() statement includes and evaluates the specified file.',\n\t},\n\tinclude_once: {\n\t\tdescription: 'The include_once() statement includes and evaluates the specified file during the execution of the script. This is a behavior similar to the include() statement, with the only difference being that if the code from a file has already been included, it will not be included again. As the name suggests, it will be included just once. \\r\\n\\r\\ninclude_once() may be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, so in this case it may help avoid problems such as function redefinitions, variable value reassignments, etc.',\n\t},\n\tisset: {\n\t\tdescription: 'Determine if a variable is set and is not NULL. \\r\\n\\r\\nIf a variable has been unset with unset(), it will no longer be set. isset() will return FALSE if testing a variable that has been set to NULL. Also note that a NULL byte is not equivalent to the PHP NULL constant. \\r\\n\\r\\nIf multiple parameters are supplied then isset() will return TRUE only if all of the parameters are set. Evaluation goes from left to right and stops as soon as an unset variable is encountered.',\n\t\tsignature: '( mixed $var [, mixed $... ] ): bool'\n\t},\n\tlist: {\n\t\tdescription: 'Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation.',\n\t\tsignature: '( mixed $varname [, mixed $... ] ): array'\n\t},\n\trequire: {\n\t\tdescription: 'require() is identical to include() except upon failure it will also produce a fatal E_COMPILE_ERROR level error. In other words, it will halt the script whereas include() only emits a warning (E_WARNING) which allows the script to continue.',\n\t},\n\trequire_once: {\n\t\tdescription: 'The require_once() statement is identical to require() except PHP will check if the file has already been included, and if so, not include (require) it again.',\n\t},\n\treturn: {\n\t\tdescription: 'If called from within a function, the return() statement immediately ends execution of the current function, and returns its argument as the value of the function call. return() will also end the execution of an eval() statement or script file. \\r\\n\\r\\nIf called from the global scope, then execution of the current script file is ended. If the current script file was include()ed or require()ed, then control is passed back to the calling file. Furthermore, if the current script file was include()ed, then the value given to return() will be returned as the value of the include() call. If return() is called from within the main script file, then script execution ends. If the current script file was named by the auto_prepend_file or auto_append_file configuration options in php.ini, then that script file\\'s execution is ended.',\n\t},\n\tprint: {\n\t\tdescription: 'Outputs arg. \\r\\n\\r\\nprint() is not actually a real function (it is a language construct) so you are not required to use parentheses with its argument list.',\n\t\tsignature: '( string $arg ): int'\n\t},\n\tunset: {\n\t\tdescription: 'unset() destroys the specified variables. \\r\\n\\r\\nThe behavior of unset() inside of a function can vary depending on what type of variable you are attempting to destroy. \\r\\n\\r\\nIf a globalized variable is unset() inside of a function, only the local variable is destroyed. The variable in the calling environment will retain the same value as before unset() was called.',\n\t\tsignature: '( mixed $var [, mixed $... ] ): void'\n\t},\n\tyield: {\n\t\tdescription: 'The heart of a generator function is the yield keyword. In its simplest form, a yield statement looks much like a return statement, except that instead of stopping execution of the function and returning, yield instead provides a value to the code looping over the generator and pauses execution of the generator function.',\n\t},\n\tabstract: {\n\t},\n\tand: {\n\t},\n\tarray: {\n\t},\n\tas: {\n\t},\n\tbreak: {\n\t},\n\tcase: {\n\t},\n\tcatch: {\n\t},\n\tclass: {\n\t},\n\tclone: {\n\t},\n\tconst: {\n\t},\n\tcontinue: {\n\t},\n\tdeclare: {\n\t},\n\tdefault: {\n\t},\n\tdo: {\n\t},\n\telse: {\n\t},\n\telseif: {\n\t},\n\tenddeclare: {\n\t},\n\tendfor: {\n\t},\n\tendforeach: {\n\t},\n\tendif: {\n\t},\n\tendswitch: {\n\t},\n\tendwhile: {\n\t},\n\textends: {\n\t},\n\tfinal: {\n\t},\n\tfinally: {\n\t},\n\tfor: {\n\t},\n\tforeach: {\n\t},\n\tfunction: {\n\t},\n\tglobal: {\n\t},\n\tgoto: {\n\t},\n\tif: {\n\t},\n\timplements: {\n\t},\n\tinterface: {\n\t},\n\tinstanceof: {\n\t},\n\tinsteadOf: {\n\t},\n\tnamespace: {\n\t},\n\tnew: {\n\t},\n\tor: {\n\t},\n\tparent: {\n\t},\n\tprivate: {\n\t},\n\tprotected: {\n\t},\n\tpublic: {\n\t},\n\tself: {\n\t},\n\tstatic: {\n\t},\n\tswitch: {\n\t},\n\tthrow: {\n\t},\n\ttrait: {\n\t},\n\ttry: {\n\t},\n\tuse: {\n\t},\n\tvar: {\n\t},\n\twhile: {\n\t},\n\txor: {\n\t},\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// THIS IS GENERATED FILE. DO NOT MODIFY.\n\nimport { IEntries } from './phpGlobals';\n\nexport const globalfunctions: IEntries = {\n\tdebug_backtrace: {\n\t\tdescription: 'Generates a backtrace',\n\t\tsignature: '([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]]): array'\n\t},\n\tdebug_print_backtrace: {\n\t\tdescription: 'Prints a backtrace',\n\t\tsignature: '([ int $options = 0 [, int $limit = 0 ]]): void'\n\t},\n\terror_clear_last: {\n\t\tdescription: 'Clear the most recent error',\n\t\tsignature: '(void): void'\n\t},\n\terror_get_last: {\n\t\tdescription: 'Get the last occurred error',\n\t\tsignature: '(void): array'\n\t},\n\terror_log: {\n\t\tdescription: 'Send an error message to the defined error handling routines',\n\t\tsignature: '( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]]): bool'\n\t},\n\terror_reporting: {\n\t\tdescription: 'Sets which PHP errors are reported',\n\t\tsignature: '([ int $level ]): int'\n\t},\n\trestore_error_handler: {\n\t\tdescription: 'Restores the previous error handler function',\n\t\tsignature: '(void): bool'\n\t},\n\trestore_exception_handler: {\n\t\tdescription: 'Restores the previously defined exception handler function',\n\t\tsignature: '(void): bool'\n\t},\n\tset_error_handler: {\n\t\tdescription: 'Sets a user-defined error handler function',\n\t\tsignature: '( callable $error_handler [, int $error_types = E_ALL | E_STRICT ]): mixed'\n\t},\n\tset_exception_handler: {\n\t\tdescription: 'Sets a user-defined exception handler function',\n\t\tsignature: '( callable $exception_handler ): callable'\n\t},\n\ttrigger_error: {\n\t\tdescription: 'Generates a user-level error/warning/notice message',\n\t\tsignature: '( string $error_msg [, int $error_type = E_USER_NOTICE ]): bool'\n\t},\n\tuser_error: {\n\t\tdescription: 'Alias of trigger_error',\n\t},\n\topcache_compile_file: {\n\t\tdescription: 'Compiles and caches a PHP script without executing it',\n\t\tsignature: '( string $file ): bool'\n\t},\n\topcache_get_configuration: {\n\t\tdescription: 'Get configuration information about the cache',\n\t\tsignature: '(void): array'\n\t},\n\topcache_get_status: {\n\t\tdescription: 'Get status information about the cache',\n\t\tsignature: '([ bool $get_scripts ]): array'\n\t},\n\topcache_invalidate: {\n\t\tdescription: 'Invalidates a cached script',\n\t\tsignature: '( string $script [, bool $force ]): bool'\n\t},\n\topcache_is_script_cached: {\n\t\tdescription: 'Tells whether a script is cached in OPCache',\n\t\tsignature: '( string $file ): bool'\n\t},\n\topcache_reset: {\n\t\tdescription: 'Resets the contents of the opcode cache',\n\t\tsignature: '(void): bool'\n\t},\n\tflush: {\n\t\tdescription: 'Flush system output buffer',\n\t\tsignature: '(void): void'\n\t},\n\tob_clean: {\n\t\tdescription: 'Clean (erase) the output buffer',\n\t\tsignature: '(void): void'\n\t},\n\tob_end_clean: {\n\t\tdescription: 'Clean (erase) the output buffer and turn off output buffering',\n\t\tsignature: '(void): bool'\n\t},\n\tob_end_flush: {\n\t\tdescription: 'Flush (send) the output buffer and turn off output buffering',\n\t\tsignature: '(void): bool'\n\t},\n\tob_flush: {\n\t\tdescription: 'Flush (send) the output buffer',\n\t\tsignature: '(void): void'\n\t},\n\tob_get_clean: {\n\t\tdescription: 'Get current buffer contents and delete current output buffer',\n\t\tsignature: '(void): string'\n\t},\n\tob_get_contents: {\n\t\tdescription: 'Return the contents of the output buffer',\n\t\tsignature: '(void): string'\n\t},\n\tob_get_flush: {\n\t\tdescription: 'Flush the output buffer, return it as a string and turn off output buffering',\n\t\tsignature: '(void): string'\n\t},\n\tob_get_length: {\n\t\tdescription: 'Return the length of the output buffer',\n\t\tsignature: '(void): int'\n\t},\n\tob_get_level: {\n\t\tdescription: 'Return the nesting level of the output buffering mechanism',\n\t\tsignature: '(void): int'\n\t},\n\tob_get_status: {\n\t\tdescription: 'Get status of output buffers',\n\t\tsignature: '([ bool $full_status = FALSE ]): array'\n\t},\n\tob_gzhandler: {\n\t\tdescription: 'ob_start callback function to gzip output buffer',\n\t\tsignature: '( string $buffer , int $mode ): string'\n\t},\n\tob_implicit_flush: {\n\t\tdescription: 'Turn implicit flush on/off',\n\t\tsignature: '([ int $flag = 1 ]): void'\n\t},\n\tob_list_handlers: {\n\t\tdescription: 'List all output handlers in use',\n\t\tsignature: '(void): array'\n\t},\n\tob_start: {\n\t\tdescription: 'Turn on output buffering',\n\t\tsignature: '([ callable $output_callback [, int $chunk_size = 0 [, int $flags ]]]): bool'\n\t},\n\toutput_add_rewrite_var: {\n\t\tdescription: 'Add URL rewriter values',\n\t\tsignature: '( string $name , string $value ): bool'\n\t},\n\toutput_reset_rewrite_vars: {\n\t\tdescription: 'Reset URL rewriter values',\n\t\tsignature: '(void): bool'\n\t},\n\tassert_options: {\n\t\tdescription: 'Set/get the various assert flags',\n\t\tsignature: '( int $what [, mixed $value ]): mixed'\n\t},\n\tassert: {\n\t\tdescription: 'Checks if assertion is FALSE',\n\t\tsignature: '( mixed $assertion [, string $description [, Throwable $exception ]]): bool'\n\t},\n\tcli_get_process_title: {\n\t\tdescription: 'Returns the current process title',\n\t\tsignature: '(void): string'\n\t},\n\tcli_set_process_title: {\n\t\tdescription: 'Sets the process title',\n\t\tsignature: '( string $title ): bool'\n\t},\n\tdl: {\n\t\tdescription: 'Loads a PHP extension at runtime',\n\t\tsignature: '( string $library ): bool'\n\t},\n\textension_loaded: {\n\t\tdescription: 'Find out whether an extension is loaded',\n\t\tsignature: '( string $name ): bool'\n\t},\n\tgc_collect_cycles: {\n\t\tdescription: 'Forces collection of any existing garbage cycles',\n\t\tsignature: '(void): int'\n\t},\n\tgc_disable: {\n\t\tdescription: 'Deactivates the circular reference collector',\n\t\tsignature: '(void): void'\n\t},\n\tgc_enable: {\n\t\tdescription: 'Activates the circular reference collector',\n\t\tsignature: '(void): void'\n\t},\n\tgc_enabled: {\n\t\tdescription: 'Returns status of the circular reference collector',\n\t\tsignature: '(void): bool'\n\t},\n\tgc_mem_caches: {\n\t\tdescription: 'Reclaims memory used by the Zend Engine memory manager',\n\t\tsignature: '(void): int'\n\t},\n\tgc_status: {\n\t\tdescription: 'Gets information about the garbage collector',\n\t\tsignature: '(void): array'\n\t},\n\tget_cfg_var: {\n\t\tdescription: 'Gets the value of a PHP configuration option',\n\t\tsignature: '( string $option ): mixed'\n\t},\n\tget_current_user: {\n\t\tdescription: 'Gets the name of the owner of the current PHP script',\n\t\tsignature: '(void): string'\n\t},\n\tget_defined_constants: {\n\t\tdescription: 'Returns an associative array with the names of all the constants and their values',\n\t\tsignature: '([ bool $categorize ]): array'\n\t},\n\tget_extension_funcs: {\n\t\tdescription: 'Returns an array with the names of the functions of a module',\n\t\tsignature: '( string $module_name ): array'\n\t},\n\tget_include_path: {\n\t\tdescription: 'Gets the current include_path configuration option',\n\t\tsignature: '(void): string'\n\t},\n\tget_included_files: {\n\t\tdescription: 'Returns an array with the names of included or required files',\n\t\tsignature: '(void): array'\n\t},\n\tget_loaded_extensions: {\n\t\tdescription: 'Returns an array with the names of all modules compiled and loaded',\n\t\tsignature: '([ bool $zend_extensions ]): array'\n\t},\n\tget_magic_quotes_gpc: {\n\t\tdescription: 'Gets the current configuration setting of magic_quotes_gpc',\n\t\tsignature: '(void): bool'\n\t},\n\tget_magic_quotes_runtime: {\n\t\tdescription: 'Gets the current active configuration setting of magic_quotes_runtime',\n\t\tsignature: '(void): bool'\n\t},\n\tget_required_files: {\n\t\tdescription: 'Alias of get_included_files',\n\t},\n\tget_resources: {\n\t\tdescription: 'Returns active resources',\n\t\tsignature: '([ string $type ]): resource'\n\t},\n\tgetenv: {\n\t\tdescription: 'Gets the value of an environment variable',\n\t\tsignature: '( string $varname [, bool $local_only ]): array'\n\t},\n\tgetlastmod: {\n\t\tdescription: 'Gets time of last page modification',\n\t\tsignature: '(void): int'\n\t},\n\tgetmygid: {\n\t\tdescription: 'Get PHP script owner\\'s GID',\n\t\tsignature: '(void): int'\n\t},\n\tgetmyinode: {\n\t\tdescription: 'Gets the inode of the current script',\n\t\tsignature: '(void): int'\n\t},\n\tgetmypid: {\n\t\tdescription: 'Gets PHP\\'s process ID',\n\t\tsignature: '(void): int'\n\t},\n\tgetmyuid: {\n\t\tdescription: 'Gets PHP script owner\\'s UID',\n\t\tsignature: '(void): int'\n\t},\n\tgetopt: {\n\t\tdescription: 'Gets options from the command line argument list',\n\t\tsignature: '( string $options [, array $longopts [, int $optind ]]): array'\n\t},\n\tgetrusage: {\n\t\tdescription: 'Gets the current resource usages',\n\t\tsignature: '([ int $who = 0 ]): array'\n\t},\n\tini_alter: {\n\t\tdescription: 'Alias of ini_set',\n\t},\n\tini_get_all: {\n\t\tdescription: 'Gets all configuration options',\n\t\tsignature: '([ string $extension [, bool $details ]]): array'\n\t},\n\tini_get: {\n\t\tdescription: 'Gets the value of a configuration option',\n\t\tsignature: '( string $varname ): string'\n\t},\n\tini_restore: {\n\t\tdescription: 'Restores the value of a configuration option',\n\t\tsignature: '( string $varname ): void'\n\t},\n\tini_set: {\n\t\tdescription: 'Sets the value of a configuration option',\n\t\tsignature: '( string $varname , string $newvalue ): string'\n\t},\n\tmagic_quotes_runtime: {\n\t\tdescription: 'Alias of set_magic_quotes_runtime',\n\t},\n\tmain: {\n\t\tdescription: 'Dummy for main',\n\t},\n\tmemory_get_peak_usage: {\n\t\tdescription: 'Returns the peak of memory allocated by PHP',\n\t\tsignature: '([ bool $real_usage ]): int'\n\t},\n\tmemory_get_usage: {\n\t\tdescription: 'Returns the amount of memory allocated to PHP',\n\t\tsignature: '([ bool $real_usage ]): int'\n\t},\n\tphp_ini_loaded_file: {\n\t\tdescription: 'Retrieve a path to the loaded php.ini file',\n\t\tsignature: '(void): string'\n\t},\n\tphp_ini_scanned_files: {\n\t\tdescription: 'Return a list of .ini files parsed from the additional ini dir',\n\t\tsignature: '(void): string'\n\t},\n\tphp_logo_guid: {\n\t\tdescription: 'Gets the logo guid',\n\t\tsignature: '(void): string'\n\t},\n\tphp_sapi_name: {\n\t\tdescription: 'Returns the type of interface between web server and PHP',\n\t\tsignature: '(void): string'\n\t},\n\tphp_uname: {\n\t\tdescription: 'Returns information about the operating system PHP is running on',\n\t\tsignature: '([ string $mode = \"a\" ]): string'\n\t},\n\tphpcredits: {\n\t\tdescription: 'Prints out the credits for PHP',\n\t\tsignature: '([ int $flag = CREDITS_ALL ]): bool'\n\t},\n\tphpinfo: {\n\t\tdescription: 'Outputs information about PHP\\'s configuration',\n\t\tsignature: '([ int $what = INFO_ALL ]): bool'\n\t},\n\tphpversion: {\n\t\tdescription: 'Gets the current PHP version',\n\t\tsignature: '([ string $extension ]): string'\n\t},\n\tputenv: {\n\t\tdescription: 'Sets the value of an environment variable',\n\t\tsignature: '( string $setting ): bool'\n\t},\n\trestore_include_path: {\n\t\tdescription: 'Restores the value of the include_path configuration option',\n\t\tsignature: '(void): void'\n\t},\n\tset_include_path: {\n\t\tdescription: 'Sets the include_path configuration option',\n\t\tsignature: '( string $new_include_path ): string'\n\t},\n\tset_magic_quotes_runtime: {\n\t\tdescription: 'Sets the current active configuration setting of magic_quotes_runtime',\n\t\tsignature: '( bool $new_setting ): bool'\n\t},\n\tset_time_limit: {\n\t\tdescription: 'Limits the maximum execution time',\n\t\tsignature: '( int $seconds ): bool'\n\t},\n\tsys_get_temp_dir: {\n\t\tdescription: 'Returns directory path used for temporary files',\n\t\tsignature: '(void): string'\n\t},\n\tversion_compare: {\n\t\tdescription: 'Compares two \"PHP-standardized\" version number strings',\n\t\tsignature: '( string $version1 , string $version2 , string $operator ): bool'\n\t},\n\tzend_logo_guid: {\n\t\tdescription: 'Gets the Zend guid',\n\t\tsignature: '(void): string'\n\t},\n\tzend_thread_id: {\n\t\tdescription: 'Returns a unique identifier for the current thread',\n\t\tsignature: '(void): int'\n\t},\n\tzend_version: {\n\t\tdescription: 'Gets the version of the current Zend engine',\n\t\tsignature: '(void): string'\n\t},\n\tbzclose: {\n\t\tdescription: 'Close a bzip2 file',\n\t\tsignature: '( resource $bz ): int'\n\t},\n\tbzcompress: {\n\t\tdescription: 'Compress a string into bzip2 encoded data',\n\t\tsignature: '( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]]): mixed'\n\t},\n\tbzdecompress: {\n\t\tdescription: 'Decompresses bzip2 encoded data',\n\t\tsignature: '( string $source [, int $small = 0 ]): mixed'\n\t},\n\tbzerrno: {\n\t\tdescription: 'Returns a bzip2 error number',\n\t\tsignature: '( resource $bz ): int'\n\t},\n\tbzerror: {\n\t\tdescription: 'Returns the bzip2 error number and error string in an array',\n\t\tsignature: '( resource $bz ): array'\n\t},\n\tbzerrstr: {\n\t\tdescription: 'Returns a bzip2 error string',\n\t\tsignature: '( resource $bz ): string'\n\t},\n\tbzflush: {\n\t\tdescription: 'Force a write of all buffered data',\n\t\tsignature: '( resource $bz ): bool'\n\t},\n\tbzopen: {\n\t\tdescription: 'Opens a bzip2 compressed file',\n\t\tsignature: '( mixed $file , string $mode ): resource'\n\t},\n\tbzread: {\n\t\tdescription: 'Binary safe bzip2 file read',\n\t\tsignature: '( resource $bz [, int $length = 1024 ]): string'\n\t},\n\tbzwrite: {\n\t\tdescription: 'Binary safe bzip2 file write',\n\t\tsignature: '( resource $bz , string $data [, int $length ]): int'\n\t},\n\tPharException: {\n\t\tdescription: 'The PharException class provides a phar-specific exception class    for try/catch blocks',\n\t},\n\tzip_close: {\n\t\tdescription: 'Close a ZIP file archive',\n\t\tsignature: '( resource $zip ): void'\n\t},\n\tzip_entry_close: {\n\t\tdescription: 'Close a directory entry',\n\t\tsignature: '( resource $zip_entry ): bool'\n\t},\n\tzip_entry_compressedsize: {\n\t\tdescription: 'Retrieve the compressed size of a directory entry',\n\t\tsignature: '( resource $zip_entry ): int'\n\t},\n\tzip_entry_compressionmethod: {\n\t\tdescription: 'Retrieve the compression method of a directory entry',\n\t\tsignature: '( resource $zip_entry ): string'\n\t},\n\tzip_entry_filesize: {\n\t\tdescription: 'Retrieve the actual file size of a directory entry',\n\t\tsignature: '( resource $zip_entry ): int'\n\t},\n\tzip_entry_name: {\n\t\tdescription: 'Retrieve the name of a directory entry',\n\t\tsignature: '( resource $zip_entry ): string'\n\t},\n\tzip_entry_open: {\n\t\tdescription: 'Open a directory entry for reading',\n\t\tsignature: '( resource $zip , resource $zip_entry [, string $mode ]): bool'\n\t},\n\tzip_entry_read: {\n\t\tdescription: 'Read from an open directory entry',\n\t\tsignature: '( resource $zip_entry [, int $length = 1024 ]): string'\n\t},\n\tzip_open: {\n\t\tdescription: 'Open a ZIP file archive',\n\t\tsignature: '( string $filename ): resource'\n\t},\n\tzip_read: {\n\t\tdescription: 'Read next entry in a ZIP file archive',\n\t\tsignature: '( resource $zip ): resource'\n\t},\n\tdeflate_add: {\n\t\tdescription: 'Incrementally deflate data',\n\t\tsignature: '( resource $context , string $data [, int $flush_mode = ZLIB_SYNC_FLUSH ]): string'\n\t},\n\tdeflate_init: {\n\t\tdescription: 'Initialize an incremental deflate context',\n\t\tsignature: '( int $encoding [, array $options = array() ]): resource'\n\t},\n\tgzclose: {\n\t\tdescription: 'Close an open gz-file pointer',\n\t\tsignature: '( resource $zp ): bool'\n\t},\n\tgzcompress: {\n\t\tdescription: 'Compress a string',\n\t\tsignature: '( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]]): string'\n\t},\n\tgzdecode: {\n\t\tdescription: 'Decodes a gzip compressed string',\n\t\tsignature: '( string $data [, int $length ]): string'\n\t},\n\tgzdeflate: {\n\t\tdescription: 'Deflate a string',\n\t\tsignature: '( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]]): string'\n\t},\n\tgzencode: {\n\t\tdescription: 'Create a gzip compressed string',\n\t\tsignature: '( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]]): string'\n\t},\n\tgzeof: {\n\t\tdescription: 'Test for EOF on a gz-file pointer',\n\t\tsignature: '( resource $zp ): int'\n\t},\n\tgzfile: {\n\t\tdescription: 'Read entire gz-file into an array',\n\t\tsignature: '( string $filename [, int $use_include_path = 0 ]): array'\n\t},\n\tgzgetc: {\n\t\tdescription: 'Get character from gz-file pointer',\n\t\tsignature: '( resource $zp ): string'\n\t},\n\tgzgets: {\n\t\tdescription: 'Get line from file pointer',\n\t\tsignature: '( resource $zp [, int $length ]): string'\n\t},\n\tgzgetss: {\n\t\tdescription: 'Get line from gz-file pointer and strip HTML tags',\n\t\tsignature: '( resource $zp , int $length [, string $allowable_tags ]): string'\n\t},\n\tgzinflate: {\n\t\tdescription: 'Inflate a deflated string',\n\t\tsignature: '( string $data [, int $length = 0 ]): string'\n\t},\n\tgzopen: {\n\t\tdescription: 'Open gz-file',\n\t\tsignature: '( string $filename , string $mode [, int $use_include_path = 0 ]): resource'\n\t},\n\tgzpassthru: {\n\t\tdescription: 'Output all remaining data on a gz-file pointer',\n\t\tsignature: '( resource $zp ): int'\n\t},\n\tgzputs: {\n\t\tdescription: 'Alias of gzwrite',\n\t},\n\tgzread: {\n\t\tdescription: 'Binary-safe gz-file read',\n\t\tsignature: '( resource $zp , int $length ): string'\n\t},\n\tgzrewind: {\n\t\tdescription: 'Rewind the position of a gz-file pointer',\n\t\tsignature: '( resource $zp ): bool'\n\t},\n\tgzseek: {\n\t\tdescription: 'Seek on a gz-file pointer',\n\t\tsignature: '( resource $zp , int $offset [, int $whence = SEEK_SET ]): int'\n\t},\n\tgztell: {\n\t\tdescription: 'Tell gz-file pointer read/write position',\n\t\tsignature: '( resource $zp ): int'\n\t},\n\tgzuncompress: {\n\t\tdescription: 'Uncompress a compressed string',\n\t\tsignature: '( string $data [, int $length = 0 ]): string'\n\t},\n\tgzwrite: {\n\t\tdescription: 'Binary-safe gz-file write',\n\t\tsignature: '( resource $zp , string $string [, int $length ]): int'\n\t},\n\tinflate_add: {\n\t\tdescription: 'Incrementally inflate encoded data',\n\t\tsignature: '( resource $context , string $encoded_data [, int $flush_mode = ZLIB_SYNC_FLUSH ]): string'\n\t},\n\tinflate_get_read_len: {\n\t\tdescription: 'Get number of bytes read so far',\n\t\tsignature: '( resource $resource ): int'\n\t},\n\tinflate_get_status: {\n\t\tdescription: 'Get decompression status',\n\t\tsignature: '( resource $resource ): int'\n\t},\n\tinflate_init: {\n\t\tdescription: 'Initialize an incremental inflate context',\n\t\tsignature: '( int $encoding [, array $options = array() ]): resource'\n\t},\n\treadgzfile: {\n\t\tdescription: 'Output a gz-file',\n\t\tsignature: '( string $filename [, int $use_include_path = 0 ]): int'\n\t},\n\tzlib_decode: {\n\t\tdescription: 'Uncompress any raw/gzip/zlib encoded data',\n\t\tsignature: '( string $data [, string $max_decoded_len ]): string'\n\t},\n\tzlib_encode: {\n\t\tdescription: 'Compress data with the specified encoding',\n\t\tsignature: '( string $data , int $encoding [, int $level = -1 ]): string'\n\t},\n\tzlib_get_coding_type: {\n\t\tdescription: 'Returns the coding type used for output compression',\n\t\tsignature: '(void): string'\n\t},\n\trandom_bytes: {\n\t\tdescription: 'Generates cryptographically secure pseudo-random bytes',\n\t\tsignature: '( int $length ): string'\n\t},\n\trandom_int: {\n\t\tdescription: 'Generates cryptographically secure pseudo-random integers',\n\t\tsignature: '( int $min , int $max ): int'\n\t},\n\thash_algos: {\n\t\tdescription: 'Return a list of registered hashing algorithms',\n\t\tsignature: '(void): array'\n\t},\n\thash_copy: {\n\t\tdescription: 'Copy hashing context',\n\t\tsignature: '( HashContext $context ): HashContext'\n\t},\n\thash_equals: {\n\t\tdescription: 'Timing attack safe string comparison',\n\t\tsignature: '( string $known_string , string $user_string ): bool'\n\t},\n\thash_file: {\n\t\tdescription: 'Generate a hash value using the contents of a given file',\n\t\tsignature: '( string $algo , string $filename [, bool $raw_output ]): string'\n\t},\n\thash_final: {\n\t\tdescription: 'Finalize an incremental hash and return resulting digest',\n\t\tsignature: '( HashContext $context [, bool $raw_output ]): string'\n\t},\n\thash_hkdf: {\n\t\tdescription: 'Generate a HKDF key derivation of a supplied key input',\n\t\tsignature: '( string $algo , string $ikm [, int $length = 0 [, string $info = \\'\\' [, string $salt = \\'\\' ]]]): string'\n\t},\n\thash_hmac_algos: {\n\t\tdescription: 'Return a list of registered hashing algorithms suitable for hash_hmac',\n\t\tsignature: '(void): array'\n\t},\n\thash_hmac_file: {\n\t\tdescription: 'Generate a keyed hash value using the HMAC method and the contents of a given file',\n\t\tsignature: '( string $algo , string $filename , string $key [, bool $raw_output ]): string'\n\t},\n\thash_hmac: {\n\t\tdescription: 'Generate a keyed hash value using the HMAC method',\n\t\tsignature: '( string $algo , string $data , string $key [, bool $raw_output ]): string'\n\t},\n\thash_init: {\n\t\tdescription: 'Initialize an incremental hashing context',\n\t\tsignature: '( string $algo [, int $options = 0 [, string $key ]]): HashContext'\n\t},\n\thash_pbkdf2: {\n\t\tdescription: 'Generate a PBKDF2 key derivation of a supplied password',\n\t\tsignature: '( string $algo , string $password , string $salt , int $iterations [, int $length = 0 [, bool $raw_output ]]): string'\n\t},\n\thash_update_file: {\n\t\tdescription: 'Pump data into an active hashing context from a file',\n\t\tsignature: '( HashContext $hcontext , string $filename [, resource $scontext ]): bool'\n\t},\n\thash_update_stream: {\n\t\tdescription: 'Pump data into an active hashing context from an open stream',\n\t\tsignature: '( HashContext $context , resource $handle [, int $length = -1 ]): int'\n\t},\n\thash_update: {\n\t\tdescription: 'Pump data into an active hashing context',\n\t\tsignature: '( HashContext $context , string $data ): bool'\n\t},\n\thash: {\n\t\tdescription: 'Generate a hash value (message digest)',\n\t\tsignature: '( string $algo , string $data [, bool $raw_output ]): string'\n\t},\n\topenssl_cipher_iv_length: {\n\t\tdescription: 'Gets the cipher iv length',\n\t\tsignature: '( string $method ): int'\n\t},\n\topenssl_csr_export_to_file: {\n\t\tdescription: 'Exports a CSR to a file',\n\t\tsignature: '( mixed $csr , string $outfilename [, bool $notext ]): bool'\n\t},\n\topenssl_csr_export: {\n\t\tdescription: 'Exports a CSR as a string',\n\t\tsignature: '( mixed $csr , string $out [, bool $notext ]): bool'\n\t},\n\topenssl_csr_get_public_key: {\n\t\tdescription: 'Returns the public key of a CSR',\n\t\tsignature: '( mixed $csr [, bool $use_shortnames ]): resource'\n\t},\n\topenssl_csr_get_subject: {\n\t\tdescription: 'Returns the subject of a CSR',\n\t\tsignature: '( mixed $csr [, bool $use_shortnames ]): array'\n\t},\n\topenssl_csr_new: {\n\t\tdescription: 'Generates a CSR',\n\t\tsignature: '( array $dn , resource $privkey [, array $configargs [, array $extraattribs ]]): mixed'\n\t},\n\topenssl_csr_sign: {\n\t\tdescription: 'Sign a CSR with another certificate (or itself) and generate a certificate',\n\t\tsignature: '( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]]): resource'\n\t},\n\topenssl_decrypt: {\n\t\tdescription: 'Decrypts data',\n\t\tsignature: '( string $data , string $method , string $key [, int $options = 0 [, string $iv = \"\" [, string $tag = \"\" [, string $aad = \"\" ]]]]): string'\n\t},\n\topenssl_dh_compute_key: {\n\t\tdescription: 'Computes shared secret for public value of remote DH public key and local DH key',\n\t\tsignature: '( string $pub_key , resource $dh_key ): string'\n\t},\n\topenssl_digest: {\n\t\tdescription: 'Computes a digest',\n\t\tsignature: '( string $data , string $method [, bool $raw_output ]): string'\n\t},\n\topenssl_encrypt: {\n\t\tdescription: 'Encrypts data',\n\t\tsignature: '( string $data , string $method , string $key [, int $options = 0 [, string $iv = \"\" [, string $tag = NULL [, string $aad = \"\" [, int $tag_length = 16 ]]]]]): string'\n\t},\n\topenssl_error_string: {\n\t\tdescription: 'Return openSSL error message',\n\t\tsignature: '(void): string'\n\t},\n\topenssl_free_key: {\n\t\tdescription: 'Free key resource',\n\t\tsignature: '( resource $key_identifier ): void'\n\t},\n\topenssl_get_cert_locations: {\n\t\tdescription: 'Retrieve the available certificate locations',\n\t\tsignature: '(void): array'\n\t},\n\topenssl_get_cipher_methods: {\n\t\tdescription: 'Gets available cipher methods',\n\t\tsignature: '([ bool $aliases ]): array'\n\t},\n\topenssl_get_curve_names: {\n\t\tdescription: 'Gets list of available curve names for ECC',\n\t\tsignature: '(void): array'\n\t},\n\topenssl_get_md_methods: {\n\t\tdescription: 'Gets available digest methods',\n\t\tsignature: '([ bool $aliases ]): array'\n\t},\n\topenssl_get_privatekey: {\n\t\tdescription: 'Alias of openssl_pkey_get_private',\n\t},\n\topenssl_get_publickey: {\n\t\tdescription: 'Alias of openssl_pkey_get_public',\n\t},\n\topenssl_open: {\n\t\tdescription: 'Open sealed data',\n\t\tsignature: '( string $sealed_data , string $open_data , string $env_key , mixed $priv_key_id [, string $method = \"RC4\" [, string $iv ]]): bool'\n\t},\n\topenssl_pbkdf2: {\n\t\tdescription: 'Generates a PKCS5 v2 PBKDF2 string',\n\t\tsignature: '( string $password , string $salt , int $key_length , int $iterations [, string $digest_algorithm = \"sha1\" ]): string'\n\t},\n\topenssl_pkcs12_export_to_file: {\n\t\tdescription: 'Exports a PKCS#12 Compatible Certificate Store File',\n\t\tsignature: '( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ]): bool'\n\t},\n\topenssl_pkcs12_export: {\n\t\tdescription: 'Exports a PKCS#12 Compatible Certificate Store File to variable',\n\t\tsignature: '( mixed $x509 , string $out , mixed $priv_key , string $pass [, array $args ]): bool'\n\t},\n\topenssl_pkcs12_read: {\n\t\tdescription: 'Parse a PKCS#12 Certificate Store into an array',\n\t\tsignature: '( string $pkcs12 , array $certs , string $pass ): bool'\n\t},\n\topenssl_pkcs7_decrypt: {\n\t\tdescription: 'Decrypts an S/MIME encrypted message',\n\t\tsignature: '( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ]): bool'\n\t},\n\topenssl_pkcs7_encrypt: {\n\t\tdescription: 'Encrypt an S/MIME message',\n\t\tsignature: '( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]]): bool'\n\t},\n\topenssl_pkcs7_read: {\n\t\tdescription: 'Export the PKCS7 file to an array of PEM certificates',\n\t\tsignature: '( string $infilename , array $certs ): bool'\n\t},\n\topenssl_pkcs7_sign: {\n\t\tdescription: 'Sign an S/MIME message',\n\t\tsignature: '( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]]): bool'\n\t},\n\topenssl_pkcs7_verify: {\n\t\tdescription: 'Verifies the signature of an S/MIME signed message',\n\t\tsignature: '( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content [, string $p7bfilename ]]]]]): mixed'\n\t},\n\topenssl_pkey_export_to_file: {\n\t\tdescription: 'Gets an exportable representation of a key into a file',\n\t\tsignature: '( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]]): bool'\n\t},\n\topenssl_pkey_export: {\n\t\tdescription: 'Gets an exportable representation of a key into a string',\n\t\tsignature: '( mixed $key , string $out [, string $passphrase [, array $configargs ]]): bool'\n\t},\n\topenssl_pkey_free: {\n\t\tdescription: 'Frees a private key',\n\t\tsignature: '( resource $key ): void'\n\t},\n\topenssl_pkey_get_details: {\n\t\tdescription: 'Returns an array with the key details',\n\t\tsignature: '( resource $key ): array'\n\t},\n\topenssl_pkey_get_private: {\n\t\tdescription: 'Get a private key',\n\t\tsignature: '( mixed $key [, string $passphrase = \"\" ]): resource'\n\t},\n\topenssl_pkey_get_public: {\n\t\tdescription: 'Extract public key from certificate and prepare it for use',\n\t\tsignature: '( mixed $certificate ): resource'\n\t},\n\topenssl_pkey_new: {\n\t\tdescription: 'Generates a new private key',\n\t\tsignature: '([ array $configargs ]): resource'\n\t},\n\topenssl_private_decrypt: {\n\t\tdescription: 'Decrypts data with private key',\n\t\tsignature: '( string $data , string $decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ]): bool'\n\t},\n\topenssl_private_encrypt: {\n\t\tdescription: 'Encrypts data with private key',\n\t\tsignature: '( string $data , string $crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ]): bool'\n\t},\n\topenssl_public_decrypt: {\n\t\tdescription: 'Decrypts data with public key',\n\t\tsignature: '( string $data , string $decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ]): bool'\n\t},\n\topenssl_public_encrypt: {\n\t\tdescription: 'Encrypts data with public key',\n\t\tsignature: '( string $data , string $crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ]): bool'\n\t},\n\topenssl_random_pseudo_bytes: {\n\t\tdescription: 'Generate a pseudo-random string of bytes',\n\t\tsignature: '( int $length [, bool $crypto_strong ]): string'\n\t},\n\topenssl_seal: {\n\t\tdescription: 'Seal (encrypt) data',\n\t\tsignature: '( string $data , string $sealed_data , array $env_keys , array $pub_key_ids [, string $method = \"RC4\" [, string $iv ]]): int'\n\t},\n\topenssl_sign: {\n\t\tdescription: 'Generate signature',\n\t\tsignature: '( string $data , string $signature , mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ]): bool'\n\t},\n\topenssl_spki_export_challenge: {\n\t\tdescription: 'Exports the challenge assoicated with a signed public key and challenge',\n\t\tsignature: '( string $spkac ): string'\n\t},\n\topenssl_spki_export: {\n\t\tdescription: 'Exports a valid PEM formatted public key signed public key and challenge',\n\t\tsignature: '( string $spkac ): string'\n\t},\n\topenssl_spki_new: {\n\t\tdescription: 'Generate a new signed public key and challenge',\n\t\tsignature: '( resource $privkey , string $challenge [, int $algorithm = 0 ]): string'\n\t},\n\topenssl_spki_verify: {\n\t\tdescription: 'Verifies a signed public key and challenge',\n\t\tsignature: '( string $spkac ): string'\n\t},\n\topenssl_verify: {\n\t\tdescription: 'Verify signature',\n\t\tsignature: '( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ]): int'\n\t},\n\topenssl_x509_check_private_key: {\n\t\tdescription: 'Checks if a private key corresponds to a certificate',\n\t\tsignature: '( mixed $cert , mixed $key ): bool'\n\t},\n\topenssl_x509_checkpurpose: {\n\t\tdescription: 'Verifies if a certificate can be used for a particular purpose',\n\t\tsignature: '( mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]]): int'\n\t},\n\topenssl_x509_export_to_file: {\n\t\tdescription: 'Exports a certificate to file',\n\t\tsignature: '( mixed $x509 , string $outfilename [, bool $notext ]): bool'\n\t},\n\topenssl_x509_export: {\n\t\tdescription: 'Exports a certificate as a string',\n\t\tsignature: '( mixed $x509 , string $output [, bool $notext ]): bool'\n\t},\n\topenssl_x509_fingerprint: {\n\t\tdescription: 'Calculates the fingerprint, or digest, of a given X.509 certificate',\n\t\tsignature: '( mixed $x509 [, string $hash_algorithm = \"sha1\" [, bool $raw_output ]]): string'\n\t},\n\topenssl_x509_free: {\n\t\tdescription: 'Free certificate resource',\n\t\tsignature: '( resource $x509cert ): void'\n\t},\n\topenssl_x509_parse: {\n\t\tdescription: 'Parse an X509 certificate and return the information as an array',\n\t\tsignature: '( mixed $x509cert [, bool $shortnames ]): array'\n\t},\n\topenssl_x509_read: {\n\t\tdescription: 'Parse an X.509 certificate and return a resource identifier for  it',\n\t\tsignature: '( mixed $x509certdata ): resource'\n\t},\n\tpassword_get_info: {\n\t\tdescription: 'Returns information about the given hash',\n\t\tsignature: '( string $hash ): array'\n\t},\n\tpassword_hash: {\n\t\tdescription: 'Creates a password hash',\n\t\tsignature: '( string $password , int $algo [, array $options ]): integer'\n\t},\n\tpassword_needs_rehash: {\n\t\tdescription: 'Checks if the given hash matches the given options',\n\t\tsignature: '( string $hash , int $algo [, array $options ]): bool'\n\t},\n\tpassword_verify: {\n\t\tdescription: 'Verifies that a password matches a hash',\n\t\tsignature: '( string $password , string $hash ): bool'\n\t},\n\tsodium_add: {\n\t\tdescription: 'Add large numbers',\n\t\tsignature: '( string $val , string $addv ): void'\n\t},\n\tsodium_base642bin: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $b64 , int $id [, string $ignore ]): string'\n\t},\n\tsodium_bin2base64: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $bin , int $id ): string'\n\t},\n\tsodium_bin2hex: {\n\t\tdescription: 'Encode to hexadecimal',\n\t\tsignature: '( string $bin ): string'\n\t},\n\tsodium_compare: {\n\t\tdescription: 'Compare large numbers',\n\t\tsignature: '( string $buf1 , string $buf2 ): int'\n\t},\n\tsodium_crypto_aead_aes256gcm_decrypt: {\n\t\tdescription: 'Decrypt in combined mode with precalculation',\n\t\tsignature: '( string $ciphertext , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_aes256gcm_encrypt: {\n\t\tdescription: 'Encrypt in combined mode with precalculation',\n\t\tsignature: '( string $msg , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_aes256gcm_is_available: {\n\t\tdescription: 'Check if hardware supports AES256-GCM',\n\t\tsignature: '(void): bool'\n\t},\n\tsodium_crypto_aead_aes256gcm_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_aead_chacha20poly1305_decrypt: {\n\t\tdescription: 'Verify that the ciphertext includes a valid tag',\n\t\tsignature: '( string $ciphertext , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_chacha20poly1305_encrypt: {\n\t\tdescription: 'Encrypt a message',\n\t\tsignature: '( string $msg , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_chacha20poly1305_ietf_decrypt: {\n\t\tdescription: 'Verify that the ciphertext includes a valid tag',\n\t\tsignature: '( string $ciphertext , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_chacha20poly1305_ietf_encrypt: {\n\t\tdescription: 'Encrypt a message',\n\t\tsignature: '( string $msg , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_chacha20poly1305_ietf_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_aead_chacha20poly1305_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_aead_xchacha20poly1305_ietf_decrypt: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $ciphertext , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_xchacha20poly1305_ietf_encrypt: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $msg , string $ad , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_aead_xchacha20poly1305_ietf_keygen: {\n\t\tdescription: 'Description',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_auth_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_auth_verify: {\n\t\tdescription: 'Verifies that the tag is valid for the message',\n\t\tsignature: '( string $signature , string $msg , string $key ): bool'\n\t},\n\tsodium_crypto_auth: {\n\t\tdescription: 'Compute a tag for the message',\n\t\tsignature: '( string $msg , string $key ): string'\n\t},\n\tsodium_crypto_box_keypair_from_secretkey_and_publickey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $secret_key , string $public_key ): string'\n\t},\n\tsodium_crypto_box_keypair: {\n\t\tdescription: 'Randomly generate a secret key and a corresponding public key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_box_open: {\n\t\tdescription: 'Verify and decrypt a ciphertext',\n\t\tsignature: '( string $ciphertext , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_box_publickey_from_secretkey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_box_publickey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_box_seal_open: {\n\t\tdescription: 'Decrypt the ciphertext',\n\t\tsignature: '( string $ciphertext , string $key ): string'\n\t},\n\tsodium_crypto_box_seal: {\n\t\tdescription: 'Encrypt a message',\n\t\tsignature: '( string $msg , string $key ): string'\n\t},\n\tsodium_crypto_box_secretkey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_box_seed_keypair: {\n\t\tdescription: 'Deterministically derive the key pair from a single key',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_box: {\n\t\tdescription: 'Encrypt a message',\n\t\tsignature: '( string $msg , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_generichash_final: {\n\t\tdescription: 'Complete the hash',\n\t\tsignature: '( string $state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]): string'\n\t},\n\tsodium_crypto_generichash_init: {\n\t\tdescription: 'Initialize a hash',\n\t\tsignature: '([ string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]]): string'\n\t},\n\tsodium_crypto_generichash_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_generichash_update: {\n\t\tdescription: 'Add message to a hash',\n\t\tsignature: '( string $state , string $msg ): bool'\n\t},\n\tsodium_crypto_generichash: {\n\t\tdescription: 'Get a hash of the message',\n\t\tsignature: '( string $msg [, string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]]): string'\n\t},\n\tsodium_crypto_kdf_derive_from_key: {\n\t\tdescription: 'Derive a subkey',\n\t\tsignature: '( int $subkey_len , int $subkey_id , string $context , string $key ): string'\n\t},\n\tsodium_crypto_kdf_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_kx_client_session_keys: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $client_keypair , string $server_key ): array'\n\t},\n\tsodium_crypto_kx_keypair: {\n\t\tdescription: 'Creates a new sodium keypair',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_kx_publickey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_kx_secretkey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_kx_seed_keypair: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $string ): string'\n\t},\n\tsodium_crypto_kx_server_session_keys: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $server_keypair , string $client_key ): array'\n\t},\n\tsodium_crypto_pwhash_scryptsalsa208sha256_str_verify: {\n\t\tdescription: 'Verify that the password is a valid password verification string',\n\t\tsignature: '( string $hash , string $password ): bool'\n\t},\n\tsodium_crypto_pwhash_scryptsalsa208sha256_str: {\n\t\tdescription: 'Get an ASCII encoded hash',\n\t\tsignature: '( string $password , int $opslimit , int $memlimit ): string'\n\t},\n\tsodium_crypto_pwhash_scryptsalsa208sha256: {\n\t\tdescription: 'Derives a key from a password',\n\t\tsignature: '( int $length , string $password , string $salt , int $opslimit , int $memlimit ): string'\n\t},\n\tsodium_crypto_pwhash_str_needs_rehash: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $password , int $opslimit , int $memlimit ): bool'\n\t},\n\tsodium_crypto_pwhash_str_verify: {\n\t\tdescription: 'Verifies that a password matches a hash',\n\t\tsignature: '( string $hash , string $password ): bool'\n\t},\n\tsodium_crypto_pwhash_str: {\n\t\tdescription: 'Get an ASCII-encoded hash',\n\t\tsignature: '( string $password , int $opslimit , int $memlimit ): string'\n\t},\n\tsodium_crypto_pwhash: {\n\t\tdescription: 'Derive a key from a password',\n\t\tsignature: '( int $length , string $password , string $salt , int $opslimit , int $memlimit [, int $alg ]): string'\n\t},\n\tsodium_crypto_scalarmult_base: {\n\t\tdescription: 'Alias of sodium_crypto_box_publickey_from_secretkey',\n\t},\n\tsodium_crypto_scalarmult: {\n\t\tdescription: 'Compute a shared secret given a user\\'s secret key and another user\\'s public key',\n\t\tsignature: '( string $n , string $p ): string'\n\t},\n\tsodium_crypto_secretbox_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_secretbox_open: {\n\t\tdescription: 'Verify and decrypt a ciphertext',\n\t\tsignature: '( string $ciphertext , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_secretbox: {\n\t\tdescription: 'Encrypt a message',\n\t\tsignature: '( string $string , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_secretstream_xchacha20poly1305_init_pull: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $header , string $key ): string'\n\t},\n\tsodium_crypto_secretstream_xchacha20poly1305_init_push: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $key ): array'\n\t},\n\tsodium_crypto_secretstream_xchacha20poly1305_keygen: {\n\t\tdescription: 'Description',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_secretstream_xchacha20poly1305_pull: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $state , string $c [, string $ad ]): array'\n\t},\n\tsodium_crypto_secretstream_xchacha20poly1305_push: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $state , string $msg [, string $ad [, int $tag ]]): string'\n\t},\n\tsodium_crypto_secretstream_xchacha20poly1305_rekey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $state ): void'\n\t},\n\tsodium_crypto_shorthash_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_shorthash: {\n\t\tdescription: 'Compute a fixed-size fingerprint for the message',\n\t\tsignature: '( string $msg , string $key ): string'\n\t},\n\tsodium_crypto_sign_detached: {\n\t\tdescription: 'Sign the message',\n\t\tsignature: '( string $msg , string $secretkey ): string'\n\t},\n\tsodium_crypto_sign_ed25519_pk_to_curve25519: {\n\t\tdescription: 'Convert an Ed25519 public key to a Curve25519 public key',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_sign_ed25519_sk_to_curve25519: {\n\t\tdescription: 'Convert an Ed25519 secret key to a Curve25519 secret key',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_sign_keypair_from_secretkey_and_publickey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $secret_key , string $public_key ): string'\n\t},\n\tsodium_crypto_sign_keypair: {\n\t\tdescription: 'Randomly generate a secret key and a corresponding public key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_sign_open: {\n\t\tdescription: 'Check that the signed message has a valid signature',\n\t\tsignature: '( string $string , string $public_key ): string'\n\t},\n\tsodium_crypto_sign_publickey_from_secretkey: {\n\t\tdescription: 'Extract the public key from the secret key',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_sign_publickey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $keypair ): string'\n\t},\n\tsodium_crypto_sign_secretkey: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_sign_seed_keypair: {\n\t\tdescription: 'Deterministically derive the key pair from a single key',\n\t\tsignature: '( string $key ): string'\n\t},\n\tsodium_crypto_sign_verify_detached: {\n\t\tdescription: 'Verify signature for the message',\n\t\tsignature: '( string $signature , string $msg , string $public_key ): bool'\n\t},\n\tsodium_crypto_sign: {\n\t\tdescription: 'Sign a message',\n\t\tsignature: '( string $msg , string $secret_key ): string'\n\t},\n\tsodium_crypto_stream_keygen: {\n\t\tdescription: 'Get random bytes for key',\n\t\tsignature: '(void): string'\n\t},\n\tsodium_crypto_stream_xor: {\n\t\tdescription: 'Encrypt a message',\n\t\tsignature: '( string $msg , string $nonce , string $key ): string'\n\t},\n\tsodium_crypto_stream: {\n\t\tdescription: 'Generate a deterministic sequence of bytes from a seed',\n\t\tsignature: '( int $length , string $nonce , string $key ): string'\n\t},\n\tsodium_hex2bin: {\n\t\tdescription: 'Decodes a hexadecimally encoded binary string',\n\t\tsignature: '( string $hex [, string $ignore ]): string'\n\t},\n\tsodium_increment: {\n\t\tdescription: 'Increment large number',\n\t\tsignature: '( string $val ): void'\n\t},\n\tsodium_memcmp: {\n\t\tdescription: 'Test for equality in constant-time',\n\t\tsignature: '( string $buf1 , string $buf2 ): int'\n\t},\n\tsodium_memzero: {\n\t\tdescription: 'Overwrite buf with zeros',\n\t\tsignature: '( string $buf ): void'\n\t},\n\tsodium_pad: {\n\t\tdescription: 'Add padding data',\n\t\tsignature: '( string $unpadded , int $length ): string'\n\t},\n\tsodium_unpad: {\n\t\tdescription: 'Remove padding data',\n\t\tsignature: '( string $padded , int $length ): string'\n\t},\n\tdba_close: {\n\t\tdescription: 'Close a DBA database',\n\t\tsignature: '( resource $handle ): void'\n\t},\n\tdba_delete: {\n\t\tdescription: 'Delete DBA entry specified by key',\n\t\tsignature: '( string $key , resource $handle ): bool'\n\t},\n\tdba_exists: {\n\t\tdescription: 'Check whether key exists',\n\t\tsignature: '( string $key , resource $handle ): bool'\n\t},\n\tdba_fetch: {\n\t\tdescription: 'Fetch data specified by key',\n\t\tsignature: '( string $key , resource $handle , int $skip ): string'\n\t},\n\tdba_firstkey: {\n\t\tdescription: 'Fetch first key',\n\t\tsignature: '( resource $handle ): string'\n\t},\n\tdba_handlers: {\n\t\tdescription: 'List all the handlers available',\n\t\tsignature: '([ bool $full_info ]): array'\n\t},\n\tdba_insert: {\n\t\tdescription: 'Insert entry',\n\t\tsignature: '( string $key , string $value , resource $handle ): bool'\n\t},\n\tdba_key_split: {\n\t\tdescription: 'Splits a key in string representation into array representation',\n\t\tsignature: '( mixed $key ): mixed'\n\t},\n\tdba_list: {\n\t\tdescription: 'List all open database files',\n\t\tsignature: '(void): array'\n\t},\n\tdba_nextkey: {\n\t\tdescription: 'Fetch next key',\n\t\tsignature: '( resource $handle ): string'\n\t},\n\tdba_open: {\n\t\tdescription: 'Open database',\n\t\tsignature: '( string $path , string $mode [, string $handler [, mixed $... ]]): resource'\n\t},\n\tdba_optimize: {\n\t\tdescription: 'Optimize database',\n\t\tsignature: '( resource $handle ): bool'\n\t},\n\tdba_popen: {\n\t\tdescription: 'Open database persistently',\n\t\tsignature: '( string $path , string $mode [, string $handler [, mixed $... ]]): resource'\n\t},\n\tdba_replace: {\n\t\tdescription: 'Replace or insert entry',\n\t\tsignature: '( string $key , string $value , resource $handle ): bool'\n\t},\n\tdba_sync: {\n\t\tdescription: 'Synchronize database',\n\t\tsignature: '( resource $handle ): bool'\n\t},\n\tpdo_drivers: {\n\t\tdescription: 'Return an array of available PDO drivers',\n\t\tsignature: '(void): array'\n\t},\n\tcal_days_in_month: {\n\t\tdescription: 'Return the number of days in a month for a given year and calendar',\n\t\tsignature: '( int $calendar , int $month , int $year ): int'\n\t},\n\tcal_from_jd: {\n\t\tdescription: 'Converts from Julian Day Count to a supported calendar',\n\t\tsignature: '( int $jd , int $calendar ): array'\n\t},\n\tcal_info: {\n\t\tdescription: 'Returns information about a particular calendar',\n\t\tsignature: '([ int $calendar = -1 ]): array'\n\t},\n\tcal_to_jd: {\n\t\tdescription: 'Converts from a supported calendar to Julian Day Count',\n\t\tsignature: '( int $calendar , int $month , int $day , int $year ): int'\n\t},\n\teaster_date: {\n\t\tdescription: 'Get Unix timestamp for midnight on Easter of a given year',\n\t\tsignature: '([ int $year = date(\"Y\") ]): int'\n\t},\n\teaster_days: {\n\t\tdescription: 'Get number of days after March 21 on which Easter falls for a given year',\n\t\tsignature: '([ int $year = date(\"Y\") [, int $method = CAL_EASTER_DEFAULT ]]): int'\n\t},\n\tfrenchtojd: {\n\t\tdescription: 'Converts a date from the French Republican Calendar to a Julian Day Count',\n\t\tsignature: '( int $month , int $day , int $year ): int'\n\t},\n\tgregoriantojd: {\n\t\tdescription: 'Converts a Gregorian date to Julian Day Count',\n\t\tsignature: '( int $month , int $day , int $year ): int'\n\t},\n\tjddayofweek: {\n\t\tdescription: 'Returns the day of the week',\n\t\tsignature: '( int $julianday [, int $mode = CAL_DOW_DAYNO ]): mixed'\n\t},\n\tjdmonthname: {\n\t\tdescription: 'Returns a month name',\n\t\tsignature: '( int $julianday , int $mode ): string'\n\t},\n\tjdtofrench: {\n\t\tdescription: 'Converts a Julian Day Count to the French Republican Calendar',\n\t\tsignature: '( int $juliandaycount ): string'\n\t},\n\tjdtogregorian: {\n\t\tdescription: 'Converts Julian Day Count to Gregorian date',\n\t\tsignature: '( int $julianday ): string'\n\t},\n\tjdtojewish: {\n\t\tdescription: 'Converts a Julian day count to a Jewish calendar date',\n\t\tsignature: '( int $juliandaycount [, bool $hebrew [, int $fl = 0 ]]): string'\n\t},\n\tjdtojulian: {\n\t\tdescription: 'Converts a Julian Day Count to a Julian Calendar Date',\n\t\tsignature: '( int $julianday ): string'\n\t},\n\tjdtounix: {\n\t\tdescription: 'Convert Julian Day to Unix timestamp',\n\t\tsignature: '( int $jday ): int'\n\t},\n\tjewishtojd: {\n\t\tdescription: 'Converts a date in the Jewish Calendar to Julian Day Count',\n\t\tsignature: '( int $month , int $day , int $year ): int'\n\t},\n\tjuliantojd: {\n\t\tdescription: 'Converts a Julian Calendar date to Julian Day Count',\n\t\tsignature: '( int $month , int $day , int $year ): int'\n\t},\n\tunixtojd: {\n\t\tdescription: 'Convert Unix timestamp to Julian Day',\n\t\tsignature: '([ int $timestamp = time() ]): int'\n\t},\n\tdate_add: {\n\t\tdescription: 'Adds an amount of days, months, years, hours, minutes and seconds to a   DateTime object',\n\t\tsignature: '( DateInterval $interval , DateTime $object ): DateTime'\n\t},\n\tdate_create: {\n\t\tdescription: 'Returns new DateTime object',\n\t\tsignature: '([ string $time = \"now\" [, DateTimeZone $timezone ]]): DateTime'\n\t},\n\tdate_create_from_format: {\n\t\tdescription: 'Parses a time string according to a specified format',\n\t\tsignature: '( string $format , string $time [, DateTimeZone $timezone ]): DateTime'\n\t},\n\tdate_get_last_errors: {\n\t\tdescription: 'Returns the warnings and errors',\n\t\tsignature: '(void): array'\n\t},\n\tdate_modify: {\n\t\tdescription: 'Alters the timestamp',\n\t\tsignature: '( string $modify , DateTime $object ): DateTime'\n\t},\n\tdate_date_set: {\n\t\tdescription: 'Sets the date',\n\t\tsignature: '( int $year , int $month , int $day , DateTime $object ): DateTime'\n\t},\n\tdate_isodate_set: {\n\t\tdescription: 'Sets the ISO date',\n\t\tsignature: '( int $year , int $week [, int $day = 1 , DateTime $object ]): DateTime'\n\t},\n\tdate_time_set: {\n\t\tdescription: 'Sets the time',\n\t\tsignature: '( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 , DateTime $object ]]): DateTime'\n\t},\n\tdate_timestamp_set: {\n\t\tdescription: 'Sets the date and time based on an Unix timestamp',\n\t\tsignature: '( int $unixtimestamp , DateTime $object ): DateTime'\n\t},\n\tdate_timezone_set: {\n\t\tdescription: 'Sets the time zone for the DateTime object',\n\t\tsignature: '( DateTimeZone $timezone , DateTime $object ): object'\n\t},\n\tdate_sub: {\n\t\tdescription: 'Subtracts an amount of days, months, years, hours, minutes and seconds from   a DateTime object',\n\t\tsignature: '( DateInterval $interval , DateTime $object ): DateTime'\n\t},\n\tdate_create_immutable: {\n\t\tdescription: 'Returns new DateTimeImmutable object',\n\t\tsignature: '([ string $time = \"now\" [, DateTimeZone $timezone ]]): DateTimeImmutable'\n\t},\n\tdate_create_immutable_from_format: {\n\t\tdescription: 'Parses a time string according to a specified format',\n\t\tsignature: '( string $format , string $time [, DateTimeZone $timezone ]): DateTimeImmutable'\n\t},\n\tdate_diff: {\n\t\tdescription: 'Returns the difference between two DateTime objects',\n\t\tsignature: '( DateTimeInterface $datetime2 [, bool $absolute , DateTimeInterface $datetime1 ]): DateInterval'\n\t},\n\tdate_format: {\n\t\tdescription: 'Returns date formatted according to given format',\n\t\tsignature: '( string $format , DateTimeInterface $object ): string'\n\t},\n\tdate_offset_get: {\n\t\tdescription: 'Returns the timezone offset',\n\t\tsignature: '( DateTimeInterface $object ): int'\n\t},\n\tdate_timestamp_get: {\n\t\tdescription: 'Gets the Unix timestamp',\n\t\tsignature: '( DateTimeInterface $object ): int'\n\t},\n\tdate_timezone_get: {\n\t\tdescription: 'Return time zone relative to given DateTime',\n\t\tsignature: '( DateTimeInterface $object ): DateTimeZone'\n\t},\n\ttimezone_open: {\n\t\tdescription: 'Creates new DateTimeZone object',\n\t\tsignature: '( string $timezone ): DateTimeZone'\n\t},\n\ttimezone_location_get: {\n\t\tdescription: 'Returns location information for a timezone',\n\t\tsignature: '( DateTimeZone $object ): array'\n\t},\n\ttimezone_name_get: {\n\t\tdescription: 'Returns the name of the timezone',\n\t\tsignature: '( DateTimeZone $object ): string'\n\t},\n\ttimezone_offset_get: {\n\t\tdescription: 'Returns the timezone offset from GMT',\n\t\tsignature: '( DateTimeInterface $datetime , DateTimeZone $object ): int'\n\t},\n\ttimezone_transitions_get: {\n\t\tdescription: 'Returns all transitions for the timezone',\n\t\tsignature: '([ int $timestamp_begin [, int $timestamp_end , DateTimeZone $object ]]): array'\n\t},\n\ttimezone_abbreviations_list: {\n\t\tdescription: 'Returns associative array containing dst, offset and the timezone name',\n\t\tsignature: '(void): array'\n\t},\n\ttimezone_identifiers_list: {\n\t\tdescription: 'Returns a numerically indexed array containing all defined timezone identifiers',\n\t\tsignature: '([ int $what = DateTimeZone::ALL [, string $country ]]): array'\n\t},\n\tcheckdate: {\n\t\tdescription: 'Validate a Gregorian date',\n\t\tsignature: '( int $month , int $day , int $year ): bool'\n\t},\n\tdate_default_timezone_get: {\n\t\tdescription: 'Gets the default timezone used by all date/time functions in a script',\n\t\tsignature: '(void): string'\n\t},\n\tdate_default_timezone_set: {\n\t\tdescription: 'Sets the default timezone used by all date/time functions in a script',\n\t\tsignature: '( string $timezone_identifier ): bool'\n\t},\n\tdate_interval_create_from_date_string: {\n\t\tdescription: 'Alias of DateInterval::createFromDateString',\n\t},\n\tdate_interval_format: {\n\t\tdescription: 'Alias of DateInterval::format',\n\t},\n\tdate_parse_from_format: {\n\t\tdescription: 'Get info about given date formatted according to the specified format',\n\t\tsignature: '( string $format , string $date ): array'\n\t},\n\tdate_parse: {\n\t\tdescription: 'Returns associative array with detailed info about given date',\n\t\tsignature: '( string $date ): array'\n\t},\n\tdate_sun_info: {\n\t\tdescription: 'Returns an array with information about sunset/sunrise and twilight begin/end',\n\t\tsignature: '( int $time , float $latitude , float $longitude ): array'\n\t},\n\tdate_sunrise: {\n\t\tdescription: 'Returns time of sunrise for a given day and location',\n\t\tsignature: '( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunrise_zenith\") [, float $gmt_offset = 0 ]]]]]): mixed'\n\t},\n\tdate_sunset: {\n\t\tdescription: 'Returns time of sunset for a given day and location',\n\t\tsignature: '( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunset_zenith\") [, float $gmt_offset = 0 ]]]]]): mixed'\n\t},\n\tdate: {\n\t\tdescription: 'Format a local time/date',\n\t\tsignature: '( string $format [, int $timestamp = time() ]): string'\n\t},\n\tgetdate: {\n\t\tdescription: 'Get date/time information',\n\t\tsignature: '([ int $timestamp = time() ]): array'\n\t},\n\tgettimeofday: {\n\t\tdescription: 'Get current time',\n\t\tsignature: '([ bool $return_float ]): mixed'\n\t},\n\tgmdate: {\n\t\tdescription: 'Format a GMT/UTC date/time',\n\t\tsignature: '( string $format [, int $timestamp = time() ]): string'\n\t},\n\tgmmktime: {\n\t\tdescription: 'Get Unix timestamp for a GMT date',\n\t\tsignature: '([ int $hour = gmdate(\"H\") [, int $minute = gmdate(\"i\") [, int $second = gmdate(\"s\") [, int $month = gmdate(\"n\") [, int $day = gmdate(\"j\") [, int $year = gmdate(\"Y\") [, int $is_dst = -1 ]]]]]]]): int'\n\t},\n\tgmstrftime: {\n\t\tdescription: 'Format a GMT/UTC time/date according to locale settings',\n\t\tsignature: '( string $format [, int $timestamp = time() ]): string'\n\t},\n\tidate: {\n\t\tdescription: 'Format a local time/date as integer',\n\t\tsignature: '( string $format [, int $timestamp = time() ]): int'\n\t},\n\tlocaltime: {\n\t\tdescription: 'Get the local time',\n\t\tsignature: '([ int $timestamp = time() [, bool $is_associative ]]): array'\n\t},\n\tmicrotime: {\n\t\tdescription: 'Return current Unix timestamp with microseconds',\n\t\tsignature: '([ bool $get_as_float ]): mixed'\n\t},\n\tmktime: {\n\t\tdescription: 'Get Unix timestamp for a date',\n\t\tsignature: '([ int $hour = date(\"H\") [, int $minute = date(\"i\") [, int $second = date(\"s\") [, int $month = date(\"n\") [, int $day = date(\"j\") [, int $year = date(\"Y\") [, int $is_dst = -1 ]]]]]]]): int'\n\t},\n\tstrftime: {\n\t\tdescription: 'Format a local time/date according to locale settings',\n\t\tsignature: '( string $format [, int $timestamp = time() ]): string'\n\t},\n\tstrptime: {\n\t\tdescription: 'Parse a time/date generated with strftime',\n\t\tsignature: '( string $date , string $format ): array'\n\t},\n\tstrtotime: {\n\t\tdescription: 'Parse about any English textual datetime description into a Unix timestamp',\n\t\tsignature: '( string $time [, int $now = time() ]): int'\n\t},\n\ttime: {\n\t\tdescription: 'Return current Unix timestamp',\n\t\tsignature: '(void): int'\n\t},\n\ttimezone_name_from_abbr: {\n\t\tdescription: 'Returns the timezone name from abbreviation',\n\t\tsignature: '( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]]): string'\n\t},\n\ttimezone_version_get: {\n\t\tdescription: 'Gets the version of the timezonedb',\n\t\tsignature: '(void): string'\n\t},\n\tchdir: {\n\t\tdescription: 'Change directory',\n\t\tsignature: '( string $directory ): bool'\n\t},\n\tchroot: {\n\t\tdescription: 'Change the root directory',\n\t\tsignature: '( string $directory ): bool'\n\t},\n\tclosedir: {\n\t\tdescription: 'Close directory handle',\n\t\tsignature: '([ resource $dir_handle ]): void'\n\t},\n\tdir: {\n\t\tdescription: 'Return an instance of the Directory class',\n\t\tsignature: '( string $directory [, resource $context ]): Directory'\n\t},\n\tgetcwd: {\n\t\tdescription: 'Gets the current working directory',\n\t\tsignature: '(void): string'\n\t},\n\topendir: {\n\t\tdescription: 'Open directory handle',\n\t\tsignature: '( string $path [, resource $context ]): resource'\n\t},\n\treaddir: {\n\t\tdescription: 'Read entry from directory handle',\n\t\tsignature: '([ resource $dir_handle ]): string'\n\t},\n\trewinddir: {\n\t\tdescription: 'Rewind directory handle',\n\t\tsignature: '([ resource $dir_handle ]): void'\n\t},\n\tscandir: {\n\t\tdescription: 'List files and directories inside the specified path',\n\t\tsignature: '( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]]): array'\n\t},\n\tfinfo_buffer: {\n\t\tdescription: 'Return information about a string buffer',\n\t\tsignature: '( resource $finfo , string $string [, int $options = FILEINFO_NONE [, resource $context ]]): string'\n\t},\n\tfinfo_close: {\n\t\tdescription: 'Close fileinfo resource',\n\t\tsignature: '( resource $finfo ): bool'\n\t},\n\tfinfo_file: {\n\t\tdescription: 'Return information about a file',\n\t\tsignature: '( resource $finfo , string $file_name [, int $options = FILEINFO_NONE [, resource $context ]]): string'\n\t},\n\tfinfo_open: {\n\t\tdescription: 'Create a new fileinfo resource',\n\t\tsignature: '([ int $options = FILEINFO_NONE [, string $magic_file ]]): resource'\n\t},\n\tfinfo_set_flags: {\n\t\tdescription: 'Set libmagic configuration options',\n\t\tsignature: '( resource $finfo , int $options ): bool'\n\t},\n\tmime_content_type: {\n\t\tdescription: 'Detect MIME Content-type for a file',\n\t\tsignature: '( string $filename ): string'\n\t},\n\tbasename: {\n\t\tdescription: 'Returns trailing name component of path',\n\t\tsignature: '( string $path [, string $suffix ]): string'\n\t},\n\tchgrp: {\n\t\tdescription: 'Changes file group',\n\t\tsignature: '( string $filename , mixed $group ): bool'\n\t},\n\tchmod: {\n\t\tdescription: 'Changes file mode',\n\t\tsignature: '( string $filename , int $mode ): bool'\n\t},\n\tchown: {\n\t\tdescription: 'Changes file owner',\n\t\tsignature: '( string $filename , mixed $user ): bool'\n\t},\n\tclearstatcache: {\n\t\tdescription: 'Clears file status cache',\n\t\tsignature: '([ bool $clear_realpath_cache [, string $filename ]]): void'\n\t},\n\tcopy: {\n\t\tdescription: 'Copies file',\n\t\tsignature: '( string $source , string $dest [, resource $context ]): bool'\n\t},\n\tdelete: {\n\t\tdescription: 'See unlink or unset',\n\t},\n\tdirname: {\n\t\tdescription: 'Returns a parent directory\\'s path',\n\t\tsignature: '( string $path [, int $levels = 1 ]): string'\n\t},\n\tdisk_free_space: {\n\t\tdescription: 'Returns available space on filesystem or disk partition',\n\t\tsignature: '( string $directory ): float'\n\t},\n\tdisk_total_space: {\n\t\tdescription: 'Returns the total size of a filesystem or disk partition',\n\t\tsignature: '( string $directory ): float'\n\t},\n\tdiskfreespace: {\n\t\tdescription: 'Alias of disk_free_space',\n\t},\n\tfclose: {\n\t\tdescription: 'Closes an open file pointer',\n\t\tsignature: '( resource $handle ): bool'\n\t},\n\tfeof: {\n\t\tdescription: 'Tests for end-of-file on a file pointer',\n\t\tsignature: '( resource $handle ): bool'\n\t},\n\tfflush: {\n\t\tdescription: 'Flushes the output to a file',\n\t\tsignature: '( resource $handle ): bool'\n\t},\n\tfgetc: {\n\t\tdescription: 'Gets character from file pointer',\n\t\tsignature: '( resource $handle ): string'\n\t},\n\tfgetcsv: {\n\t\tdescription: 'Gets line from file pointer and parse for CSV fields',\n\t\tsignature: '( resource $handle [, int $length = 0 [, string $delimiter = \",\" [, string $enclosure = \\'\"\\' [, string $escape = \"\\\\\" ]]]]): array'\n\t},\n\tfgets: {\n\t\tdescription: 'Gets line from file pointer',\n\t\tsignature: '( resource $handle [, int $length ]): string'\n\t},\n\tfgetss: {\n\t\tdescription: 'Gets line from file pointer and strip HTML tags',\n\t\tsignature: '( resource $handle [, int $length [, string $allowable_tags ]]): string'\n\t},\n\tfile_exists: {\n\t\tdescription: 'Checks whether a file or directory exists',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tfile_get_contents: {\n\t\tdescription: 'Reads entire file into a string',\n\t\tsignature: '( string $filename [, bool $use_include_path [, resource $context [, int $offset = 0 [, int $maxlen ]]]]): string'\n\t},\n\tfile_put_contents: {\n\t\tdescription: 'Write data to a file',\n\t\tsignature: '( string $filename , mixed $data [, int $flags = 0 [, resource $context ]]): int'\n\t},\n\tfile: {\n\t\tdescription: 'Reads entire file into an array',\n\t\tsignature: '( string $filename [, int $flags = 0 [, resource $context ]]): array'\n\t},\n\tfileatime: {\n\t\tdescription: 'Gets last access time of file',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfilectime: {\n\t\tdescription: 'Gets inode change time of file',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfilegroup: {\n\t\tdescription: 'Gets file group',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfileinode: {\n\t\tdescription: 'Gets file inode',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfilemtime: {\n\t\tdescription: 'Gets file modification time',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfileowner: {\n\t\tdescription: 'Gets file owner',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfileperms: {\n\t\tdescription: 'Gets file permissions',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfilesize: {\n\t\tdescription: 'Gets file size',\n\t\tsignature: '( string $filename ): int'\n\t},\n\tfiletype: {\n\t\tdescription: 'Gets file type',\n\t\tsignature: '( string $filename ): string'\n\t},\n\tflock: {\n\t\tdescription: 'Portable advisory file locking',\n\t\tsignature: '( resource $handle , int $operation [, int $wouldblock ]): bool'\n\t},\n\tfnmatch: {\n\t\tdescription: 'Match filename against a pattern',\n\t\tsignature: '( string $pattern , string $string [, int $flags = 0 ]): bool'\n\t},\n\tfopen: {\n\t\tdescription: 'Opens file or URL',\n\t\tsignature: '( string $filename , string $mode [, bool $use_include_path [, resource $context ]]): resource'\n\t},\n\tfpassthru: {\n\t\tdescription: 'Output all remaining data on a file pointer',\n\t\tsignature: '( resource $handle ): int'\n\t},\n\tfputcsv: {\n\t\tdescription: 'Format line as CSV and write to file pointer',\n\t\tsignature: '( resource $handle , array $fields [, string $delimiter = \",\" [, string $enclosure = \\'\"\\' [, string $escape_char = \"\\\\\" ]]]): int'\n\t},\n\tfputs: {\n\t\tdescription: 'Alias of fwrite',\n\t},\n\tfread: {\n\t\tdescription: 'Binary-safe file read',\n\t\tsignature: '( resource $handle , int $length ): string'\n\t},\n\tfscanf: {\n\t\tdescription: 'Parses input from a file according to a format',\n\t\tsignature: '( resource $handle , string $format [, mixed $... ]): mixed'\n\t},\n\tfseek: {\n\t\tdescription: 'Seeks on a file pointer',\n\t\tsignature: '( resource $handle , int $offset [, int $whence = SEEK_SET ]): int'\n\t},\n\tfstat: {\n\t\tdescription: 'Gets information about a file using an open file pointer',\n\t\tsignature: '( resource $handle ): array'\n\t},\n\tftell: {\n\t\tdescription: 'Returns the current position of the file read/write pointer',\n\t\tsignature: '( resource $handle ): int'\n\t},\n\tftruncate: {\n\t\tdescription: 'Truncates a file to a given length',\n\t\tsignature: '( resource $handle , int $size ): bool'\n\t},\n\tfwrite: {\n\t\tdescription: 'Binary-safe file write',\n\t\tsignature: '( resource $handle , string $string [, int $length ]): int'\n\t},\n\tglob: {\n\t\tdescription: 'Find pathnames matching a pattern',\n\t\tsignature: '( string $pattern [, int $flags = 0 ]): array'\n\t},\n\tis_dir: {\n\t\tdescription: 'Tells whether the filename is a directory',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tis_executable: {\n\t\tdescription: 'Tells whether the filename is executable',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tis_file: {\n\t\tdescription: 'Tells whether the filename is a regular file',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tis_link: {\n\t\tdescription: 'Tells whether the filename is a symbolic link',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tis_readable: {\n\t\tdescription: 'Tells whether a file exists and is readable',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tis_uploaded_file: {\n\t\tdescription: 'Tells whether the file was uploaded via HTTP POST',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tis_writable: {\n\t\tdescription: 'Tells whether the filename is writable',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tis_writeable: {\n\t\tdescription: 'Alias of is_writable',\n\t},\n\tlchgrp: {\n\t\tdescription: 'Changes group ownership of symlink',\n\t\tsignature: '( string $filename , mixed $group ): bool'\n\t},\n\tlchown: {\n\t\tdescription: 'Changes user ownership of symlink',\n\t\tsignature: '( string $filename , mixed $user ): bool'\n\t},\n\tlink: {\n\t\tdescription: 'Create a hard link',\n\t\tsignature: '( string $target , string $link ): bool'\n\t},\n\tlinkinfo: {\n\t\tdescription: 'Gets information about a link',\n\t\tsignature: '( string $path ): int'\n\t},\n\tlstat: {\n\t\tdescription: 'Gives information about a file or symbolic link',\n\t\tsignature: '( string $filename ): array'\n\t},\n\tmkdir: {\n\t\tdescription: 'Makes directory',\n\t\tsignature: '( string $pathname [, int $mode = 0777 [, bool $recursive [, resource $context ]]]): bool'\n\t},\n\tmove_uploaded_file: {\n\t\tdescription: 'Moves an uploaded file to a new location',\n\t\tsignature: '( string $filename , string $destination ): bool'\n\t},\n\tparse_ini_file: {\n\t\tdescription: 'Parse a configuration file',\n\t\tsignature: '( string $filename [, bool $process_sections [, int $scanner_mode = INI_SCANNER_NORMAL ]]): array'\n\t},\n\tparse_ini_string: {\n\t\tdescription: 'Parse a configuration string',\n\t\tsignature: '( string $ini [, bool $process_sections [, int $scanner_mode = INI_SCANNER_NORMAL ]]): array'\n\t},\n\tpathinfo: {\n\t\tdescription: 'Returns information about a file path',\n\t\tsignature: '( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ]): mixed'\n\t},\n\tpclose: {\n\t\tdescription: 'Closes process file pointer',\n\t\tsignature: '( resource $handle ): int'\n\t},\n\tpopen: {\n\t\tdescription: 'Opens process file pointer',\n\t\tsignature: '( string $command , string $mode ): resource'\n\t},\n\treadfile: {\n\t\tdescription: 'Outputs a file',\n\t\tsignature: '( string $filename [, bool $use_include_path [, resource $context ]]): int'\n\t},\n\treadlink: {\n\t\tdescription: 'Returns the target of a symbolic link',\n\t\tsignature: '( string $path ): string'\n\t},\n\trealpath_cache_get: {\n\t\tdescription: 'Get realpath cache entries',\n\t\tsignature: '(void): array'\n\t},\n\trealpath_cache_size: {\n\t\tdescription: 'Get realpath cache size',\n\t\tsignature: '(void): int'\n\t},\n\trealpath: {\n\t\tdescription: 'Returns canonicalized absolute pathname',\n\t\tsignature: '( string $path ): string'\n\t},\n\trename: {\n\t\tdescription: 'Renames a file or directory',\n\t\tsignature: '( string $oldname , string $newname [, resource $context ]): bool'\n\t},\n\trewind: {\n\t\tdescription: 'Rewind the position of a file pointer',\n\t\tsignature: '( resource $handle ): bool'\n\t},\n\trmdir: {\n\t\tdescription: 'Removes directory',\n\t\tsignature: '( string $dirname [, resource $context ]): bool'\n\t},\n\tset_file_buffer: {\n\t\tdescription: 'Alias of stream_set_write_buffer',\n\t},\n\tstat: {\n\t\tdescription: 'Gives information about a file',\n\t\tsignature: '( string $filename ): array'\n\t},\n\tsymlink: {\n\t\tdescription: 'Creates a symbolic link',\n\t\tsignature: '( string $target , string $link ): bool'\n\t},\n\ttempnam: {\n\t\tdescription: 'Create file with unique file name',\n\t\tsignature: '( string $dir , string $prefix ): string'\n\t},\n\ttmpfile: {\n\t\tdescription: 'Creates a temporary file',\n\t\tsignature: '(void): resource'\n\t},\n\ttouch: {\n\t\tdescription: 'Sets access and modification time of file',\n\t\tsignature: '( string $filename [, int $time = time() [, int $atime ]]): bool'\n\t},\n\tumask: {\n\t\tdescription: 'Changes the current umask',\n\t\tsignature: '([ int $mask ]): int'\n\t},\n\tunlink: {\n\t\tdescription: 'Deletes a file',\n\t\tsignature: '( string $filename [, resource $context ]): bool'\n\t},\n\ticonv_get_encoding: {\n\t\tdescription: 'Retrieve internal configuration variables of iconv extension',\n\t\tsignature: '([ string $type = \"all\" ]): mixed'\n\t},\n\ticonv_mime_decode_headers: {\n\t\tdescription: 'Decodes multiple MIME header fields at once',\n\t\tsignature: '( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]]): array'\n\t},\n\ticonv_mime_decode: {\n\t\tdescription: 'Decodes a MIME header field',\n\t\tsignature: '( string $encoded_header [, int $mode = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]]): string'\n\t},\n\ticonv_mime_encode: {\n\t\tdescription: 'Composes a MIME header field',\n\t\tsignature: '( string $field_name , string $field_value [, array $preferences ]): string'\n\t},\n\ticonv_set_encoding: {\n\t\tdescription: 'Set current setting for character encoding conversion',\n\t\tsignature: '( string $type , string $charset ): bool'\n\t},\n\ticonv_strlen: {\n\t\tdescription: 'Returns the character count of string',\n\t\tsignature: '( string $str [, string $charset = ini_get(\"iconv.internal_encoding\") ]): int'\n\t},\n\ticonv_strpos: {\n\t\tdescription: 'Finds position of first occurrence of a needle within a haystack',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]]): int'\n\t},\n\ticonv_strrpos: {\n\t\tdescription: 'Finds the last occurrence of a needle within a haystack',\n\t\tsignature: '( string $haystack , string $needle [, string $charset = ini_get(\"iconv.internal_encoding\") ]): int'\n\t},\n\ticonv_substr: {\n\t\tdescription: 'Cut out part of a string',\n\t\tsignature: '( string $str , int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get(\"iconv.internal_encoding\") ]]): string'\n\t},\n\ticonv: {\n\t\tdescription: 'Convert string to requested character encoding',\n\t\tsignature: '( string $in_charset , string $out_charset , string $str ): string'\n\t},\n\tob_iconv_handler: {\n\t\tdescription: 'Convert character encoding as output buffer handler',\n\t\tsignature: '( string $contents , int $status ): string'\n\t},\n\tcollator_asort: {\n\t\tdescription: 'Sort array maintaining index association',\n\t\tsignature: '( array $arr [, int $sort_flag , Collator $coll ]): bool'\n\t},\n\tcollator_compare: {\n\t\tdescription: 'Compare two Unicode strings',\n\t\tsignature: '( string $str1 , string $str2 , Collator $coll ): int'\n\t},\n\tcollator_create: {\n\t\tdescription: 'Create a collator',\n\t\tsignature: '( string $locale ): Collator'\n\t},\n\tcollator_get_attribute: {\n\t\tdescription: 'Get collation attribute value',\n\t\tsignature: '( int $attr , Collator $coll ): int'\n\t},\n\tcollator_get_error_code: {\n\t\tdescription: 'Get collator\\'s last error code',\n\t\tsignature: '( Collator $coll ): int'\n\t},\n\tcollator_get_error_message: {\n\t\tdescription: 'Get text for collator\\'s last error code',\n\t\tsignature: '( Collator $coll ): string'\n\t},\n\tcollator_get_locale: {\n\t\tdescription: 'Get the locale name of the collator',\n\t\tsignature: '( int $type , Collator $coll ): string'\n\t},\n\tcollator_get_sort_key: {\n\t\tdescription: 'Get sorting key for a string',\n\t\tsignature: '( string $str , Collator $coll ): string'\n\t},\n\tcollator_get_strength: {\n\t\tdescription: 'Get current collation strength',\n\t\tsignature: '( Collator $coll ): int'\n\t},\n\tcollator_set_attribute: {\n\t\tdescription: 'Set collation attribute',\n\t\tsignature: '( int $attr , int $val , Collator $coll ): bool'\n\t},\n\tcollator_set_strength: {\n\t\tdescription: 'Set collation strength',\n\t\tsignature: '( int $strength , Collator $coll ): bool'\n\t},\n\tcollator_sort_with_sort_keys: {\n\t\tdescription: 'Sort array using specified collator and sort keys',\n\t\tsignature: '( array $arr , Collator $coll ): bool'\n\t},\n\tcollator_sort: {\n\t\tdescription: 'Sort array using specified collator',\n\t\tsignature: '( array $arr [, int $sort_flag , Collator $coll ]): bool'\n\t},\n\tnumfmt_create: {\n\t\tdescription: 'Create a number formatter',\n\t\tsignature: '( string $locale , int $style [, string $pattern ]): NumberFormatter'\n\t},\n\tnumfmt_format_currency: {\n\t\tdescription: 'Format a currency value',\n\t\tsignature: '( float $value , string $currency , NumberFormatter $fmt ): string'\n\t},\n\tnumfmt_format: {\n\t\tdescription: 'Format a number',\n\t\tsignature: '( number $value [, int $type , NumberFormatter $fmt ]): string'\n\t},\n\tnumfmt_get_attribute: {\n\t\tdescription: 'Get an attribute',\n\t\tsignature: '( int $attr , NumberFormatter $fmt ): int'\n\t},\n\tnumfmt_get_error_code: {\n\t\tdescription: 'Get formatter\\'s last error code',\n\t\tsignature: '( NumberFormatter $fmt ): int'\n\t},\n\tnumfmt_get_error_message: {\n\t\tdescription: 'Get formatter\\'s last error message',\n\t\tsignature: '( NumberFormatter $fmt ): string'\n\t},\n\tnumfmt_get_locale: {\n\t\tdescription: 'Get formatter locale',\n\t\tsignature: '([ int $type , NumberFormatter $fmt ]): string'\n\t},\n\tnumfmt_get_pattern: {\n\t\tdescription: 'Get formatter pattern',\n\t\tsignature: '( NumberFormatter $fmt ): string'\n\t},\n\tnumfmt_get_symbol: {\n\t\tdescription: 'Get a symbol value',\n\t\tsignature: '( int $attr , NumberFormatter $fmt ): string'\n\t},\n\tnumfmt_get_text_attribute: {\n\t\tdescription: 'Get a text attribute',\n\t\tsignature: '( int $attr , NumberFormatter $fmt ): string'\n\t},\n\tnumfmt_parse_currency: {\n\t\tdescription: 'Parse a currency number',\n\t\tsignature: '( string $value , string $currency [, int $position , NumberFormatter $fmt ]): float'\n\t},\n\tnumfmt_parse: {\n\t\tdescription: 'Parse a number',\n\t\tsignature: '( string $value [, int $type [, int $position , NumberFormatter $fmt ]]): mixed'\n\t},\n\tnumfmt_set_attribute: {\n\t\tdescription: 'Set an attribute',\n\t\tsignature: '( int $attr , int $value , NumberFormatter $fmt ): bool'\n\t},\n\tnumfmt_set_pattern: {\n\t\tdescription: 'Set formatter pattern',\n\t\tsignature: '( string $pattern , NumberFormatter $fmt ): bool'\n\t},\n\tnumfmt_set_symbol: {\n\t\tdescription: 'Set a symbol value',\n\t\tsignature: '( int $attr , string $value , NumberFormatter $fmt ): bool'\n\t},\n\tnumfmt_set_text_attribute: {\n\t\tdescription: 'Set a text attribute',\n\t\tsignature: '( int $attr , string $value , NumberFormatter $fmt ): bool'\n\t},\n\tlocale_accept_from_http: {\n\t\tdescription: 'Tries to find out best available locale based on HTTP \"Accept-Language\" header',\n\t\tsignature: '( string $header ): string'\n\t},\n\tlocale_canonicalize: {\n\t\tdescription: 'Canonicalize the locale string',\n\t\tsignature: '( string $locale ): string'\n\t},\n\tlocale_compose: {\n\t\tdescription: 'Returns a correctly ordered and delimited locale ID',\n\t\tsignature: '( array $subtags ): string'\n\t},\n\tlocale_filter_matches: {\n\t\tdescription: 'Checks if a language tag filter matches with locale',\n\t\tsignature: '( string $langtag , string $locale [, bool $canonicalize ]): bool'\n\t},\n\tlocale_get_all_variants: {\n\t\tdescription: 'Gets the variants for the input locale',\n\t\tsignature: '( string $locale ): array'\n\t},\n\tlocale_get_default: {\n\t\tdescription: 'Gets the default locale value from the INTL global \\'default_locale\\'',\n\t\tsignature: '(void): string'\n\t},\n\tlocale_get_display_language: {\n\t\tdescription: 'Returns an appropriately localized display name for language of the inputlocale',\n\t\tsignature: '( string $locale [, string $in_locale ]): string'\n\t},\n\tlocale_get_display_name: {\n\t\tdescription: 'Returns an appropriately localized display name for the input locale',\n\t\tsignature: '( string $locale [, string $in_locale ]): string'\n\t},\n\tlocale_get_display_region: {\n\t\tdescription: 'Returns an appropriately localized display name for region of the input locale',\n\t\tsignature: '( string $locale [, string $in_locale ]): string'\n\t},\n\tlocale_get_display_script: {\n\t\tdescription: 'Returns an appropriately localized display name for script of the input locale',\n\t\tsignature: '( string $locale [, string $in_locale ]): string'\n\t},\n\tlocale_get_display_variant: {\n\t\tdescription: 'Returns an appropriately localized display name for variants of the input locale',\n\t\tsignature: '( string $locale [, string $in_locale ]): string'\n\t},\n\tlocale_get_keywords: {\n\t\tdescription: 'Gets the keywords for the input locale',\n\t\tsignature: '( string $locale ): array'\n\t},\n\tlocale_get_primary_language: {\n\t\tdescription: 'Gets the primary language for the input locale',\n\t\tsignature: '( string $locale ): string'\n\t},\n\tlocale_get_region: {\n\t\tdescription: 'Gets the region for the input locale',\n\t\tsignature: '( string $locale ): string'\n\t},\n\tlocale_get_script: {\n\t\tdescription: 'Gets the script for the input locale',\n\t\tsignature: '( string $locale ): string'\n\t},\n\tlocale_lookup: {\n\t\tdescription: 'Searches the language tag list for the best match to the language',\n\t\tsignature: '( array $langtag , string $locale [, bool $canonicalize [, string $default ]]): string'\n\t},\n\tlocale_parse: {\n\t\tdescription: 'Returns a key-value array of locale ID subtag elements',\n\t\tsignature: '( string $locale ): array'\n\t},\n\tlocale_set_default: {\n\t\tdescription: 'Sets the default runtime locale',\n\t\tsignature: '( string $locale ): bool'\n\t},\n\tnormalizer_get_raw_decomposition: {\n\t\tdescription: 'Gets the Decomposition_Mapping property for the given UTF-8 encoded code point',\n\t\tsignature: '( string $input ): string'\n\t},\n\tnormalizer_is_normalized: {\n\t\tdescription: 'Checks if the provided string is already in the specified normalization   form',\n\t\tsignature: '( string $input [, int $form = Normalizer::FORM_C ]): bool'\n\t},\n\tnormalizer_normalize: {\n\t\tdescription: 'Normalizes the input provided and returns the normalized string',\n\t\tsignature: '( string $input [, int $form = Normalizer::FORM_C ]): string'\n\t},\n\tmsgfmt_create: {\n\t\tdescription: 'Constructs a new Message Formatter',\n\t\tsignature: '( string $locale , string $pattern ): MessageFormatter'\n\t},\n\tmsgfmt_format_message: {\n\t\tdescription: 'Quick format message',\n\t\tsignature: '( string $locale , string $pattern , array $args ): string'\n\t},\n\tmsgfmt_format: {\n\t\tdescription: 'Format the message',\n\t\tsignature: '( array $args , MessageFormatter $fmt ): string'\n\t},\n\tmsgfmt_get_error_code: {\n\t\tdescription: 'Get the error code from last operation',\n\t\tsignature: '( MessageFormatter $fmt ): int'\n\t},\n\tmsgfmt_get_error_message: {\n\t\tdescription: 'Get the error text from the last operation',\n\t\tsignature: '( MessageFormatter $fmt ): string'\n\t},\n\tmsgfmt_get_locale: {\n\t\tdescription: 'Get the locale for which the formatter was created',\n\t\tsignature: '( NumberFormatter $formatter ): string'\n\t},\n\tmsgfmt_get_pattern: {\n\t\tdescription: 'Get the pattern used by the formatter',\n\t\tsignature: '( MessageFormatter $fmt ): string'\n\t},\n\tmsgfmt_parse_message: {\n\t\tdescription: 'Quick parse input string',\n\t\tsignature: '( string $locale , string $pattern , string $source , string $value ): array'\n\t},\n\tmsgfmt_parse: {\n\t\tdescription: 'Parse input string according to pattern',\n\t\tsignature: '( string $value , MessageFormatter $fmt ): array'\n\t},\n\tmsgfmt_set_pattern: {\n\t\tdescription: 'Set the pattern used by the formatter',\n\t\tsignature: '( string $pattern , MessageFormatter $fmt ): bool'\n\t},\n\tintlcal_get_error_code: {\n\t\tdescription: 'Get last error code on the object',\n\t\tsignature: '( IntlCalendar $calendar ): int'\n\t},\n\tintlcal_get_error_message: {\n\t\tdescription: 'Get last error message on the object',\n\t\tsignature: '( IntlCalendar $calendar ): string'\n\t},\n\tintltz_get_error_code: {\n\t\tdescription: 'Get last error code on the object',\n\t\tsignature: '(void): int'\n\t},\n\tintltz_get_error_message: {\n\t\tdescription: 'Get last error message on the object',\n\t\tsignature: '(void): string'\n\t},\n\tdatefmt_create: {\n\t\tdescription: 'Create a date formatter',\n\t\tsignature: '( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = \"\" ]]]): IntlDateFormatter'\n\t},\n\tdatefmt_format: {\n\t\tdescription: 'Format the date/time value as a string',\n\t\tsignature: '( mixed $value , IntlDateFormatter $fmt ): string'\n\t},\n\tdatefmt_format_object: {\n\t\tdescription: 'Formats an object',\n\t\tsignature: '( object $object [, mixed $format = NULL [, string $locale = NULL ]]): string'\n\t},\n\tdatefmt_get_calendar: {\n\t\tdescription: 'Get the calendar type used for the IntlDateFormatter',\n\t\tsignature: '( IntlDateFormatter $fmt ): int'\n\t},\n\tdatefmt_get_datetype: {\n\t\tdescription: 'Get the datetype used for the IntlDateFormatter',\n\t\tsignature: '( IntlDateFormatter $fmt ): int'\n\t},\n\tdatefmt_get_error_code: {\n\t\tdescription: 'Get the error code from last operation',\n\t\tsignature: '( IntlDateFormatter $fmt ): int'\n\t},\n\tdatefmt_get_error_message: {\n\t\tdescription: 'Get the error text from the last operation',\n\t\tsignature: '( IntlDateFormatter $fmt ): string'\n\t},\n\tdatefmt_get_locale: {\n\t\tdescription: 'Get the locale used by formatter',\n\t\tsignature: '([ int $which , IntlDateFormatter $fmt ]): string'\n\t},\n\tdatefmt_get_pattern: {\n\t\tdescription: 'Get the pattern used for the IntlDateFormatter',\n\t\tsignature: '( IntlDateFormatter $fmt ): string'\n\t},\n\tdatefmt_get_timetype: {\n\t\tdescription: 'Get the timetype used for the IntlDateFormatter',\n\t\tsignature: '( IntlDateFormatter $fmt ): int'\n\t},\n\tdatefmt_get_timezone_id: {\n\t\tdescription: 'Get the timezone-id used for the IntlDateFormatter',\n\t\tsignature: '( IntlDateFormatter $fmt ): string'\n\t},\n\tdatefmt_get_calendar_object: {\n\t\tdescription: 'Get copy of formatterʼs calendar object',\n\t\tsignature: '(void): IntlCalendar'\n\t},\n\tdatefmt_get_timezone: {\n\t\tdescription: 'Get formatterʼs timezone',\n\t\tsignature: '(void): IntlTimeZone'\n\t},\n\tdatefmt_is_lenient: {\n\t\tdescription: 'Get the lenient used for the IntlDateFormatter',\n\t\tsignature: '( IntlDateFormatter $fmt ): bool'\n\t},\n\tdatefmt_localtime: {\n\t\tdescription: 'Parse string to a field-based time value',\n\t\tsignature: '( string $value [, int $position , IntlDateFormatter $fmt ]): array'\n\t},\n\tdatefmt_parse: {\n\t\tdescription: 'Parse string to a timestamp value',\n\t\tsignature: '( string $value [, int $position , IntlDateFormatter $fmt ]): int'\n\t},\n\tdatefmt_set_calendar: {\n\t\tdescription: 'Sets the calendar type used by the formatter',\n\t\tsignature: '( mixed $which , IntlDateFormatter $fmt ): bool'\n\t},\n\tdatefmt_set_lenient: {\n\t\tdescription: 'Set the leniency of the parser',\n\t\tsignature: '( bool $lenient , IntlDateFormatter $fmt ): bool'\n\t},\n\tdatefmt_set_pattern: {\n\t\tdescription: 'Set the pattern used for the IntlDateFormatter',\n\t\tsignature: '( string $pattern , IntlDateFormatter $fmt ): bool'\n\t},\n\tdatefmt_set_timezone_id: {\n\t\tdescription: 'Sets the time zone to use',\n\t\tsignature: '( string $zone , IntlDateFormatter $fmt ): bool'\n\t},\n\tdatefmt_set_timezone: {\n\t\tdescription: 'Sets formatterʼs timezone',\n\t\tsignature: '( mixed $zone , IntlDateFormatter $fmt ): bool'\n\t},\n\tresourcebundle_count: {\n\t\tdescription: 'Get number of elements in the bundle',\n\t\tsignature: '( ResourceBundle $r ): int'\n\t},\n\tresourcebundle_create: {\n\t\tdescription: 'Create a resource bundle',\n\t\tsignature: '( string $locale , string $bundlename [, bool $fallback ]): ResourceBundle'\n\t},\n\tresourcebundle_get_error_code: {\n\t\tdescription: 'Get bundle\\'s last error code',\n\t\tsignature: '( ResourceBundle $r ): int'\n\t},\n\tresourcebundle_get_error_message: {\n\t\tdescription: 'Get bundle\\'s last error message',\n\t\tsignature: '( ResourceBundle $r ): string'\n\t},\n\tresourcebundle_get: {\n\t\tdescription: 'Get data from the bundle',\n\t\tsignature: '( string|int $index [, bool $fallback , ResourceBundle $r ]): mixed'\n\t},\n\tresourcebundle_locales: {\n\t\tdescription: 'Get supported locales',\n\t\tsignature: '( string $bundlename ): array'\n\t},\n\ttransliterator_create: {\n\t\tdescription: 'Create a transliterator',\n\t\tsignature: '( string $id [, int $direction ]): Transliterator'\n\t},\n\ttransliterator_create_from_rules: {\n\t\tdescription: 'Create transliterator from rules',\n\t\tsignature: '( string $rules [, int $direction , string $id ]): Transliterator'\n\t},\n\ttransliterator_create_inverse: {\n\t\tdescription: 'Create an inverse transliterator',\n\t\tsignature: '(void): Transliterator'\n\t},\n\ttransliterator_get_error_code: {\n\t\tdescription: 'Get last error code',\n\t\tsignature: '(void): int'\n\t},\n\ttransliterator_get_error_message: {\n\t\tdescription: 'Get last error message',\n\t\tsignature: '(void): string'\n\t},\n\ttransliterator_list_ids: {\n\t\tdescription: 'Get transliterator IDs',\n\t\tsignature: '(void): array'\n\t},\n\ttransliterator_transliterate: {\n\t\tdescription: 'Transliterate a string',\n\t\tsignature: '( string $subject [, int $start [, int $end , mixed $transliterator ]]): string'\n\t},\n\tintl_get_error_code: {\n\t\tdescription: 'Get the last error code',\n\t\tsignature: '(void): int'\n\t},\n\tintl_get_error_message: {\n\t\tdescription: 'Get description of the last error',\n\t\tsignature: '(void): string'\n\t},\n\tgrapheme_extract: {\n\t\tdescription: 'Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8',\n\t\tsignature: '( string $haystack , int $size [, int $extract_type [, int $start = 0 [, int $next ]]]): string'\n\t},\n\tgrapheme_stripos: {\n\t\tdescription: 'Find position (in grapheme units) of first occurrence of a case-insensitive string',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 ]): int'\n\t},\n\tgrapheme_stristr: {\n\t\tdescription: 'Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack',\n\t\tsignature: '( string $haystack , string $needle [, bool $before_needle ]): string'\n\t},\n\tgrapheme_strlen: {\n\t\tdescription: 'Get string length in grapheme units',\n\t\tsignature: '( string $input ): int'\n\t},\n\tgrapheme_strpos: {\n\t\tdescription: 'Find position (in grapheme units) of first occurrence of a string',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 ]): int'\n\t},\n\tgrapheme_strripos: {\n\t\tdescription: 'Find position (in grapheme units) of last occurrence of a case-insensitive string',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 ]): int'\n\t},\n\tgrapheme_strrpos: {\n\t\tdescription: 'Find position (in grapheme units) of last occurrence of a string',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 ]): int'\n\t},\n\tgrapheme_strstr: {\n\t\tdescription: 'Returns part of haystack string from the first occurrence of needle to the end of haystack',\n\t\tsignature: '( string $haystack , string $needle [, bool $before_needle ]): string'\n\t},\n\tgrapheme_substr: {\n\t\tdescription: 'Return part of a string',\n\t\tsignature: '( string $string , int $start [, int $length ]): string'\n\t},\n\tidn_to_ascii: {\n\t\tdescription: 'Convert domain name to IDNA ASCII form',\n\t\tsignature: '( string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array $idna_info ]]]): string'\n\t},\n\tidn_to_utf8: {\n\t\tdescription: 'Convert domain name from IDNA ASCII to Unicode',\n\t\tsignature: '( string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array $idna_info ]]]): string'\n\t},\n\tintl_error_name: {\n\t\tdescription: 'Get symbolic name for a given error code',\n\t\tsignature: '( int $error_code ): string'\n\t},\n\tintl_is_failure: {\n\t\tdescription: 'Check whether the given error code indicates failure',\n\t\tsignature: '( int $error_code ): bool'\n\t},\n\tmb_check_encoding: {\n\t\tdescription: 'Check if the string is valid for the specified encoding',\n\t\tsignature: '([ string $var [, string $encoding = mb_internal_encoding() ]]): bool'\n\t},\n\tmb_chr: {\n\t\tdescription: 'Get a specific character',\n\t\tsignature: '( int $cp [, string $encoding ]): string'\n\t},\n\tmb_convert_case: {\n\t\tdescription: 'Perform case folding on a string',\n\t\tsignature: '( string $str , int $mode [, string $encoding = mb_internal_encoding() ]): string'\n\t},\n\tmb_convert_encoding: {\n\t\tdescription: 'Convert character encoding',\n\t\tsignature: '( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ]): string'\n\t},\n\tmb_convert_kana: {\n\t\tdescription: 'Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)',\n\t\tsignature: '( string $str [, string $option = \"KV\" [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_convert_variables: {\n\t\tdescription: 'Convert character code in variable(s)',\n\t\tsignature: '( string $to_encoding , mixed $from_encoding , mixed $vars [, mixed $... ]): string'\n\t},\n\tmb_decode_mimeheader: {\n\t\tdescription: 'Decode string in MIME header field',\n\t\tsignature: '( string $str ): string'\n\t},\n\tmb_decode_numericentity: {\n\t\tdescription: 'Decode HTML numeric string reference to character',\n\t\tsignature: '( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex ]]): string'\n\t},\n\tmb_detect_encoding: {\n\t\tdescription: 'Detect character encoding',\n\t\tsignature: '( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict ]]): string'\n\t},\n\tmb_detect_order: {\n\t\tdescription: 'Set/Get character encoding detection order',\n\t\tsignature: '([ mixed $encoding_list = mb_detect_order() ]): mixed'\n\t},\n\tmb_encode_mimeheader: {\n\t\tdescription: 'Encode string for MIME header',\n\t\tsignature: '( string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = \"B\" [, string $linefeed = \"\\r\\n\" [, int $indent = 0 ]]]]): string'\n\t},\n\tmb_encode_numericentity: {\n\t\tdescription: 'Encode character to HTML numeric string reference',\n\t\tsignature: '( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex ]]): string'\n\t},\n\tmb_encoding_aliases: {\n\t\tdescription: 'Get aliases of a known encoding type',\n\t\tsignature: '( string $encoding ): array'\n\t},\n\tmb_ereg_match: {\n\t\tdescription: 'Regular expression match for multibyte string',\n\t\tsignature: '( string $pattern , string $string [, string $option = \"msr\" ]): bool'\n\t},\n\tmb_ereg_replace_callback: {\n\t\tdescription: 'Perform a regular expression search and replace with multibyte support using a callback',\n\t\tsignature: '( string $pattern , callable $callback , string $string [, string $option = \"msr\" ]): string'\n\t},\n\tmb_ereg_replace: {\n\t\tdescription: 'Replace regular expression with multibyte support',\n\t\tsignature: '( string $pattern , string $replacement , string $string [, string $option = \"msr\" ]): string'\n\t},\n\tmb_ereg_search_getpos: {\n\t\tdescription: 'Returns start point for next regular expression match',\n\t\tsignature: '(void): int'\n\t},\n\tmb_ereg_search_getregs: {\n\t\tdescription: 'Retrieve the result from the last multibyte regular expression match',\n\t\tsignature: '(void): array'\n\t},\n\tmb_ereg_search_init: {\n\t\tdescription: 'Setup string and regular expression for a multibyte regular expression match',\n\t\tsignature: '( string $string [, string $pattern [, string $option = \"msr\" ]]): bool'\n\t},\n\tmb_ereg_search_pos: {\n\t\tdescription: 'Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string',\n\t\tsignature: '([ string $pattern [, string $option = \"ms\" ]]): array'\n\t},\n\tmb_ereg_search_regs: {\n\t\tdescription: 'Returns the matched part of a multibyte regular expression',\n\t\tsignature: '([ string $pattern [, string $option = \"ms\" ]]): array'\n\t},\n\tmb_ereg_search_setpos: {\n\t\tdescription: 'Set start point of next regular expression match',\n\t\tsignature: '( int $position ): bool'\n\t},\n\tmb_ereg_search: {\n\t\tdescription: 'Multibyte regular expression match for predefined multibyte string',\n\t\tsignature: '([ string $pattern [, string $option = \"ms\" ]]): bool'\n\t},\n\tmb_ereg: {\n\t\tdescription: 'Regular expression match with multibyte support',\n\t\tsignature: '( string $pattern , string $string [, array $regs ]): int'\n\t},\n\tmb_eregi_replace: {\n\t\tdescription: 'Replace regular expression with multibyte support ignoring case',\n\t\tsignature: '( string $pattern , string $replace , string $string [, string $option = \"msri\" ]): string'\n\t},\n\tmb_eregi: {\n\t\tdescription: 'Regular expression match ignoring case with multibyte support',\n\t\tsignature: '( string $pattern , string $string [, array $regs ]): int'\n\t},\n\tmb_get_info: {\n\t\tdescription: 'Get internal settings of mbstring',\n\t\tsignature: '([ string $type = \"all\" ]): mixed'\n\t},\n\tmb_http_input: {\n\t\tdescription: 'Detect HTTP input character encoding',\n\t\tsignature: '([ string $type = \"\" ]): mixed'\n\t},\n\tmb_http_output: {\n\t\tdescription: 'Set/Get HTTP output character encoding',\n\t\tsignature: '([ string $encoding = mb_http_output() ]): mixed'\n\t},\n\tmb_internal_encoding: {\n\t\tdescription: 'Set/Get internal character encoding',\n\t\tsignature: '([ string $encoding = mb_internal_encoding() ]): mixed'\n\t},\n\tmb_language: {\n\t\tdescription: 'Set/Get current language',\n\t\tsignature: '([ string $language = mb_language() ]): mixed'\n\t},\n\tmb_list_encodings: {\n\t\tdescription: 'Returns an array of all supported encodings',\n\t\tsignature: '(void): array'\n\t},\n\tmb_ord: {\n\t\tdescription: 'Get code point of character',\n\t\tsignature: '( string $str [, string $encoding ]): int'\n\t},\n\tmb_output_handler: {\n\t\tdescription: 'Callback function converts character encoding in output buffer',\n\t\tsignature: '( string $contents , int $status ): string'\n\t},\n\tmb_parse_str: {\n\t\tdescription: 'Parse GET/POST/COOKIE data and set global variable',\n\t\tsignature: '( string $encoded_string [, array $result ]): array'\n\t},\n\tmb_preferred_mime_name: {\n\t\tdescription: 'Get MIME charset string',\n\t\tsignature: '( string $encoding ): string'\n\t},\n\tmb_regex_encoding: {\n\t\tdescription: 'Set/Get character encoding for multibyte regex',\n\t\tsignature: '([ string $encoding = mb_regex_encoding() ]): mixed'\n\t},\n\tmb_regex_set_options: {\n\t\tdescription: 'Set/Get the default options for mbregex functions',\n\t\tsignature: '([ string $options = mb_regex_set_options() ]): string'\n\t},\n\tmb_scrub: {\n\t\tdescription: 'Description',\n\t\tsignature: '( string $str [, string $encoding ]): string'\n\t},\n\tmb_send_mail: {\n\t\tdescription: 'Send encoded mail',\n\t\tsignature: '( string $to , string $subject , string $message [, mixed $additional_headers [, string $additional_parameter ]]): bool'\n\t},\n\tmb_split: {\n\t\tdescription: 'Split multibyte string using regular expression',\n\t\tsignature: '( string $pattern , string $string [, int $limit = -1 ]): array'\n\t},\n\tmb_strcut: {\n\t\tdescription: 'Get part of string',\n\t\tsignature: '( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_strimwidth: {\n\t\tdescription: 'Get truncated string with specified width',\n\t\tsignature: '( string $str , int $start , int $width [, string $trimmarker = \"\" [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_stripos: {\n\t\tdescription: 'Finds position of first occurrence of a string within another, case insensitive',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]]): int'\n\t},\n\tmb_stristr: {\n\t\tdescription: 'Finds first occurrence of a string within another, case insensitive',\n\t\tsignature: '( string $haystack , string $needle [, bool $before_needle [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_strlen: {\n\t\tdescription: 'Get string length',\n\t\tsignature: '( string $str [, string $encoding = mb_internal_encoding() ]): string'\n\t},\n\tmb_strpos: {\n\t\tdescription: 'Find position of first occurrence of string in a string',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_strrchr: {\n\t\tdescription: 'Finds the last occurrence of a character in a string within another',\n\t\tsignature: '( string $haystack , string $needle [, bool $part [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_strrichr: {\n\t\tdescription: 'Finds the last occurrence of a character in a string within another, case insensitive',\n\t\tsignature: '( string $haystack , string $needle [, bool $part [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_strripos: {\n\t\tdescription: 'Finds position of last occurrence of a string within another, case insensitive',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]]): int'\n\t},\n\tmb_strrpos: {\n\t\tdescription: 'Find position of last occurrence of a string in a string',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]]): int'\n\t},\n\tmb_strstr: {\n\t\tdescription: 'Finds first occurrence of a string within another',\n\t\tsignature: '( string $haystack , string $needle [, bool $before_needle [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\tmb_strtolower: {\n\t\tdescription: 'Make a string lowercase',\n\t\tsignature: '( string $str [, string $encoding = mb_internal_encoding() ]): string'\n\t},\n\tmb_strtoupper: {\n\t\tdescription: 'Make a string uppercase',\n\t\tsignature: '( string $str [, string $encoding = mb_internal_encoding() ]): string'\n\t},\n\tmb_strwidth: {\n\t\tdescription: 'Return width of string',\n\t\tsignature: '( string $str [, string $encoding = mb_internal_encoding() ]): string'\n\t},\n\tmb_substitute_character: {\n\t\tdescription: 'Set/Get substitution character',\n\t\tsignature: '([ mixed $substchar = mb_substitute_character() ]): integer'\n\t},\n\tmb_substr_count: {\n\t\tdescription: 'Count the number of substring occurrences',\n\t\tsignature: '( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ]): string'\n\t},\n\tmb_substr: {\n\t\tdescription: 'Get part of string',\n\t\tsignature: '( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]]): string'\n\t},\n\texif_imagetype: {\n\t\tdescription: 'Determine the type of an image',\n\t\tsignature: '( string $filename ): int'\n\t},\n\texif_read_data: {\n\t\tdescription: 'Reads the EXIF headers from an image file',\n\t\tsignature: '( mixed $stream [, string $sections [, bool $arrays [, bool $thumbnail ]]]): array'\n\t},\n\texif_tagname: {\n\t\tdescription: 'Get the header name for an index',\n\t\tsignature: '( int $index ): string'\n\t},\n\texif_thumbnail: {\n\t\tdescription: 'Retrieve the embedded thumbnail of an image',\n\t\tsignature: '( mixed $stream [, int $width [, int $height [, int $imagetype ]]]): string'\n\t},\n\tread_exif_data: {\n\t\tdescription: 'Alias of exif_read_data',\n\t},\n\tezmlm_hash: {\n\t\tdescription: 'Calculate the hash value needed by EZMLM',\n\t\tsignature: '( string $addr ): int'\n\t},\n\tmail: {\n\t\tdescription: 'Send mail',\n\t\tsignature: '( string $to , string $subject , string $message [, mixed $additional_headers [, string $additional_parameters ]]): bool'\n\t},\n\tbcadd: {\n\t\tdescription: 'Add two arbitrary precision numbers',\n\t\tsignature: '( string $left_operand , string $right_operand [, int $scale = 0 ]): string'\n\t},\n\tbccomp: {\n\t\tdescription: 'Compare two arbitrary precision numbers',\n\t\tsignature: '( string $left_operand , string $right_operand [, int $scale = 0 ]): int'\n\t},\n\tbcdiv: {\n\t\tdescription: 'Divide two arbitrary precision numbers',\n\t\tsignature: '( string $dividend , string $divisor [, int $scale = 0 ]): string'\n\t},\n\tbcmod: {\n\t\tdescription: 'Get modulus of an arbitrary precision number',\n\t\tsignature: '( string $dividend , string $divisor [, int $scale = 0 ]): string'\n\t},\n\tbcmul: {\n\t\tdescription: 'Multiply two arbitrary precision numbers',\n\t\tsignature: '( string $left_operand , string $right_operand [, int $scale = 0 ]): string'\n\t},\n\tbcpow: {\n\t\tdescription: 'Raise an arbitrary precision number to another',\n\t\tsignature: '( string $base , string $exponent [, int $scale = 0 ]): string'\n\t},\n\tbcpowmod: {\n\t\tdescription: 'Raise an arbitrary precision number to another, reduced by a specified modulus',\n\t\tsignature: '( string $base , string $exponent , string $modulus [, int $scale = 0 ]): string'\n\t},\n\tbcscale: {\n\t\tdescription: 'Set or get default scale parameter for all bc math functions',\n\t\tsignature: '( int $scale ): int'\n\t},\n\tbcsqrt: {\n\t\tdescription: 'Get the square root of an arbitrary precision number',\n\t\tsignature: '( string $operand [, int $scale = 0 ]): string'\n\t},\n\tbcsub: {\n\t\tdescription: 'Subtract one arbitrary precision number from another',\n\t\tsignature: '( string $left_operand , string $right_operand [, int $scale = 0 ]): string'\n\t},\n\tabs: {\n\t\tdescription: 'Absolute value',\n\t\tsignature: '( mixed $number ): number'\n\t},\n\tacos: {\n\t\tdescription: 'Arc cosine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tacosh: {\n\t\tdescription: 'Inverse hyperbolic cosine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tasin: {\n\t\tdescription: 'Arc sine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tasinh: {\n\t\tdescription: 'Inverse hyperbolic sine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tatan2: {\n\t\tdescription: 'Arc tangent of two variables',\n\t\tsignature: '( float $y , float $x ): float'\n\t},\n\tatan: {\n\t\tdescription: 'Arc tangent',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tatanh: {\n\t\tdescription: 'Inverse hyperbolic tangent',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tbase_convert: {\n\t\tdescription: 'Convert a number between arbitrary bases',\n\t\tsignature: '( string $number , int $frombase , int $tobase ): string'\n\t},\n\tbindec: {\n\t\tdescription: 'Binary to decimal',\n\t\tsignature: '( string $binary_string ): float'\n\t},\n\tceil: {\n\t\tdescription: 'Round fractions up',\n\t\tsignature: '( float $value ): float'\n\t},\n\tcos: {\n\t\tdescription: 'Cosine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tcosh: {\n\t\tdescription: 'Hyperbolic cosine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tdecbin: {\n\t\tdescription: 'Decimal to binary',\n\t\tsignature: '( int $number ): string'\n\t},\n\tdechex: {\n\t\tdescription: 'Decimal to hexadecimal',\n\t\tsignature: '( int $number ): string'\n\t},\n\tdecoct: {\n\t\tdescription: 'Decimal to octal',\n\t\tsignature: '( int $number ): string'\n\t},\n\tdeg2rad: {\n\t\tdescription: 'Converts the number in degrees to the radian equivalent',\n\t\tsignature: '( float $number ): float'\n\t},\n\texp: {\n\t\tdescription: 'Calculates the exponent of e',\n\t\tsignature: '( float $arg ): float'\n\t},\n\texpm1: {\n\t\tdescription: 'Returns exp(number) - 1, computed in a way that is accurate even   when the value of number is close to zero',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tfloor: {\n\t\tdescription: 'Round fractions down',\n\t\tsignature: '( float $value ): float'\n\t},\n\tfmod: {\n\t\tdescription: 'Returns the floating point remainder (modulo) of the division  of the arguments',\n\t\tsignature: '( float $x , float $y ): float'\n\t},\n\tgetrandmax: {\n\t\tdescription: 'Show largest possible random value',\n\t\tsignature: '(void): int'\n\t},\n\thexdec: {\n\t\tdescription: 'Hexadecimal to decimal',\n\t\tsignature: '( string $hex_string ): number'\n\t},\n\thypot: {\n\t\tdescription: 'Calculate the length of the hypotenuse of a right-angle triangle',\n\t\tsignature: '( float $x , float $y ): float'\n\t},\n\tintdiv: {\n\t\tdescription: 'Integer division',\n\t\tsignature: '( int $dividend , int $divisor ): int'\n\t},\n\tis_finite: {\n\t\tdescription: 'Finds whether a value is a legal finite number',\n\t\tsignature: '( float $val ): bool'\n\t},\n\tis_infinite: {\n\t\tdescription: 'Finds whether a value is infinite',\n\t\tsignature: '( float $val ): bool'\n\t},\n\tis_nan: {\n\t\tdescription: 'Finds whether a value is not a number',\n\t\tsignature: '( float $val ): bool'\n\t},\n\tlcg_value: {\n\t\tdescription: 'Combined linear congruential generator',\n\t\tsignature: '(void): float'\n\t},\n\tlog10: {\n\t\tdescription: 'Base-10 logarithm',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tlog1p: {\n\t\tdescription: 'Returns log(1 + number), computed in a way that is accurate even when   the value of number is close to zero',\n\t\tsignature: '( float $number ): float'\n\t},\n\tlog: {\n\t\tdescription: 'Natural logarithm',\n\t\tsignature: '( float $arg [, float $base = M_E ]): float'\n\t},\n\tmax: {\n\t\tdescription: 'Find highest value',\n\t\tsignature: '( array $values , mixed $value1 [, mixed $... ]): string'\n\t},\n\tmin: {\n\t\tdescription: 'Find lowest value',\n\t\tsignature: '( array $values , mixed $value1 [, mixed $... ]): string'\n\t},\n\tmt_getrandmax: {\n\t\tdescription: 'Show largest possible random value',\n\t\tsignature: '(void): int'\n\t},\n\tmt_rand: {\n\t\tdescription: 'Generate a random value via the Mersenne Twister Random Number Generator',\n\t\tsignature: '( int $min , int $max ): int'\n\t},\n\tmt_srand: {\n\t\tdescription: 'Seeds the Mersenne Twister Random Number Generator',\n\t\tsignature: '([ int $seed [, int $mode = MT_RAND_MT19937 ]]): void'\n\t},\n\toctdec: {\n\t\tdescription: 'Octal to decimal',\n\t\tsignature: '( string $octal_string ): number'\n\t},\n\tpi: {\n\t\tdescription: 'Get value of pi',\n\t\tsignature: '(void): float'\n\t},\n\tpow: {\n\t\tdescription: 'Exponential expression',\n\t\tsignature: '( number $base , number $exp ): number'\n\t},\n\trad2deg: {\n\t\tdescription: 'Converts the radian number to the equivalent number in degrees',\n\t\tsignature: '( float $number ): float'\n\t},\n\trand: {\n\t\tdescription: 'Generate a random integer',\n\t\tsignature: '( int $min , int $max ): int'\n\t},\n\tround: {\n\t\tdescription: 'Rounds a float',\n\t\tsignature: '( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]]): float'\n\t},\n\tsin: {\n\t\tdescription: 'Sine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tsinh: {\n\t\tdescription: 'Hyperbolic sine',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tsqrt: {\n\t\tdescription: 'Square root',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tsrand: {\n\t\tdescription: 'Seed the random number generator',\n\t\tsignature: '([ int $seed ]): void'\n\t},\n\ttan: {\n\t\tdescription: 'Tangent',\n\t\tsignature: '( float $arg ): float'\n\t},\n\ttanh: {\n\t\tdescription: 'Hyperbolic tangent',\n\t\tsignature: '( float $arg ): float'\n\t},\n\tpcntl_alarm: {\n\t\tdescription: 'Set an alarm clock for delivery of a signal',\n\t\tsignature: '( int $seconds ): int'\n\t},\n\tpcntl_async_signals: {\n\t\tdescription: 'Enable/disable asynchronous signal handling or return the old setting',\n\t\tsignature: '([ bool $on ]): bool'\n\t},\n\tpcntl_errno: {\n\t\tdescription: 'Alias of pcntl_get_last_error',\n\t},\n\tpcntl_exec: {\n\t\tdescription: 'Executes specified program in current process space',\n\t\tsignature: '( string $path [, array $args [, array $envs ]]): void'\n\t},\n\tpcntl_fork: {\n\t\tdescription: 'Forks the currently running process',\n\t\tsignature: '(void): int'\n\t},\n\tpcntl_get_last_error: {\n\t\tdescription: 'Retrieve the error number set by the last pcntl function which failed',\n\t\tsignature: '(void): int'\n\t},\n\tpcntl_getpriority: {\n\t\tdescription: 'Get the priority of any process',\n\t\tsignature: '([ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]]): int'\n\t},\n\tpcntl_setpriority: {\n\t\tdescription: 'Change the priority of any process',\n\t\tsignature: '( int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]]): bool'\n\t},\n\tpcntl_signal_dispatch: {\n\t\tdescription: 'Calls signal handlers for pending signals',\n\t\tsignature: '(void): bool'\n\t},\n\tpcntl_signal_get_handler: {\n\t\tdescription: 'Get the current handler for specified signal',\n\t\tsignature: '( int $signo ): mixed'\n\t},\n\tpcntl_signal: {\n\t\tdescription: 'Installs a signal handler',\n\t\tsignature: '( int $signo , callable|int $handler [, bool $restart_syscalls ]): bool'\n\t},\n\tpcntl_sigprocmask: {\n\t\tdescription: 'Sets and retrieves blocked signals',\n\t\tsignature: '( int $how , array $set [, array $oldset ]): bool'\n\t},\n\tpcntl_sigtimedwait: {\n\t\tdescription: 'Waits for signals, with a timeout',\n\t\tsignature: '( array $set [, array $siginfo [, int $seconds = 0 [, int $nanoseconds = 0 ]]]): int'\n\t},\n\tpcntl_sigwaitinfo: {\n\t\tdescription: 'Waits for signals',\n\t\tsignature: '( array $set [, array $siginfo ]): int'\n\t},\n\tpcntl_strerror: {\n\t\tdescription: 'Retrieve the system error message associated with the given errno',\n\t\tsignature: '( int $errno ): string'\n\t},\n\tpcntl_wait: {\n\t\tdescription: 'Waits on or returns the status of a forked child',\n\t\tsignature: '( int $status [, int $options = 0 [, array $rusage ]]): int'\n\t},\n\tpcntl_waitpid: {\n\t\tdescription: 'Waits on or returns the status of a forked child',\n\t\tsignature: '( int $pid , int $status [, int $options = 0 [, array $rusage ]]): int'\n\t},\n\tpcntl_wexitstatus: {\n\t\tdescription: 'Returns the return code of a terminated child',\n\t\tsignature: '( int $status ): int'\n\t},\n\tpcntl_wifexited: {\n\t\tdescription: 'Checks if status code represents a normal exit',\n\t\tsignature: '( int $status ): bool'\n\t},\n\tpcntl_wifsignaled: {\n\t\tdescription: 'Checks whether the status code represents a termination due to a signal',\n\t\tsignature: '( int $status ): bool'\n\t},\n\tpcntl_wifstopped: {\n\t\tdescription: 'Checks whether the child process is currently stopped',\n\t\tsignature: '( int $status ): bool'\n\t},\n\tpcntl_wstopsig: {\n\t\tdescription: 'Returns the signal which caused the child to stop',\n\t\tsignature: '( int $status ): int'\n\t},\n\tpcntl_wtermsig: {\n\t\tdescription: 'Returns the signal which caused the child to terminate',\n\t\tsignature: '( int $status ): int'\n\t},\n\tposix_access: {\n\t\tdescription: 'Determine accessibility of a file',\n\t\tsignature: '( string $file [, int $mode = POSIX_F_OK ]): bool'\n\t},\n\tposix_ctermid: {\n\t\tdescription: 'Get path name of controlling terminal',\n\t\tsignature: '(void): string'\n\t},\n\tposix_errno: {\n\t\tdescription: 'Alias of posix_get_last_error',\n\t},\n\tposix_get_last_error: {\n\t\tdescription: 'Retrieve the error number set by the last posix function that failed',\n\t\tsignature: '(void): int'\n\t},\n\tposix_getcwd: {\n\t\tdescription: 'Pathname of current directory',\n\t\tsignature: '(void): string'\n\t},\n\tposix_getegid: {\n\t\tdescription: 'Return the effective group ID of the current process',\n\t\tsignature: '(void): int'\n\t},\n\tposix_geteuid: {\n\t\tdescription: 'Return the effective user ID of the current process',\n\t\tsignature: '(void): int'\n\t},\n\tposix_getgid: {\n\t\tdescription: 'Return the real group ID of the current process',\n\t\tsignature: '(void): int'\n\t},\n\tposix_getgrgid: {\n\t\tdescription: 'Return info about a group by group id',\n\t\tsignature: '( int $gid ): array'\n\t},\n\tposix_getgrnam: {\n\t\tdescription: 'Return info about a group by name',\n\t\tsignature: '( string $name ): array'\n\t},\n\tposix_getgroups: {\n\t\tdescription: 'Return the group set of the current process',\n\t\tsignature: '(void): array'\n\t},\n\tposix_getlogin: {\n\t\tdescription: 'Return login name',\n\t\tsignature: '(void): string'\n\t},\n\tposix_getpgid: {\n\t\tdescription: 'Get process group id for job control',\n\t\tsignature: '( int $pid ): int'\n\t},\n\tposix_getpgrp: {\n\t\tdescription: 'Return the current process group identifier',\n\t\tsignature: '(void): int'\n\t},\n\tposix_getpid: {\n\t\tdescription: 'Return the current process identifier',\n\t\tsignature: '(void): int'\n\t},\n\tposix_getppid: {\n\t\tdescription: 'Return the parent process identifier',\n\t\tsignature: '(void): int'\n\t},\n\tposix_getpwnam: {\n\t\tdescription: 'Return info about a user by username',\n\t\tsignature: '( string $username ): array'\n\t},\n\tposix_getpwuid: {\n\t\tdescription: 'Return info about a user by user id',\n\t\tsignature: '( int $uid ): array'\n\t},\n\tposix_getrlimit: {\n\t\tdescription: 'Return info about system resource limits',\n\t\tsignature: '(void): array'\n\t},\n\tposix_getsid: {\n\t\tdescription: 'Get the current sid of the process',\n\t\tsignature: '( int $pid ): int'\n\t},\n\tposix_getuid: {\n\t\tdescription: 'Return the real user ID of the current process',\n\t\tsignature: '(void): int'\n\t},\n\tposix_initgroups: {\n\t\tdescription: 'Calculate the group access list',\n\t\tsignature: '( string $name , int $base_group_id ): bool'\n\t},\n\tposix_isatty: {\n\t\tdescription: 'Determine if a file descriptor is an interactive terminal',\n\t\tsignature: '( mixed $fd ): bool'\n\t},\n\tposix_kill: {\n\t\tdescription: 'Send a signal to a process',\n\t\tsignature: '( int $pid , int $sig ): bool'\n\t},\n\tposix_mkfifo: {\n\t\tdescription: 'Create a fifo special file (a named pipe)',\n\t\tsignature: '( string $pathname , int $mode ): bool'\n\t},\n\tposix_mknod: {\n\t\tdescription: 'Create a special or ordinary file (POSIX.1)',\n\t\tsignature: '( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]]): bool'\n\t},\n\tposix_setegid: {\n\t\tdescription: 'Set the effective GID of the current process',\n\t\tsignature: '( int $gid ): bool'\n\t},\n\tposix_seteuid: {\n\t\tdescription: 'Set the effective UID of the current process',\n\t\tsignature: '( int $uid ): bool'\n\t},\n\tposix_setgid: {\n\t\tdescription: 'Set the GID of the current process',\n\t\tsignature: '( int $gid ): bool'\n\t},\n\tposix_setpgid: {\n\t\tdescription: 'Set process group id for job control',\n\t\tsignature: '( int $pid , int $pgid ): bool'\n\t},\n\tposix_setrlimit: {\n\t\tdescription: 'Set system resource limits',\n\t\tsignature: '( int $resource , int $softlimit , int $hardlimit ): bool'\n\t},\n\tposix_setsid: {\n\t\tdescription: 'Make the current process a session leader',\n\t\tsignature: '(void): int'\n\t},\n\tposix_setuid: {\n\t\tdescription: 'Set the UID of the current process',\n\t\tsignature: '( int $uid ): bool'\n\t},\n\tposix_strerror: {\n\t\tdescription: 'Retrieve the system error message associated with the given errno',\n\t\tsignature: '( int $errno ): string'\n\t},\n\tposix_times: {\n\t\tdescription: 'Get process times',\n\t\tsignature: '(void): array'\n\t},\n\tposix_ttyname: {\n\t\tdescription: 'Determine terminal device name',\n\t\tsignature: '( mixed $fd ): string'\n\t},\n\tposix_uname: {\n\t\tdescription: 'Get system name',\n\t\tsignature: '(void): array'\n\t},\n\tescapeshellarg: {\n\t\tdescription: 'Escape a string to be used as a shell argument',\n\t\tsignature: '( string $arg ): string'\n\t},\n\tescapeshellcmd: {\n\t\tdescription: 'Escape shell metacharacters',\n\t\tsignature: '( string $command ): string'\n\t},\n\texec: {\n\t\tdescription: 'Execute an external program',\n\t\tsignature: '( string $command [, array $output [, int $return_var ]]): string'\n\t},\n\tpassthru: {\n\t\tdescription: 'Execute an external program and display raw output',\n\t\tsignature: '( string $command [, int $return_var ]): void'\n\t},\n\tproc_close: {\n\t\tdescription: 'Close a process opened by proc_open and return the exit code of that process',\n\t\tsignature: '( resource $process ): int'\n\t},\n\tproc_get_status: {\n\t\tdescription: 'Get information about a process opened by proc_open',\n\t\tsignature: '( resource $process ): array'\n\t},\n\tproc_nice: {\n\t\tdescription: 'Change the priority of the current process',\n\t\tsignature: '( int $increment ): bool'\n\t},\n\tproc_open: {\n\t\tdescription: 'Execute a command and open file pointers for input/output',\n\t\tsignature: '( string $cmd , array $descriptorspec , array $pipes [, string $cwd [, array $env [, array $other_options ]]]): resource'\n\t},\n\tproc_terminate: {\n\t\tdescription: 'Kills a process opened by proc_open',\n\t\tsignature: '( resource $process [, int $signal = 15 ]): bool'\n\t},\n\tshell_exec: {\n\t\tdescription: 'Execute command via shell and return the complete output as a string',\n\t\tsignature: '( string $cmd ): string'\n\t},\n\tsystem: {\n\t\tdescription: 'Execute an external program and display the output',\n\t\tsignature: '( string $command [, int $return_var ]): string'\n\t},\n\tftok: {\n\t\tdescription: 'Convert a pathname and a project identifier to a System V IPC key',\n\t\tsignature: '( string $pathname , string $proj ): int'\n\t},\n\tmsg_get_queue: {\n\t\tdescription: 'Create or attach to a message queue',\n\t\tsignature: '( int $key [, int $perms = 0666 ]): resource'\n\t},\n\tmsg_queue_exists: {\n\t\tdescription: 'Check whether a message queue exists',\n\t\tsignature: '( int $key ): bool'\n\t},\n\tmsg_receive: {\n\t\tdescription: 'Receive a message from a message queue',\n\t\tsignature: '( resource $queue , int $desiredmsgtype , int $msgtype , int $maxsize , mixed $message [, bool $unserialize [, int $flags = 0 [, int $errorcode ]]]): bool'\n\t},\n\tmsg_remove_queue: {\n\t\tdescription: 'Destroy a message queue',\n\t\tsignature: '( resource $queue ): bool'\n\t},\n\tmsg_send: {\n\t\tdescription: 'Send a message to a message queue',\n\t\tsignature: '( resource $queue , int $msgtype , mixed $message [, bool $serialize [, bool $blocking [, int $errorcode ]]]): bool'\n\t},\n\tmsg_set_queue: {\n\t\tdescription: 'Set information in the message queue data structure',\n\t\tsignature: '( resource $queue , array $data ): bool'\n\t},\n\tmsg_stat_queue: {\n\t\tdescription: 'Returns information from the message queue data structure',\n\t\tsignature: '( resource $queue ): array'\n\t},\n\tsem_acquire: {\n\t\tdescription: 'Acquire a semaphore',\n\t\tsignature: '( resource $sem_identifier [, bool $nowait ]): bool'\n\t},\n\tsem_get: {\n\t\tdescription: 'Get a semaphore id',\n\t\tsignature: '( int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1 ]]]): resource'\n\t},\n\tsem_release: {\n\t\tdescription: 'Release a semaphore',\n\t\tsignature: '( resource $sem_identifier ): bool'\n\t},\n\tsem_remove: {\n\t\tdescription: 'Remove a semaphore',\n\t\tsignature: '( resource $sem_identifier ): bool'\n\t},\n\tshm_attach: {\n\t\tdescription: 'Creates or open a shared memory segment',\n\t\tsignature: '( int $key [, int $memsize [, int $perm = 0666 ]]): resource'\n\t},\n\tshm_detach: {\n\t\tdescription: 'Disconnects from shared memory segment',\n\t\tsignature: '( resource $shm_identifier ): bool'\n\t},\n\tshm_get_var: {\n\t\tdescription: 'Returns a variable from shared memory',\n\t\tsignature: '( resource $shm_identifier , int $variable_key ): mixed'\n\t},\n\tshm_has_var: {\n\t\tdescription: 'Check whether a specific entry exists',\n\t\tsignature: '( resource $shm_identifier , int $variable_key ): bool'\n\t},\n\tshm_put_var: {\n\t\tdescription: 'Inserts or updates a variable in shared memory',\n\t\tsignature: '( resource $shm_identifier , int $variable_key , mixed $variable ): bool'\n\t},\n\tshm_remove_var: {\n\t\tdescription: 'Removes a variable from shared memory',\n\t\tsignature: '( resource $shm_identifier , int $variable_key ): bool'\n\t},\n\tshm_remove: {\n\t\tdescription: 'Removes shared memory from Unix systems',\n\t\tsignature: '( resource $shm_identifier ): bool'\n\t},\n\tshmop_close: {\n\t\tdescription: 'Close shared memory block',\n\t\tsignature: '( resource $shmid ): void'\n\t},\n\tshmop_delete: {\n\t\tdescription: 'Delete shared memory block',\n\t\tsignature: '( resource $shmid ): bool'\n\t},\n\tshmop_open: {\n\t\tdescription: 'Create or open shared memory block',\n\t\tsignature: '( int $key , string $flags , int $mode , int $size ): resource'\n\t},\n\tshmop_read: {\n\t\tdescription: 'Read data from shared memory block',\n\t\tsignature: '( resource $shmid , int $start , int $count ): string'\n\t},\n\tshmop_size: {\n\t\tdescription: 'Get size of shared memory block',\n\t\tsignature: '( resource $shmid ): int'\n\t},\n\tshmop_write: {\n\t\tdescription: 'Write data into shared memory block',\n\t\tsignature: '( resource $shmid , string $data , int $offset ): int'\n\t},\n\tjson_decode: {\n\t\tdescription: 'Decodes a JSON string',\n\t\tsignature: '( string $json [, bool $assoc [, int $depth = 512 [, int $options = 0 ]]]): mixed'\n\t},\n\tjson_encode: {\n\t\tdescription: 'Returns the JSON representation of a value',\n\t\tsignature: '( mixed $value [, int $options = 0 [, int $depth = 512 ]]): string'\n\t},\n\tjson_last_error_msg: {\n\t\tdescription: 'Returns the error string of the last json_encode() or json_decode() call',\n\t\tsignature: '(void): string'\n\t},\n\tjson_last_error: {\n\t\tdescription: 'Returns the last error occurred',\n\t\tsignature: '(void): int'\n\t},\n\tconnection_aborted: {\n\t\tdescription: 'Check whether client disconnected',\n\t\tsignature: '(void): int'\n\t},\n\tconnection_status: {\n\t\tdescription: 'Returns connection status bitfield',\n\t\tsignature: '(void): int'\n\t},\n\tconstant: {\n\t\tdescription: 'Returns the value of a constant',\n\t\tsignature: '( string $name ): mixed'\n\t},\n\tdefine: {\n\t\tdescription: 'Defines a named constant',\n\t\tsignature: '( string $name , mixed $value [, bool $case_insensitive ]): bool'\n\t},\n\tdefined: {\n\t\tdescription: 'Checks whether a given named constant exists',\n\t\tsignature: '( string $name ): bool'\n\t},\n\tdie: {\n\t\tdescription: 'Equivalent to exit',\n\t},\n\teval: {\n\t\tdescription: 'Evaluate a string as PHP code',\n\t\tsignature: '( string $code ): mixed'\n\t},\n\texit: {\n\t\tdescription: 'Output a message and terminate the current script',\n\t\tsignature: '( int $status ): void'\n\t},\n\tget_browser: {\n\t\tdescription: 'Tells what the user\\'s browser is capable of',\n\t\tsignature: '([ string $user_agent [, bool $return_array ]]): mixed'\n\t},\n\t__halt_compiler: {\n\t\tdescription: 'Halts the compiler execution',\n\t\tsignature: '(void): void'\n\t},\n\thighlight_file: {\n\t\tdescription: 'Syntax highlighting of a file',\n\t\tsignature: '( string $filename [, bool $return ]): mixed'\n\t},\n\thighlight_string: {\n\t\tdescription: 'Syntax highlighting of a string',\n\t\tsignature: '( string $str [, bool $return ]): mixed'\n\t},\n\thrtime: {\n\t\tdescription: 'Get the system\\'s high resolution time',\n\t\tsignature: '([ bool $get_as_number ]): mixed'\n\t},\n\tignore_user_abort: {\n\t\tdescription: 'Set whether a client disconnect should abort script execution',\n\t\tsignature: '([ bool $value ]): int'\n\t},\n\tpack: {\n\t\tdescription: 'Pack data into binary string',\n\t\tsignature: '( string $format [, mixed $... ]): string'\n\t},\n\tphp_check_syntax: {\n\t\tdescription: 'Check the PHP syntax of (and execute) the specified file',\n\t\tsignature: '( string $filename [, string $error_message ]): bool'\n\t},\n\tphp_strip_whitespace: {\n\t\tdescription: 'Return source with stripped comments and whitespace',\n\t\tsignature: '( string $filename ): string'\n\t},\n\tsapi_windows_cp_conv: {\n\t\tdescription: 'Convert string from one codepage to another',\n\t\tsignature: '( int|string $in_codepage , int|string $out_codepage , string $subject ): string'\n\t},\n\tsapi_windows_cp_get: {\n\t\tdescription: 'Get process codepage',\n\t\tsignature: '( string $kind ): int'\n\t},\n\tsapi_windows_cp_is_utf8: {\n\t\tdescription: 'Indicates whether the codepage is UTF-8 compatible',\n\t\tsignature: '(void): bool'\n\t},\n\tsapi_windows_cp_set: {\n\t\tdescription: 'Set process codepage',\n\t\tsignature: '( int $cp ): bool'\n\t},\n\tsapi_windows_vt100_support: {\n\t\tdescription: 'Get or set VT100 support for the specified stream associated to an output buffer of a Windows console.',\n\t\tsignature: '( resource $stream [, bool $enable ]): bool'\n\t},\n\tshow_source: {\n\t\tdescription: 'Alias of highlight_file',\n\t},\n\tsleep: {\n\t\tdescription: 'Delay execution',\n\t\tsignature: '( int $seconds ): int'\n\t},\n\tsys_getloadavg: {\n\t\tdescription: 'Gets system load average',\n\t\tsignature: '(void): array'\n\t},\n\ttime_nanosleep: {\n\t\tdescription: 'Delay for a number of seconds and nanoseconds',\n\t\tsignature: '( int $seconds , int $nanoseconds ): mixed'\n\t},\n\ttime_sleep_until: {\n\t\tdescription: 'Make the script sleep until the specified time',\n\t\tsignature: '( float $timestamp ): bool'\n\t},\n\tuniqid: {\n\t\tdescription: 'Generate a unique ID',\n\t\tsignature: '([ string $prefix = \"\" [, bool $more_entropy ]]): string'\n\t},\n\tunpack: {\n\t\tdescription: 'Unpack data from binary string',\n\t\tsignature: '( string $format , string $data [, int $offset = 0 ]): array'\n\t},\n\tusleep: {\n\t\tdescription: 'Delay execution in microseconds',\n\t\tsignature: '( int $micro_seconds ): void'\n\t},\n\tclass_implements: {\n\t\tdescription: 'Return the interfaces which are implemented by the given class or interface',\n\t\tsignature: '( mixed $class [, bool $autoload ]): array'\n\t},\n\tclass_parents: {\n\t\tdescription: 'Return the parent classes of the given class',\n\t\tsignature: '( mixed $class [, bool $autoload ]): array'\n\t},\n\tclass_uses: {\n\t\tdescription: 'Return the traits used by the given class',\n\t\tsignature: '( mixed $class [, bool $autoload ]): array'\n\t},\n\titerator_apply: {\n\t\tdescription: 'Call a function for every element in an iterator',\n\t\tsignature: '( Traversable $iterator , callable $function [, array $args ]): int'\n\t},\n\titerator_count: {\n\t\tdescription: 'Count the elements in an iterator',\n\t\tsignature: '( Traversable $iterator ): int'\n\t},\n\titerator_to_array: {\n\t\tdescription: 'Copy the iterator into an array',\n\t\tsignature: '( Traversable $iterator [, bool $use_keys ]): array'\n\t},\n\tspl_autoload_call: {\n\t\tdescription: 'Try all registered __autoload() functions to load the requested class',\n\t\tsignature: '( string $class_name ): void'\n\t},\n\tspl_autoload_extensions: {\n\t\tdescription: 'Register and return default file extensions for spl_autoload',\n\t\tsignature: '([ string $file_extensions ]): string'\n\t},\n\tspl_autoload_functions: {\n\t\tdescription: 'Return all registered __autoload() functions',\n\t\tsignature: '(void): array'\n\t},\n\tspl_autoload_register: {\n\t\tdescription: 'Register given function as __autoload() implementation',\n\t\tsignature: '([ callable $autoload_function [, bool $throw [, bool $prepend ]]]): bool'\n\t},\n\tspl_autoload_unregister: {\n\t\tdescription: 'Unregister given function as __autoload() implementation',\n\t\tsignature: '( mixed $autoload_function ): bool'\n\t},\n\tspl_autoload: {\n\t\tdescription: 'Default implementation for __autoload()',\n\t\tsignature: '( string $class_name [, string $file_extensions = spl_autoload_extensions() ]): void'\n\t},\n\tspl_classes: {\n\t\tdescription: 'Return available SPL classes',\n\t\tsignature: '(void): array'\n\t},\n\tspl_object_hash: {\n\t\tdescription: 'Return hash id for given object',\n\t\tsignature: '( object $obj ): string'\n\t},\n\tspl_object_id: {\n\t\tdescription: 'Return the integer object handle for given object',\n\t\tsignature: '( object $obj ): int'\n\t},\n\tset_socket_blocking: {\n\t\tdescription: 'Alias of stream_set_blocking',\n\t},\n\tstream_bucket_append: {\n\t\tdescription: 'Append bucket to brigade',\n\t\tsignature: '( resource $brigade , object $bucket ): void'\n\t},\n\tstream_bucket_make_writeable: {\n\t\tdescription: 'Return a bucket object from the brigade for operating on',\n\t\tsignature: '( resource $brigade ): object'\n\t},\n\tstream_bucket_new: {\n\t\tdescription: 'Create a new bucket for use on the current stream',\n\t\tsignature: '( resource $stream , string $buffer ): object'\n\t},\n\tstream_bucket_prepend: {\n\t\tdescription: 'Prepend bucket to brigade',\n\t\tsignature: '( resource $brigade , object $bucket ): void'\n\t},\n\tstream_context_create: {\n\t\tdescription: 'Creates a stream context',\n\t\tsignature: '([ array $options [, array $params ]]): resource'\n\t},\n\tstream_context_get_default: {\n\t\tdescription: 'Retrieve the default stream context',\n\t\tsignature: '([ array $options ]): resource'\n\t},\n\tstream_context_get_options: {\n\t\tdescription: 'Retrieve options for a stream/wrapper/context',\n\t\tsignature: '( resource $stream_or_context ): array'\n\t},\n\tstream_context_get_params: {\n\t\tdescription: 'Retrieves parameters from a context',\n\t\tsignature: '( resource $stream_or_context ): array'\n\t},\n\tstream_context_set_default: {\n\t\tdescription: 'Set the default stream context',\n\t\tsignature: '( array $options ): resource'\n\t},\n\tstream_context_set_option: {\n\t\tdescription: 'Sets an option for a stream/wrapper/context',\n\t\tsignature: '( resource $stream_or_context , string $wrapper , string $option , mixed $value , array $options ): bool'\n\t},\n\tstream_context_set_params: {\n\t\tdescription: 'Set parameters for a stream/wrapper/context',\n\t\tsignature: '( resource $stream_or_context , array $params ): bool'\n\t},\n\tstream_copy_to_stream: {\n\t\tdescription: 'Copies data from one stream to another',\n\t\tsignature: '( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]]): int'\n\t},\n\tstream_filter_append: {\n\t\tdescription: 'Attach a filter to a stream',\n\t\tsignature: '( resource $stream , string $filtername [, int $read_write [, mixed $params ]]): resource'\n\t},\n\tstream_filter_prepend: {\n\t\tdescription: 'Attach a filter to a stream',\n\t\tsignature: '( resource $stream , string $filtername [, int $read_write [, mixed $params ]]): resource'\n\t},\n\tstream_filter_register: {\n\t\tdescription: 'Register a user defined stream filter',\n\t\tsignature: '( string $filtername , string $classname ): bool'\n\t},\n\tstream_filter_remove: {\n\t\tdescription: 'Remove a filter from a stream',\n\t\tsignature: '( resource $stream_filter ): bool'\n\t},\n\tstream_get_contents: {\n\t\tdescription: 'Reads remainder of a stream into a string',\n\t\tsignature: '( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]]): string'\n\t},\n\tstream_get_filters: {\n\t\tdescription: 'Retrieve list of registered filters',\n\t\tsignature: '(void): array'\n\t},\n\tstream_get_line: {\n\t\tdescription: 'Gets line from stream resource up to a given delimiter',\n\t\tsignature: '( resource $handle , int $length [, string $ending ]): string'\n\t},\n\tstream_get_meta_data: {\n\t\tdescription: 'Retrieves header/meta data from streams/file pointers',\n\t\tsignature: '( resource $stream ): array'\n\t},\n\tstream_get_transports: {\n\t\tdescription: 'Retrieve list of registered socket transports',\n\t\tsignature: '(void): array'\n\t},\n\tstream_get_wrappers: {\n\t\tdescription: 'Retrieve list of registered streams',\n\t\tsignature: '(void): array'\n\t},\n\tstream_is_local: {\n\t\tdescription: 'Checks if a stream is a local stream',\n\t\tsignature: '( mixed $stream_or_url ): bool'\n\t},\n\tstream_isatty: {\n\t\tdescription: 'Check if a stream is a TTY',\n\t\tsignature: '( resource $stream ): bool'\n\t},\n\tstream_notification_callback: {\n\t\tdescription: 'A callback function for the notification context parameter',\n\t\tsignature: '( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max ): callable'\n\t},\n\tstream_register_wrapper: {\n\t\tdescription: 'Alias of stream_wrapper_register',\n\t},\n\tstream_resolve_include_path: {\n\t\tdescription: 'Resolve filename against the include path',\n\t\tsignature: '( string $filename ): string'\n\t},\n\tstream_select: {\n\t\tdescription: 'Runs the equivalent of the select() system call on the given   arrays of streams with a timeout specified by tv_sec and tv_usec',\n\t\tsignature: '( array $read , array $write , array $except , int $tv_sec [, int $tv_usec = 0 ]): int'\n\t},\n\tstream_set_blocking: {\n\t\tdescription: 'Set blocking/non-blocking mode on a stream',\n\t\tsignature: '( resource $stream , bool $mode ): bool'\n\t},\n\tstream_set_chunk_size: {\n\t\tdescription: 'Set the stream chunk size',\n\t\tsignature: '( resource $fp , int $chunk_size ): int'\n\t},\n\tstream_set_read_buffer: {\n\t\tdescription: 'Set read file buffering on the given stream',\n\t\tsignature: '( resource $stream , int $buffer ): int'\n\t},\n\tstream_set_timeout: {\n\t\tdescription: 'Set timeout period on a stream',\n\t\tsignature: '( resource $stream , int $seconds [, int $microseconds = 0 ]): bool'\n\t},\n\tstream_set_write_buffer: {\n\t\tdescription: 'Sets write file buffering on the given stream',\n\t\tsignature: '( resource $stream , int $buffer ): int'\n\t},\n\tstream_socket_accept: {\n\t\tdescription: 'Accept a connection on a socket created by stream_socket_server',\n\t\tsignature: '( resource $server_socket [, float $timeout = ini_get(\"default_socket_timeout\") [, string $peername ]]): resource'\n\t},\n\tstream_socket_client: {\n\t\tdescription: 'Open Internet or Unix domain socket connection',\n\t\tsignature: '( string $remote_socket [, int $errno [, string $errstr [, float $timeout = ini_get(\"default_socket_timeout\") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]]): resource'\n\t},\n\tstream_socket_enable_crypto: {\n\t\tdescription: 'Turns encryption on/off on an already connected socket',\n\t\tsignature: '( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]]): mixed'\n\t},\n\tstream_socket_get_name: {\n\t\tdescription: 'Retrieve the name of the local or remote sockets',\n\t\tsignature: '( resource $handle , bool $want_peer ): string'\n\t},\n\tstream_socket_pair: {\n\t\tdescription: 'Creates a pair of connected, indistinguishable socket streams',\n\t\tsignature: '( int $domain , int $type , int $protocol ): array'\n\t},\n\tstream_socket_recvfrom: {\n\t\tdescription: 'Receives data from a socket, connected or not',\n\t\tsignature: '( resource $socket , int $length [, int $flags = 0 [, string $address ]]): string'\n\t},\n\tstream_socket_sendto: {\n\t\tdescription: 'Sends a message to a socket, whether it is connected or not',\n\t\tsignature: '( resource $socket , string $data [, int $flags = 0 [, string $address ]]): int'\n\t},\n\tstream_socket_server: {\n\t\tdescription: 'Create an Internet or Unix domain server socket',\n\t\tsignature: '( string $local_socket [, int $errno [, string $errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]]): resource'\n\t},\n\tstream_socket_shutdown: {\n\t\tdescription: 'Shutdown a full-duplex connection',\n\t\tsignature: '( resource $stream , int $how ): bool'\n\t},\n\tstream_supports_lock: {\n\t\tdescription: 'Tells whether the stream supports locking',\n\t\tsignature: '( resource $stream ): bool'\n\t},\n\tstream_wrapper_register: {\n\t\tdescription: 'Register a URL wrapper implemented as a PHP class',\n\t\tsignature: '( string $protocol , string $classname [, int $flags = 0 ]): bool'\n\t},\n\tstream_wrapper_restore: {\n\t\tdescription: 'Restores a previously unregistered built-in wrapper',\n\t\tsignature: '( string $protocol ): bool'\n\t},\n\tstream_wrapper_unregister: {\n\t\tdescription: 'Unregister a URL wrapper',\n\t\tsignature: '( string $protocol ): bool'\n\t},\n\ttoken_get_all: {\n\t\tdescription: 'Split given source into PHP tokens',\n\t\tsignature: '( string $source [, int $flags = 0 ]): array'\n\t},\n\ttoken_name: {\n\t\tdescription: 'Get the symbolic name of a given PHP token',\n\t\tsignature: '( int $token ): string'\n\t},\n\tbase64_decode: {\n\t\tdescription: 'Decodes data encoded with MIME base64',\n\t\tsignature: '( string $data [, bool $strict ]): string'\n\t},\n\tbase64_encode: {\n\t\tdescription: 'Encodes data with MIME base64',\n\t\tsignature: '( string $data ): string'\n\t},\n\tget_headers: {\n\t\tdescription: 'Fetches all the headers sent by the server in response to an HTTP request',\n\t\tsignature: '( string $url [, int $format = 0 [, resource $context ]]): array'\n\t},\n\tget_meta_tags: {\n\t\tdescription: 'Extracts all meta tag content attributes from a file and returns an array',\n\t\tsignature: '( string $filename [, bool $use_include_path ]): array'\n\t},\n\thttp_build_query: {\n\t\tdescription: 'Generate URL-encoded query string',\n\t\tsignature: '( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type ]]]): string'\n\t},\n\tparse_url: {\n\t\tdescription: 'Parse a URL and return its components',\n\t\tsignature: '( string $url [, int $component = -1 ]): mixed'\n\t},\n\trawurldecode: {\n\t\tdescription: 'Decode URL-encoded strings',\n\t\tsignature: '( string $str ): string'\n\t},\n\trawurlencode: {\n\t\tdescription: 'URL-encode according to RFC 3986',\n\t\tsignature: '( string $str ): string'\n\t},\n\turldecode: {\n\t\tdescription: 'Decodes URL-encoded string',\n\t\tsignature: '( string $str ): string'\n\t},\n\turlencode: {\n\t\tdescription: 'URL-encodes string',\n\t\tsignature: '( string $str ): string'\n\t},\n\tcurl_close: {\n\t\tdescription: 'Close a cURL session',\n\t\tsignature: '( resource $ch ): void'\n\t},\n\tcurl_copy_handle: {\n\t\tdescription: 'Copy a cURL handle along with all of its preferences',\n\t\tsignature: '( resource $ch ): resource'\n\t},\n\tcurl_errno: {\n\t\tdescription: 'Return the last error number',\n\t\tsignature: '( resource $ch ): int'\n\t},\n\tcurl_error: {\n\t\tdescription: 'Return a string containing the last error for the current session',\n\t\tsignature: '( resource $ch ): string'\n\t},\n\tcurl_escape: {\n\t\tdescription: 'URL encodes the given string',\n\t\tsignature: '( resource $ch , string $str ): string'\n\t},\n\tcurl_exec: {\n\t\tdescription: 'Perform a cURL session',\n\t\tsignature: '( resource $ch ): mixed'\n\t},\n\tcurl_file_create: {\n\t\tdescription: 'Create a CURLFile object',\n\t\tsignature: '( string $filename [, string $mimetype [, string $postname ]]): CURLFile'\n\t},\n\tcurl_getinfo: {\n\t\tdescription: 'Get information regarding a specific transfer',\n\t\tsignature: '( resource $ch [, int $opt ]): mixed'\n\t},\n\tcurl_init: {\n\t\tdescription: 'Initialize a cURL session',\n\t\tsignature: '([ string $url ]): resource'\n\t},\n\tcurl_multi_add_handle: {\n\t\tdescription: 'Add a normal cURL handle to a cURL multi handle',\n\t\tsignature: '( resource $mh , resource $ch ): int'\n\t},\n\tcurl_multi_close: {\n\t\tdescription: 'Close a set of cURL handles',\n\t\tsignature: '( resource $mh ): void'\n\t},\n\tcurl_multi_errno: {\n\t\tdescription: 'Return the last multi curl error number',\n\t\tsignature: '( resource $mh ): int'\n\t},\n\tcurl_multi_exec: {\n\t\tdescription: 'Run the sub-connections of the current cURL handle',\n\t\tsignature: '( resource $mh , int $still_running ): int'\n\t},\n\tcurl_multi_getcontent: {\n\t\tdescription: 'Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set',\n\t\tsignature: '( resource $ch ): string'\n\t},\n\tcurl_multi_info_read: {\n\t\tdescription: 'Get information about the current transfers',\n\t\tsignature: '( resource $mh [, int $msgs_in_queue ]): array'\n\t},\n\tcurl_multi_init: {\n\t\tdescription: 'Returns a new cURL multi handle',\n\t\tsignature: '(void): resource'\n\t},\n\tcurl_multi_remove_handle: {\n\t\tdescription: 'Remove a multi handle from a set of cURL handles',\n\t\tsignature: '( resource $mh , resource $ch ): int'\n\t},\n\tcurl_multi_select: {\n\t\tdescription: 'Wait for activity on any curl_multi connection',\n\t\tsignature: '( resource $mh [, float $timeout = 1.0 ]): int'\n\t},\n\tcurl_multi_setopt: {\n\t\tdescription: 'Set an option for the cURL multi handle',\n\t\tsignature: '( resource $mh , int $option , mixed $value ): bool'\n\t},\n\tcurl_multi_strerror: {\n\t\tdescription: 'Return string describing error code',\n\t\tsignature: '( int $errornum ): string'\n\t},\n\tcurl_pause: {\n\t\tdescription: 'Pause and unpause a connection',\n\t\tsignature: '( resource $ch , int $bitmask ): int'\n\t},\n\tcurl_reset: {\n\t\tdescription: 'Reset all options of a libcurl session handle',\n\t\tsignature: '( resource $ch ): void'\n\t},\n\tcurl_setopt_array: {\n\t\tdescription: 'Set multiple options for a cURL transfer',\n\t\tsignature: '( resource $ch , array $options ): bool'\n\t},\n\tcurl_setopt: {\n\t\tdescription: 'Set an option for a cURL transfer',\n\t\tsignature: '( resource $ch , int $option , mixed $value ): bool'\n\t},\n\tcurl_share_close: {\n\t\tdescription: 'Close a cURL share handle',\n\t\tsignature: '( resource $sh ): void'\n\t},\n\tcurl_share_errno: {\n\t\tdescription: 'Return the last share curl error number',\n\t\tsignature: '( resource $sh ): int'\n\t},\n\tcurl_share_init: {\n\t\tdescription: 'Initialize a cURL share handle',\n\t\tsignature: '(void): resource'\n\t},\n\tcurl_share_setopt: {\n\t\tdescription: 'Set an option for a cURL share handle',\n\t\tsignature: '( resource $sh , int $option , string $value ): bool'\n\t},\n\tcurl_share_strerror: {\n\t\tdescription: 'Return string describing the given error code',\n\t\tsignature: '( int $errornum ): string'\n\t},\n\tcurl_strerror: {\n\t\tdescription: 'Return string describing the given error code',\n\t\tsignature: '( int $errornum ): string'\n\t},\n\tcurl_unescape: {\n\t\tdescription: 'Decodes the given URL encoded string',\n\t\tsignature: '( resource $ch , string $str ): string'\n\t},\n\tcurl_version: {\n\t\tdescription: 'Gets cURL version information',\n\t\tsignature: '([ int $age = CURLVERSION_NOW ]): array'\n\t},\n\tftp_alloc: {\n\t\tdescription: 'Allocates space for a file to be uploaded',\n\t\tsignature: '( resource $ftp_stream , int $filesize [, string $result ]): bool'\n\t},\n\tftp_append: {\n\t\tdescription: 'Append the contents of a file to another file on the FTP server',\n\t\tsignature: '( resource $ftp , string $remote_file , string $local_file [, int $mode ]): bool'\n\t},\n\tftp_cdup: {\n\t\tdescription: 'Changes to the parent directory',\n\t\tsignature: '( resource $ftp_stream ): bool'\n\t},\n\tftp_chdir: {\n\t\tdescription: 'Changes the current directory on a FTP server',\n\t\tsignature: '( resource $ftp_stream , string $directory ): bool'\n\t},\n\tftp_chmod: {\n\t\tdescription: 'Set permissions on a file via FTP',\n\t\tsignature: '( resource $ftp_stream , int $mode , string $filename ): int'\n\t},\n\tftp_close: {\n\t\tdescription: 'Closes an FTP connection',\n\t\tsignature: '( resource $ftp_stream ): resource'\n\t},\n\tftp_connect: {\n\t\tdescription: 'Opens an FTP connection',\n\t\tsignature: '( string $host [, int $port = 21 [, int $timeout = 90 ]]): resource'\n\t},\n\tftp_delete: {\n\t\tdescription: 'Deletes a file on the FTP server',\n\t\tsignature: '( resource $ftp_stream , string $path ): bool'\n\t},\n\tftp_exec: {\n\t\tdescription: 'Requests execution of a command on the FTP server',\n\t\tsignature: '( resource $ftp_stream , string $command ): bool'\n\t},\n\tftp_fget: {\n\t\tdescription: 'Downloads a file from the FTP server and saves to an open file',\n\t\tsignature: '( resource $ftp_stream , resource $handle , string $remote_file [, int $mode [, int $resumepos = 0 ]]): bool'\n\t},\n\tftp_fput: {\n\t\tdescription: 'Uploads from an open file to the FTP server',\n\t\tsignature: '( resource $ftp_stream , string $remote_file , resource $handle [, int $mode [, int $startpos = 0 ]]): bool'\n\t},\n\tftp_get_option: {\n\t\tdescription: 'Retrieves various runtime behaviours of the current FTP stream',\n\t\tsignature: '( resource $ftp_stream , int $option ): mixed'\n\t},\n\tftp_get: {\n\t\tdescription: 'Downloads a file from the FTP server',\n\t\tsignature: '( resource $ftp_stream , string $local_file , string $remote_file [, int $mode [, int $resumepos = 0 ]]): bool'\n\t},\n\tftp_login: {\n\t\tdescription: 'Logs in to an FTP connection',\n\t\tsignature: '( resource $ftp_stream , string $username , string $password ): bool'\n\t},\n\tftp_mdtm: {\n\t\tdescription: 'Returns the last modified time of the given file',\n\t\tsignature: '( resource $ftp_stream , string $remote_file ): int'\n\t},\n\tftp_mkdir: {\n\t\tdescription: 'Creates a directory',\n\t\tsignature: '( resource $ftp_stream , string $directory ): string'\n\t},\n\tftp_mlsd: {\n\t\tdescription: 'Returns a list of files in the given directory',\n\t\tsignature: '( resource $ftp_stream , string $directory ): array'\n\t},\n\tftp_nb_continue: {\n\t\tdescription: 'Continues retrieving/sending a file (non-blocking)',\n\t\tsignature: '( resource $ftp_stream ): int'\n\t},\n\tftp_nb_fget: {\n\t\tdescription: 'Retrieves a file from the FTP server and writes it to an open file (non-blocking)',\n\t\tsignature: '( resource $ftp_stream , resource $handle , string $remote_file [, int $mode [, int $resumepos = 0 ]]): int'\n\t},\n\tftp_nb_fput: {\n\t\tdescription: 'Stores a file from an open file to the FTP server (non-blocking)',\n\t\tsignature: '( resource $ftp_stream , string $remote_file , resource $handle [, int $mode [, int $startpos = 0 ]]): int'\n\t},\n\tftp_nb_get: {\n\t\tdescription: 'Retrieves a file from the FTP server and writes it to a local file (non-blocking)',\n\t\tsignature: '( resource $ftp_stream , string $local_file , string $remote_file [, int $mode [, int $resumepos = 0 ]]): int'\n\t},\n\tftp_nb_put: {\n\t\tdescription: 'Stores a file on the FTP server (non-blocking)',\n\t\tsignature: '( resource $ftp_stream , string $remote_file , string $local_file [, int $mode [, int $startpos = 0 ]]): int'\n\t},\n\tftp_nlist: {\n\t\tdescription: 'Returns a list of files in the given directory',\n\t\tsignature: '( resource $ftp_stream , string $directory ): array'\n\t},\n\tftp_pasv: {\n\t\tdescription: 'Turns passive mode on or off',\n\t\tsignature: '( resource $ftp_stream , bool $pasv ): bool'\n\t},\n\tftp_put: {\n\t\tdescription: 'Uploads a file to the FTP server',\n\t\tsignature: '( resource $ftp_stream , string $remote_file , string $local_file [, int $mode [, int $startpos = 0 ]]): bool'\n\t},\n\tftp_pwd: {\n\t\tdescription: 'Returns the current directory name',\n\t\tsignature: '( resource $ftp_stream ): string'\n\t},\n\tftp_quit: {\n\t\tdescription: 'Alias of ftp_close',\n\t},\n\tftp_raw: {\n\t\tdescription: 'Sends an arbitrary command to an FTP server',\n\t\tsignature: '( resource $ftp_stream , string $command ): array'\n\t},\n\tftp_rawlist: {\n\t\tdescription: 'Returns a detailed list of files in the given directory',\n\t\tsignature: '( resource $ftp_stream , string $directory [, bool $recursive ]): array'\n\t},\n\tftp_rename: {\n\t\tdescription: 'Renames a file or a directory on the FTP server',\n\t\tsignature: '( resource $ftp_stream , string $oldname , string $newname ): bool'\n\t},\n\tftp_rmdir: {\n\t\tdescription: 'Removes a directory',\n\t\tsignature: '( resource $ftp_stream , string $directory ): bool'\n\t},\n\tftp_set_option: {\n\t\tdescription: 'Set miscellaneous runtime FTP options',\n\t\tsignature: '( resource $ftp_stream , int $option , mixed $value ): bool'\n\t},\n\tftp_site: {\n\t\tdescription: 'Sends a SITE command to the server',\n\t\tsignature: '( resource $ftp_stream , string $command ): bool'\n\t},\n\tftp_size: {\n\t\tdescription: 'Returns the size of the given file',\n\t\tsignature: '( resource $ftp_stream , string $remote_file ): int'\n\t},\n\tftp_ssl_connect: {\n\t\tdescription: 'Opens a Secure SSL-FTP connection',\n\t\tsignature: '( string $host [, int $port = 21 [, int $timeout = 90 ]]): resource'\n\t},\n\tftp_systype: {\n\t\tdescription: 'Returns the system type identifier of the remote FTP server',\n\t\tsignature: '( resource $ftp_stream ): string'\n\t},\n\tcheckdnsrr: {\n\t\tdescription: 'Check DNS records corresponding to a given Internet host name or IP address',\n\t\tsignature: '( string $host [, string $type = \"MX\" ]): bool'\n\t},\n\tcloselog: {\n\t\tdescription: 'Close connection to system logger',\n\t\tsignature: '(void): bool'\n\t},\n\tdefine_syslog_variables: {\n\t\tdescription: 'Initializes all syslog related variables',\n\t\tsignature: '(void): void'\n\t},\n\tdns_check_record: {\n\t\tdescription: 'Alias of checkdnsrr',\n\t},\n\tdns_get_mx: {\n\t\tdescription: 'Alias of getmxrr',\n\t},\n\tdns_get_record: {\n\t\tdescription: 'Fetch DNS Resource Records associated with a hostname',\n\t\tsignature: '( string $hostname [, int $type = DNS_ANY [, array $authns [, array $addtl [, bool $raw ]]]]): array'\n\t},\n\tfsockopen: {\n\t\tdescription: 'Open Internet or Unix domain socket connection',\n\t\tsignature: '( string $hostname [, int $port = -1 [, int $errno [, string $errstr [, float $timeout = ini_get(\"default_socket_timeout\") ]]]]): resource'\n\t},\n\tgethostbyaddr: {\n\t\tdescription: 'Get the Internet host name corresponding to a given IP address',\n\t\tsignature: '( string $ip_address ): string'\n\t},\n\tgethostbyname: {\n\t\tdescription: 'Get the IPv4 address corresponding to a given Internet host name',\n\t\tsignature: '( string $hostname ): string'\n\t},\n\tgethostbynamel: {\n\t\tdescription: 'Get a list of IPv4 addresses corresponding to a given Internet host   name',\n\t\tsignature: '( string $hostname ): array'\n\t},\n\tgethostname: {\n\t\tdescription: 'Gets the host name',\n\t\tsignature: '(void): string'\n\t},\n\tgetmxrr: {\n\t\tdescription: 'Get MX records corresponding to a given Internet host name',\n\t\tsignature: '( string $hostname , array $mxhosts [, array $weight ]): bool'\n\t},\n\tgetprotobyname: {\n\t\tdescription: 'Get protocol number associated with protocol name',\n\t\tsignature: '( string $name ): int'\n\t},\n\tgetprotobynumber: {\n\t\tdescription: 'Get protocol name associated with protocol number',\n\t\tsignature: '( int $number ): string'\n\t},\n\tgetservbyname: {\n\t\tdescription: 'Get port number associated with an Internet service and protocol',\n\t\tsignature: '( string $service , string $protocol ): int'\n\t},\n\tgetservbyport: {\n\t\tdescription: 'Get Internet service which corresponds to port and protocol',\n\t\tsignature: '( int $port , string $protocol ): string'\n\t},\n\theader_register_callback: {\n\t\tdescription: 'Call a header function',\n\t\tsignature: '( callable $callback ): bool'\n\t},\n\theader_remove: {\n\t\tdescription: 'Remove previously set headers',\n\t\tsignature: '([ string $name ]): void'\n\t},\n\theader: {\n\t\tdescription: 'Send a raw HTTP header',\n\t\tsignature: '( string $header [, bool $replace [, int $http_response_code ]]): void'\n\t},\n\theaders_list: {\n\t\tdescription: 'Returns a list of response headers sent (or ready to send)',\n\t\tsignature: '(void): array'\n\t},\n\theaders_sent: {\n\t\tdescription: 'Checks if or where headers have been sent',\n\t\tsignature: '([ string $file [, int $line ]]): bool'\n\t},\n\thttp_response_code: {\n\t\tdescription: 'Get or Set the HTTP response code',\n\t\tsignature: '([ int $response_code ]): mixed'\n\t},\n\tinet_ntop: {\n\t\tdescription: 'Converts a packed internet address to a human readable representation',\n\t\tsignature: '( string $in_addr ): string'\n\t},\n\tinet_pton: {\n\t\tdescription: 'Converts a human readable IP address to its packed in_addr representation',\n\t\tsignature: '( string $address ): string'\n\t},\n\tip2long: {\n\t\tdescription: 'Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer',\n\t\tsignature: '( string $ip_address ): int'\n\t},\n\tlong2ip: {\n\t\tdescription: 'Converts an long integer address into a string in (IPv4) Internet standard dotted format',\n\t\tsignature: '( int $proper_address ): string'\n\t},\n\topenlog: {\n\t\tdescription: 'Open connection to system logger',\n\t\tsignature: '( string $ident , int $option , int $facility ): bool'\n\t},\n\tpfsockopen: {\n\t\tdescription: 'Open persistent Internet or Unix domain socket connection',\n\t\tsignature: '( string $hostname [, int $port = -1 [, int $errno [, string $errstr [, float $timeout = ini_get(\"default_socket_timeout\") ]]]]): resource'\n\t},\n\tsetcookie: {\n\t\tdescription: 'Send a cookie',\n\t\tsignature: '( string $name [, string $value = \"\" [, int $expires = 0 [, string $path = \"\" [, string $domain = \"\" [, bool $secure [, bool $httponly [, array $options = [] ]]]]]]]): bool'\n\t},\n\tsetrawcookie: {\n\t\tdescription: 'Send a cookie without urlencoding the cookie value',\n\t\tsignature: '( string $name [, string $value [, int $expires = 0 [, string $path [, string $domain [, bool $secure [, bool $httponly [, array $options = [] ]]]]]]]): bool'\n\t},\n\tsocket_get_status: {\n\t\tdescription: 'Alias of stream_get_meta_data',\n\t},\n\tsocket_set_blocking: {\n\t\tdescription: 'Alias of stream_set_blocking',\n\t},\n\tsocket_set_timeout: {\n\t\tdescription: 'Alias of stream_set_timeout',\n\t},\n\tsyslog: {\n\t\tdescription: 'Generate a system log message',\n\t\tsignature: '( int $priority , string $message ): bool'\n\t},\n\tsocket_accept: {\n\t\tdescription: 'Accepts a connection on a socket',\n\t\tsignature: '( resource $socket ): resource'\n\t},\n\tsocket_addrinfo_bind: {\n\t\tdescription: 'Create and bind to a socket from a given addrinfo',\n\t\tsignature: '( resource $addr ): resource'\n\t},\n\tsocket_addrinfo_connect: {\n\t\tdescription: 'Create and connect to a socket from a given addrinfo',\n\t\tsignature: '( resource $addr ): resource'\n\t},\n\tsocket_addrinfo_explain: {\n\t\tdescription: 'Get information about addrinfo',\n\t\tsignature: '( resource $addr ): array'\n\t},\n\tsocket_addrinfo_lookup: {\n\t\tdescription: 'Get array with contents of getaddrinfo about the given hostname',\n\t\tsignature: '( string $host [, string $service [, array $hints ]]): array'\n\t},\n\tsocket_bind: {\n\t\tdescription: 'Binds a name to a socket',\n\t\tsignature: '( resource $socket , string $address [, int $port = 0 ]): bool'\n\t},\n\tsocket_clear_error: {\n\t\tdescription: 'Clears the error on the socket or the last error code',\n\t\tsignature: '([ resource $socket ]): void'\n\t},\n\tsocket_close: {\n\t\tdescription: 'Closes a socket resource',\n\t\tsignature: '( resource $socket ): void'\n\t},\n\tsocket_cmsg_space: {\n\t\tdescription: 'Calculate message buffer size',\n\t\tsignature: '( int $level , int $type [, int $n = 0 ]): int'\n\t},\n\tsocket_connect: {\n\t\tdescription: 'Initiates a connection on a socket',\n\t\tsignature: '( resource $socket , string $address [, int $port = 0 ]): bool'\n\t},\n\tsocket_create_listen: {\n\t\tdescription: 'Opens a socket on port to accept connections',\n\t\tsignature: '( int $port [, int $backlog = 128 ]): resource'\n\t},\n\tsocket_create_pair: {\n\t\tdescription: 'Creates a pair of indistinguishable sockets and stores them in an array',\n\t\tsignature: '( int $domain , int $type , int $protocol , array $fd ): bool'\n\t},\n\tsocket_create: {\n\t\tdescription: 'Create a socket (endpoint for communication)',\n\t\tsignature: '( int $domain , int $type , int $protocol ): resource'\n\t},\n\tsocket_export_stream: {\n\t\tdescription: 'Export a socket extension resource into a stream that encapsulates a socket',\n\t\tsignature: '( resource $socket ): resource'\n\t},\n\tsocket_get_option: {\n\t\tdescription: 'Gets socket options for the socket',\n\t\tsignature: '( resource $socket , int $level , int $optname ): mixed'\n\t},\n\tsocket_getopt: {\n\t\tdescription: 'Alias of socket_get_option',\n\t},\n\tsocket_getpeername: {\n\t\tdescription: 'Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type',\n\t\tsignature: '( resource $socket , string $address [, int $port ]): bool'\n\t},\n\tsocket_getsockname: {\n\t\tdescription: 'Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type',\n\t\tsignature: '( resource $socket , string $addr [, int $port ]): bool'\n\t},\n\tsocket_import_stream: {\n\t\tdescription: 'Import a stream',\n\t\tsignature: '( resource $stream ): resource'\n\t},\n\tsocket_last_error: {\n\t\tdescription: 'Returns the last error on the socket',\n\t\tsignature: '([ resource $socket ]): int'\n\t},\n\tsocket_listen: {\n\t\tdescription: 'Listens for a connection on a socket',\n\t\tsignature: '( resource $socket [, int $backlog = 0 ]): bool'\n\t},\n\tsocket_read: {\n\t\tdescription: 'Reads a maximum of length bytes from a socket',\n\t\tsignature: '( resource $socket , int $length [, int $type = PHP_BINARY_READ ]): string'\n\t},\n\tsocket_recv: {\n\t\tdescription: 'Receives data from a connected socket',\n\t\tsignature: '( resource $socket , string $buf , int $len , int $flags ): int'\n\t},\n\tsocket_recvfrom: {\n\t\tdescription: 'Receives data from a socket whether or not it is connection-oriented',\n\t\tsignature: '( resource $socket , string $buf , int $len , int $flags , string $name [, int $port ]): int'\n\t},\n\tsocket_recvmsg: {\n\t\tdescription: 'Read a message',\n\t\tsignature: '( resource $socket , array $message [, int $flags = 0 ]): int'\n\t},\n\tsocket_select: {\n\t\tdescription: 'Runs the select() system call on the given arrays of sockets with a specified timeout',\n\t\tsignature: '( array $read , array $write , array $except , int $tv_sec [, int $tv_usec = 0 ]): int'\n\t},\n\tsocket_send: {\n\t\tdescription: 'Sends data to a connected socket',\n\t\tsignature: '( resource $socket , string $buf , int $len , int $flags ): int'\n\t},\n\tsocket_sendmsg: {\n\t\tdescription: 'Send a message',\n\t\tsignature: '( resource $socket , array $message [, int $flags = 0 ]): int'\n\t},\n\tsocket_sendto: {\n\t\tdescription: 'Sends a message to a socket, whether it is connected or not',\n\t\tsignature: '( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port = 0 ]): int'\n\t},\n\tsocket_set_block: {\n\t\tdescription: 'Sets blocking mode on a socket resource',\n\t\tsignature: '( resource $socket ): bool'\n\t},\n\tsocket_set_nonblock: {\n\t\tdescription: 'Sets nonblocking mode for file descriptor fd',\n\t\tsignature: '( resource $socket ): bool'\n\t},\n\tsocket_set_option: {\n\t\tdescription: 'Sets socket options for the socket',\n\t\tsignature: '( resource $socket , int $level , int $optname , mixed $optval ): bool'\n\t},\n\tsocket_setopt: {\n\t\tdescription: 'Alias of socket_set_option',\n\t},\n\tsocket_shutdown: {\n\t\tdescription: 'Shuts down a socket for receiving, sending, or both',\n\t\tsignature: '( resource $socket [, int $how = 2 ]): bool'\n\t},\n\tsocket_strerror: {\n\t\tdescription: 'Return a string describing a socket error',\n\t\tsignature: '( int $errno ): string'\n\t},\n\tsocket_write: {\n\t\tdescription: 'Write to a socket',\n\t\tsignature: '( resource $socket , string $buffer [, int $length = 0 ]): int'\n\t},\n\tapache_child_terminate: {\n\t\tdescription: 'Terminate apache process after this request',\n\t\tsignature: '(void): bool'\n\t},\n\tapache_get_modules: {\n\t\tdescription: 'Get a list of loaded Apache modules',\n\t\tsignature: '(void): array'\n\t},\n\tapache_get_version: {\n\t\tdescription: 'Fetch Apache version',\n\t\tsignature: '(void): string'\n\t},\n\tapache_getenv: {\n\t\tdescription: 'Get an Apache subprocess_env variable',\n\t\tsignature: '( string $variable [, bool $walk_to_top ]): string'\n\t},\n\tapache_lookup_uri: {\n\t\tdescription: 'Perform a partial request for the specified URI and return all info about it',\n\t\tsignature: '( string $filename ): object'\n\t},\n\tapache_note: {\n\t\tdescription: 'Get and set apache request notes',\n\t\tsignature: '( string $note_name [, string $note_value = \"\" ]): string'\n\t},\n\tapache_request_headers: {\n\t\tdescription: 'Fetch all HTTP request headers',\n\t\tsignature: '(void): array'\n\t},\n\tapache_reset_timeout: {\n\t\tdescription: 'Reset the Apache write timer',\n\t\tsignature: '(void): bool'\n\t},\n\tapache_response_headers: {\n\t\tdescription: 'Fetch all HTTP response headers',\n\t\tsignature: '(void): array'\n\t},\n\tapache_setenv: {\n\t\tdescription: 'Set an Apache subprocess_env variable',\n\t\tsignature: '( string $variable , string $value [, bool $walk_to_top ]): bool'\n\t},\n\tgetallheaders: {\n\t\tdescription: 'Fetch all HTTP request headers',\n\t\tsignature: '(void): array'\n\t},\n\tvirtual: {\n\t\tdescription: 'Perform an Apache sub-request',\n\t\tsignature: '( string $filename ): bool'\n\t},\n\tnsapi_request_headers: {\n\t\tdescription: 'Fetch all HTTP request headers',\n\t\tsignature: '(void): array'\n\t},\n\tnsapi_response_headers: {\n\t\tdescription: 'Fetch all HTTP response headers',\n\t\tsignature: '(void): array'\n\t},\n\tnsapi_virtual: {\n\t\tdescription: 'Perform an NSAPI sub-request',\n\t\tsignature: '( string $uri ): bool'\n\t},\n\tsession_abort: {\n\t\tdescription: 'Discard session array changes and finish session',\n\t\tsignature: '(void): bool'\n\t},\n\tsession_cache_expire: {\n\t\tdescription: 'Return current cache expire',\n\t\tsignature: '([ string $new_cache_expire ]): int'\n\t},\n\tsession_cache_limiter: {\n\t\tdescription: 'Get and/or set the current cache limiter',\n\t\tsignature: '([ string $cache_limiter ]): string'\n\t},\n\tsession_commit: {\n\t\tdescription: 'Alias of session_write_close',\n\t},\n\tsession_create_id: {\n\t\tdescription: 'Create new session id',\n\t\tsignature: '([ string $prefix ]): string'\n\t},\n\tsession_decode: {\n\t\tdescription: 'Decodes session data from a session encoded string',\n\t\tsignature: '( string $data ): bool'\n\t},\n\tsession_destroy: {\n\t\tdescription: 'Destroys all data registered to a session',\n\t\tsignature: '(void): bool'\n\t},\n\tsession_encode: {\n\t\tdescription: 'Encodes the current session data as a session encoded string',\n\t\tsignature: '(void): string'\n\t},\n\tsession_gc: {\n\t\tdescription: 'Perform session data garbage collection',\n\t\tsignature: '(void): int'\n\t},\n\tsession_get_cookie_params: {\n\t\tdescription: 'Get the session cookie parameters',\n\t\tsignature: '(void): array'\n\t},\n\tsession_id: {\n\t\tdescription: 'Get and/or set the current session id',\n\t\tsignature: '([ string $id ]): string'\n\t},\n\tsession_is_registered: {\n\t\tdescription: 'Find out whether a global variable is registered in a session',\n\t\tsignature: '( string $name ): bool'\n\t},\n\tsession_module_name: {\n\t\tdescription: 'Get and/or set the current session module',\n\t\tsignature: '([ string $module ]): string'\n\t},\n\tsession_name: {\n\t\tdescription: 'Get and/or set the current session name',\n\t\tsignature: '([ string $name ]): string'\n\t},\n\tsession_regenerate_id: {\n\t\tdescription: 'Update the current session id with a newly generated one',\n\t\tsignature: '([ bool $delete_old_session ]): bool'\n\t},\n\tsession_register_shutdown: {\n\t\tdescription: 'Session shutdown function',\n\t\tsignature: '(void): void'\n\t},\n\tsession_register: {\n\t\tdescription: 'Register one or more global variables with the current session',\n\t\tsignature: '( mixed $name [, mixed $... ]): bool'\n\t},\n\tsession_reset: {\n\t\tdescription: 'Re-initialize session array with original values',\n\t\tsignature: '(void): bool'\n\t},\n\tsession_save_path: {\n\t\tdescription: 'Get and/or set the current session save path',\n\t\tsignature: '([ string $path ]): string'\n\t},\n\tsession_set_cookie_params: {\n\t\tdescription: 'Set the session cookie parameters',\n\t\tsignature: '( int $lifetime [, string $path [, string $domain [, bool $secure [, bool $httponly , array $options ]]]]): bool'\n\t},\n\tsession_set_save_handler: {\n\t\tdescription: 'Sets user-level session storage functions',\n\t\tsignature: '( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp , object $sessionhandler [, bool $register_shutdown ]]]]): bool'\n\t},\n\tsession_start: {\n\t\tdescription: 'Start new or resume existing session',\n\t\tsignature: '([ array $options = array() ]): bool'\n\t},\n\tsession_status: {\n\t\tdescription: 'Returns the current session status',\n\t\tsignature: '(void): int'\n\t},\n\tsession_unregister: {\n\t\tdescription: 'Unregister a global variable from the current session',\n\t\tsignature: '( string $name ): bool'\n\t},\n\tsession_unset: {\n\t\tdescription: 'Free all session variables',\n\t\tsignature: '(void): bool'\n\t},\n\tsession_write_close: {\n\t\tdescription: 'Write session data and end session',\n\t\tsignature: '(void): bool'\n\t},\n\tpreg_filter: {\n\t\tdescription: 'Perform a regular expression search and replace',\n\t\tsignature: '( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int $count ]]): mixed'\n\t},\n\tpreg_grep: {\n\t\tdescription: 'Return array entries that match the pattern',\n\t\tsignature: '( string $pattern , array $input [, int $flags = 0 ]): array'\n\t},\n\tpreg_last_error: {\n\t\tdescription: 'Returns the error code of the last PCRE regex execution',\n\t\tsignature: '(void): int'\n\t},\n\tpreg_match_all: {\n\t\tdescription: 'Perform a global regular expression match',\n\t\tsignature: '( string $pattern , string $subject [, array $matches [, int $flags [, int $offset = 0 ]]]): int'\n\t},\n\tpreg_match: {\n\t\tdescription: 'Perform a regular expression match',\n\t\tsignature: '( string $pattern , string $subject [, array $matches [, int $flags = 0 [, int $offset = 0 ]]]): int'\n\t},\n\tpreg_quote: {\n\t\tdescription: 'Quote regular expression characters',\n\t\tsignature: '( string $str [, string $delimiter ]): string'\n\t},\n\tpreg_replace_callback_array: {\n\t\tdescription: 'Perform a regular expression search and replace using callbacks',\n\t\tsignature: '( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int $count ]]): mixed'\n\t},\n\tpreg_replace_callback: {\n\t\tdescription: 'Perform a regular expression search and replace using a callback',\n\t\tsignature: '( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int $count ]]): mixed'\n\t},\n\tpreg_replace: {\n\t\tdescription: 'Perform a regular expression search and replace',\n\t\tsignature: '( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int $count ]]): mixed'\n\t},\n\tpreg_split: {\n\t\tdescription: 'Split string by a regular expression',\n\t\tsignature: '( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]]): array'\n\t},\n\taddcslashes: {\n\t\tdescription: 'Quote string with slashes in a C style',\n\t\tsignature: '( string $str , string $charlist ): string'\n\t},\n\taddslashes: {\n\t\tdescription: 'Quote string with slashes',\n\t\tsignature: '( string $str ): string'\n\t},\n\tbin2hex: {\n\t\tdescription: 'Convert binary data into hexadecimal representation',\n\t\tsignature: '( string $str ): string'\n\t},\n\tchop: {\n\t\tdescription: 'Alias of rtrim',\n\t},\n\tchr: {\n\t\tdescription: 'Generate a single-byte string from a number',\n\t\tsignature: '( int $bytevalue ): string'\n\t},\n\tchunk_split: {\n\t\tdescription: 'Split a string into smaller chunks',\n\t\tsignature: '( string $body [, int $chunklen = 76 [, string $end = \"\\r\\n\" ]]): string'\n\t},\n\tconvert_cyr_string: {\n\t\tdescription: 'Convert from one Cyrillic character set to another',\n\t\tsignature: '( string $str , string $from , string $to ): string'\n\t},\n\tconvert_uudecode: {\n\t\tdescription: 'Decode a uuencoded string',\n\t\tsignature: '( string $data ): string'\n\t},\n\tconvert_uuencode: {\n\t\tdescription: 'Uuencode a string',\n\t\tsignature: '( string $data ): string'\n\t},\n\tcount_chars: {\n\t\tdescription: 'Return information about characters used in a string',\n\t\tsignature: '( string $string [, int $mode = 0 ]): mixed'\n\t},\n\tcrc32: {\n\t\tdescription: 'Calculates the crc32 polynomial of a string',\n\t\tsignature: '( string $str ): int'\n\t},\n\tcrypt: {\n\t\tdescription: 'One-way string hashing',\n\t\tsignature: '( string $str [, string $salt ]): string'\n\t},\n\techo: {\n\t\tdescription: 'Output one or more strings',\n\t\tsignature: '( string $arg1 [, string $... ]): void'\n\t},\n\texplode: {\n\t\tdescription: 'Split a string by a string',\n\t\tsignature: '( string $delimiter , string $string [, int $limit = PHP_INT_MAX ]): array'\n\t},\n\tfprintf: {\n\t\tdescription: 'Write a formatted string to a stream',\n\t\tsignature: '( resource $handle , string $format [, mixed $... ]): int'\n\t},\n\tget_html_translation_table: {\n\t\tdescription: 'Returns the translation table used by htmlspecialchars and htmlentities',\n\t\tsignature: '([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = \"UTF-8\" ]]]): array'\n\t},\n\thebrev: {\n\t\tdescription: 'Convert logical Hebrew text to visual text',\n\t\tsignature: '( string $hebrew_text [, int $max_chars_per_line = 0 ]): string'\n\t},\n\thebrevc: {\n\t\tdescription: 'Convert logical Hebrew text to visual text with newline conversion',\n\t\tsignature: '( string $hebrew_text [, int $max_chars_per_line = 0 ]): string'\n\t},\n\thex2bin: {\n\t\tdescription: 'Decodes a hexadecimally encoded binary string',\n\t\tsignature: '( string $data ): string'\n\t},\n\thtml_entity_decode: {\n\t\tdescription: 'Convert HTML entities to their corresponding characters',\n\t\tsignature: '( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(\"default_charset\") ]]): string'\n\t},\n\thtmlentities: {\n\t\tdescription: 'Convert all applicable characters to HTML entities',\n\t\tsignature: '( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(\"default_charset\") [, bool $double_encode ]]]): string'\n\t},\n\thtmlspecialchars_decode: {\n\t\tdescription: 'Convert special HTML entities back to characters',\n\t\tsignature: '( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ]): string'\n\t},\n\thtmlspecialchars: {\n\t\tdescription: 'Convert special characters to HTML entities',\n\t\tsignature: '( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(\"default_charset\") [, bool $double_encode ]]]): string'\n\t},\n\timplode: {\n\t\tdescription: 'Join array elements with a string',\n\t\tsignature: '( string $glue , array $pieces ): string'\n\t},\n\tjoin: {\n\t\tdescription: 'Alias of implode',\n\t},\n\tlcfirst: {\n\t\tdescription: 'Make a string\\'s first character lowercase',\n\t\tsignature: '( string $str ): string'\n\t},\n\tlevenshtein: {\n\t\tdescription: 'Calculate Levenshtein distance between two strings',\n\t\tsignature: '( string $str1 , string $str2 , int $cost_ins , int $cost_rep , int $cost_del ): int'\n\t},\n\tlocaleconv: {\n\t\tdescription: 'Get numeric formatting information',\n\t\tsignature: '(void): array'\n\t},\n\tltrim: {\n\t\tdescription: 'Strip whitespace (or other characters) from the beginning of a string',\n\t\tsignature: '( string $str [, string $character_mask ]): string'\n\t},\n\tmd5_file: {\n\t\tdescription: 'Calculates the md5 hash of a given file',\n\t\tsignature: '( string $filename [, bool $raw_output ]): string'\n\t},\n\tmd5: {\n\t\tdescription: 'Calculate the md5 hash of a string',\n\t\tsignature: '( string $str [, bool $raw_output ]): string'\n\t},\n\tmetaphone: {\n\t\tdescription: 'Calculate the metaphone key of a string',\n\t\tsignature: '( string $str [, int $phonemes = 0 ]): string'\n\t},\n\tmoney_format: {\n\t\tdescription: 'Formats a number as a currency string',\n\t\tsignature: '( string $format , float $number ): string'\n\t},\n\tnl_langinfo: {\n\t\tdescription: 'Query language and locale information',\n\t\tsignature: '( int $item ): string'\n\t},\n\tnl2br: {\n\t\tdescription: 'Inserts HTML line breaks before all newlines in a string',\n\t\tsignature: '( string $string [, bool $is_xhtml ]): string'\n\t},\n\tnumber_format: {\n\t\tdescription: 'Format a number with grouped thousands',\n\t\tsignature: '( float $number , int $decimals = 0 , string $dec_point = \".\" , string $thousands_sep = \",\" ): string'\n\t},\n\tord: {\n\t\tdescription: 'Convert the first byte of a string to a value between 0 and 255',\n\t\tsignature: '( string $string ): int'\n\t},\n\tparse_str: {\n\t\tdescription: 'Parses the string into variables',\n\t\tsignature: '( string $encoded_string [, array $result ]): void'\n\t},\n\tprint: {\n\t\tdescription: 'Output a string',\n\t\tsignature: '( string $arg ): int'\n\t},\n\tprintf: {\n\t\tdescription: 'Output a formatted string',\n\t\tsignature: '( string $format [, mixed $... ]): int'\n\t},\n\tquoted_printable_decode: {\n\t\tdescription: 'Convert a quoted-printable string to an 8 bit string',\n\t\tsignature: '( string $str ): string'\n\t},\n\tquoted_printable_encode: {\n\t\tdescription: 'Convert a 8 bit string to a quoted-printable string',\n\t\tsignature: '( string $str ): string'\n\t},\n\tquotemeta: {\n\t\tdescription: 'Quote meta characters',\n\t\tsignature: '( string $str ): string'\n\t},\n\trtrim: {\n\t\tdescription: 'Strip whitespace (or other characters) from the end of a string',\n\t\tsignature: '( string $str [, string $character_mask ]): string'\n\t},\n\tsetlocale: {\n\t\tdescription: 'Set locale information',\n\t\tsignature: '( int $category , array $locale [, string $... ]): string'\n\t},\n\tsha1_file: {\n\t\tdescription: 'Calculate the sha1 hash of a file',\n\t\tsignature: '( string $filename [, bool $raw_output ]): string'\n\t},\n\tsha1: {\n\t\tdescription: 'Calculate the sha1 hash of a string',\n\t\tsignature: '( string $str [, bool $raw_output ]): string'\n\t},\n\tsimilar_text: {\n\t\tdescription: 'Calculate the similarity between two strings',\n\t\tsignature: '( string $first , string $second [, float $percent ]): int'\n\t},\n\tsoundex: {\n\t\tdescription: 'Calculate the soundex key of a string',\n\t\tsignature: '( string $str ): string'\n\t},\n\tsprintf: {\n\t\tdescription: 'Return a formatted string',\n\t\tsignature: '( string $format [, mixed $... ]): string'\n\t},\n\tsscanf: {\n\t\tdescription: 'Parses input from a string according to a format',\n\t\tsignature: '( string $str , string $format [, mixed $... ]): mixed'\n\t},\n\tstr_getcsv: {\n\t\tdescription: 'Parse a CSV string into an array',\n\t\tsignature: '( string $input [, string $delimiter = \",\" [, string $enclosure = \\'\"\\' [, string $escape = \"\\\\\" ]]]): array'\n\t},\n\tstr_ireplace: {\n\t\tdescription: 'Case-insensitive version of str_replace',\n\t\tsignature: '( mixed $search , mixed $replace , mixed $subject [, int $count ]): mixed'\n\t},\n\tstr_pad: {\n\t\tdescription: 'Pad a string to a certain length with another string',\n\t\tsignature: '( string $input , int $pad_length [, string $pad_string = \" \" [, int $pad_type = STR_PAD_RIGHT ]]): string'\n\t},\n\tstr_repeat: {\n\t\tdescription: 'Repeat a string',\n\t\tsignature: '( string $input , int $multiplier ): string'\n\t},\n\tstr_replace: {\n\t\tdescription: 'Replace all occurrences of the search string with the replacement string',\n\t\tsignature: '( mixed $search , mixed $replace , mixed $subject [, int $count ]): mixed'\n\t},\n\tstr_rot13: {\n\t\tdescription: 'Perform the rot13 transform on a string',\n\t\tsignature: '( string $str ): string'\n\t},\n\tstr_shuffle: {\n\t\tdescription: 'Randomly shuffles a string',\n\t\tsignature: '( string $str ): string'\n\t},\n\tstr_split: {\n\t\tdescription: 'Convert a string to an array',\n\t\tsignature: '( string $string [, int $split_length = 1 ]): array'\n\t},\n\tstr_word_count: {\n\t\tdescription: 'Return information about words used in a string',\n\t\tsignature: '( string $string [, int $format = 0 [, string $charlist ]]): mixed'\n\t},\n\tstrcasecmp: {\n\t\tdescription: 'Binary safe case-insensitive string comparison',\n\t\tsignature: '( string $str1 , string $str2 ): int'\n\t},\n\tstrchr: {\n\t\tdescription: 'Alias of strstr',\n\t},\n\tstrcmp: {\n\t\tdescription: 'Binary safe string comparison',\n\t\tsignature: '( string $str1 , string $str2 ): int'\n\t},\n\tstrcoll: {\n\t\tdescription: 'Locale based string comparison',\n\t\tsignature: '( string $str1 , string $str2 ): int'\n\t},\n\tstrcspn: {\n\t\tdescription: 'Find length of initial segment not matching mask',\n\t\tsignature: '( string $subject , string $mask [, int $start [, int $length ]]): int'\n\t},\n\tstrip_tags: {\n\t\tdescription: 'Strip HTML and PHP tags from a string',\n\t\tsignature: '( string $str [, string $allowable_tags ]): string'\n\t},\n\tstripcslashes: {\n\t\tdescription: 'Un-quote string quoted with addcslashes',\n\t\tsignature: '( string $str ): string'\n\t},\n\tstripos: {\n\t\tdescription: 'Find the position of the first occurrence of a case-insensitive substring in a string',\n\t\tsignature: '( string $haystack , mixed $needle [, int $offset = 0 ]): int'\n\t},\n\tstripslashes: {\n\t\tdescription: 'Un-quotes a quoted string',\n\t\tsignature: '( string $str ): string'\n\t},\n\tstristr: {\n\t\tdescription: 'Case-insensitive strstr',\n\t\tsignature: '( string $haystack , mixed $needle [, bool $before_needle ]): string'\n\t},\n\tstrlen: {\n\t\tdescription: 'Get string length',\n\t\tsignature: '( string $string ): int'\n\t},\n\tstrnatcasecmp: {\n\t\tdescription: 'Case insensitive string comparisons using a \"natural order\" algorithm',\n\t\tsignature: '( string $str1 , string $str2 ): int'\n\t},\n\tstrnatcmp: {\n\t\tdescription: 'String comparisons using a \"natural order\" algorithm',\n\t\tsignature: '( string $str1 , string $str2 ): int'\n\t},\n\tstrncasecmp: {\n\t\tdescription: 'Binary safe case-insensitive string comparison of the first n characters',\n\t\tsignature: '( string $str1 , string $str2 , int $len ): int'\n\t},\n\tstrncmp: {\n\t\tdescription: 'Binary safe string comparison of the first n characters',\n\t\tsignature: '( string $str1 , string $str2 , int $len ): int'\n\t},\n\tstrpbrk: {\n\t\tdescription: 'Search a string for any of a set of characters',\n\t\tsignature: '( string $haystack , string $char_list ): string'\n\t},\n\tstrpos: {\n\t\tdescription: 'Find the position of the first occurrence of a substring in a string',\n\t\tsignature: '( string $haystack , mixed $needle [, int $offset = 0 ]): int'\n\t},\n\tstrrchr: {\n\t\tdescription: 'Find the last occurrence of a character in a string',\n\t\tsignature: '( string $haystack , mixed $needle ): string'\n\t},\n\tstrrev: {\n\t\tdescription: 'Reverse a string',\n\t\tsignature: '( string $string ): string'\n\t},\n\tstrripos: {\n\t\tdescription: 'Find the position of the last occurrence of a case-insensitive substring in a string',\n\t\tsignature: '( string $haystack , mixed $needle [, int $offset = 0 ]): int'\n\t},\n\tstrrpos: {\n\t\tdescription: 'Find the position of the last occurrence of a substring in a string',\n\t\tsignature: '( string $haystack , mixed $needle [, int $offset = 0 ]): int'\n\t},\n\tstrspn: {\n\t\tdescription: 'Finds the length of the initial segment of a string consisting   entirely of characters contained within a given mask',\n\t\tsignature: '( string $subject , string $mask [, int $start [, int $length ]]): int'\n\t},\n\tstrstr: {\n\t\tdescription: 'Find the first occurrence of a string',\n\t\tsignature: '( string $haystack , mixed $needle [, bool $before_needle ]): string'\n\t},\n\tstrtok: {\n\t\tdescription: 'Tokenize string',\n\t\tsignature: '( string $str , string $token ): string'\n\t},\n\tstrtolower: {\n\t\tdescription: 'Make a string lowercase',\n\t\tsignature: '( string $string ): string'\n\t},\n\tstrtoupper: {\n\t\tdescription: 'Make a string uppercase',\n\t\tsignature: '( string $string ): string'\n\t},\n\tstrtr: {\n\t\tdescription: 'Translate characters or replace substrings',\n\t\tsignature: '( string $str , string $from , string $to , array $replace_pairs ): string'\n\t},\n\tsubstr_compare: {\n\t\tdescription: 'Binary safe comparison of two strings from an offset, up to length characters',\n\t\tsignature: '( string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity ]]): int'\n\t},\n\tsubstr_count: {\n\t\tdescription: 'Count the number of substring occurrences',\n\t\tsignature: '( string $haystack , string $needle [, int $offset = 0 [, int $length ]]): int'\n\t},\n\tsubstr_replace: {\n\t\tdescription: 'Replace text within a portion of a string',\n\t\tsignature: '( mixed $string , mixed $replacement , mixed $start [, mixed $length ]): mixed'\n\t},\n\tsubstr: {\n\t\tdescription: 'Return part of a string',\n\t\tsignature: '( string $string , int $start [, int $length ]): string'\n\t},\n\ttrim: {\n\t\tdescription: 'Strip whitespace (or other characters) from the beginning and end of a string',\n\t\tsignature: '( string $str [, string $character_mask = \" \\t\\n\\r\\0\\x0B\" ]): string'\n\t},\n\tucfirst: {\n\t\tdescription: 'Make a string\\'s first character uppercase',\n\t\tsignature: '( string $str ): string'\n\t},\n\tucwords: {\n\t\tdescription: 'Uppercase the first character of each word in a string',\n\t\tsignature: '( string $str [, string $delimiters = \" \\t\\r\\n\\f\\v\" ]): string'\n\t},\n\tvfprintf: {\n\t\tdescription: 'Write a formatted string to a stream',\n\t\tsignature: '( resource $handle , string $format , array $args ): int'\n\t},\n\tvprintf: {\n\t\tdescription: 'Output a formatted string',\n\t\tsignature: '( string $format , array $args ): int'\n\t},\n\tvsprintf: {\n\t\tdescription: 'Return a formatted string',\n\t\tsignature: '( string $format , array $args ): string'\n\t},\n\twordwrap: {\n\t\tdescription: 'Wraps a string to a given number of characters',\n\t\tsignature: '( string $str [, int $width = 75 [, string $break = \"\\n\" [, bool $cut ]]]): string'\n\t},\n\tarray_change_key_case: {\n\t\tdescription: 'Changes the case of all keys in an array',\n\t\tsignature: '( array $array [, int $case = CASE_LOWER ]): array'\n\t},\n\tarray_chunk: {\n\t\tdescription: 'Split an array into chunks',\n\t\tsignature: '( array $array , int $size [, bool $preserve_keys ]): array'\n\t},\n\tarray_column: {\n\t\tdescription: 'Return the values from a single column in the input array',\n\t\tsignature: '( array $input , mixed $column_key [, mixed $index_key ]): array'\n\t},\n\tarray_combine: {\n\t\tdescription: 'Creates an array by using one array for keys and another for its values',\n\t\tsignature: '( array $keys , array $values ): array'\n\t},\n\tarray_count_values: {\n\t\tdescription: 'Counts all the values of an array',\n\t\tsignature: '( array $array ): array'\n\t},\n\tarray_diff_assoc: {\n\t\tdescription: 'Computes the difference of arrays with additional index check',\n\t\tsignature: '( array $array1 , array $array2 [, array $... ]): array'\n\t},\n\tarray_diff_key: {\n\t\tdescription: 'Computes the difference of arrays using keys for comparison',\n\t\tsignature: '( array $array1 , array $array2 [, array $... ]): array'\n\t},\n\tarray_diff_uassoc: {\n\t\tdescription: 'Computes the difference of arrays with additional index check which is performed by a user supplied callback function',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $key_compare_func ]): array'\n\t},\n\tarray_diff_ukey: {\n\t\tdescription: 'Computes the difference of arrays using a callback function on the keys for comparison',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $key_compare_func ]): array'\n\t},\n\tarray_diff: {\n\t\tdescription: 'Computes the difference of arrays',\n\t\tsignature: '( array $array1 , array $array2 [, array $... ]): array'\n\t},\n\tarray_fill_keys: {\n\t\tdescription: 'Fill an array with values, specifying keys',\n\t\tsignature: '( array $keys , mixed $value ): array'\n\t},\n\tarray_fill: {\n\t\tdescription: 'Fill an array with values',\n\t\tsignature: '( int $start_index , int $num , mixed $value ): array'\n\t},\n\tarray_filter: {\n\t\tdescription: 'Filters elements of an array using a callback function',\n\t\tsignature: '( array $array [, callable $callback [, int $flag = 0 ]]): array'\n\t},\n\tarray_flip: {\n\t\tdescription: 'Exchanges all keys with their associated values in an array',\n\t\tsignature: '( array $array ): string'\n\t},\n\tarray_intersect_assoc: {\n\t\tdescription: 'Computes the intersection of arrays with additional index check',\n\t\tsignature: '( array $array1 , array $array2 [, array $... ]): array'\n\t},\n\tarray_intersect_key: {\n\t\tdescription: 'Computes the intersection of arrays using keys for comparison',\n\t\tsignature: '( array $array1 , array $array2 [, array $... ]): array'\n\t},\n\tarray_intersect_uassoc: {\n\t\tdescription: 'Computes the intersection of arrays with additional index check, compares indexes by a callback function',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $key_compare_func ]): array'\n\t},\n\tarray_intersect_ukey: {\n\t\tdescription: 'Computes the intersection of arrays using a callback function on the keys for comparison',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $key_compare_func ]): array'\n\t},\n\tarray_intersect: {\n\t\tdescription: 'Computes the intersection of arrays',\n\t\tsignature: '( array $array1 , array $array2 [, array $... ]): array'\n\t},\n\tarray_key_exists: {\n\t\tdescription: 'Checks if the given key or index exists in the array',\n\t\tsignature: '( mixed $key , array $array ): bool'\n\t},\n\tarray_key_first: {\n\t\tdescription: 'Gets the first key of an array',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\tarray_key_last: {\n\t\tdescription: 'Gets the last key of an array',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\tarray_keys: {\n\t\tdescription: 'Return all the keys or a subset of the keys of an array',\n\t\tsignature: '( array $array , mixed $search_value [, bool $strict ]): array'\n\t},\n\tarray_map: {\n\t\tdescription: 'Applies the callback to the elements of the given arrays',\n\t\tsignature: '( callable $callback , array $array1 [, array $... ]): array'\n\t},\n\tarray_merge_recursive: {\n\t\tdescription: 'Merge one or more arrays recursively',\n\t\tsignature: '( array $array1 [, array $... ]): array'\n\t},\n\tarray_merge: {\n\t\tdescription: 'Merge one or more arrays',\n\t\tsignature: '( array $array1 [, array $... ]): array'\n\t},\n\tarray_multisort: {\n\t\tdescription: 'Sort multiple or multi-dimensional arrays',\n\t\tsignature: '( array $array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]]): string'\n\t},\n\tarray_pad: {\n\t\tdescription: 'Pad array to the specified length with a value',\n\t\tsignature: '( array $array , int $size , mixed $value ): array'\n\t},\n\tarray_pop: {\n\t\tdescription: 'Pop the element off the end of array',\n\t\tsignature: '( array $array ): array'\n\t},\n\tarray_product: {\n\t\tdescription: 'Calculate the product of values in an array',\n\t\tsignature: '( array $array ): number'\n\t},\n\tarray_push: {\n\t\tdescription: 'Push one or more elements onto the end of array',\n\t\tsignature: '( array $array [, mixed $... ]): int'\n\t},\n\tarray_rand: {\n\t\tdescription: 'Pick one or more random keys out of an array',\n\t\tsignature: '( array $array [, int $num = 1 ]): mixed'\n\t},\n\tarray_reduce: {\n\t\tdescription: 'Iteratively reduce the array to a single value using a callback function',\n\t\tsignature: '( array $array , callable $callback [, mixed $initial ]): mixed'\n\t},\n\tarray_replace_recursive: {\n\t\tdescription: 'Replaces elements from passed arrays into the first array recursively',\n\t\tsignature: '( array $array1 [, array $... ]): array'\n\t},\n\tarray_replace: {\n\t\tdescription: 'Replaces elements from passed arrays into the first array',\n\t\tsignature: '( array $array1 [, array $... ]): array'\n\t},\n\tarray_reverse: {\n\t\tdescription: 'Return an array with elements in reverse order',\n\t\tsignature: '( array $array [, bool $preserve_keys ]): array'\n\t},\n\tarray_search: {\n\t\tdescription: 'Searches the array for a given value and returns the first corresponding key if successful',\n\t\tsignature: '( mixed $needle , array $haystack [, bool $strict ]): mixed'\n\t},\n\tarray_shift: {\n\t\tdescription: 'Shift an element off the beginning of array',\n\t\tsignature: '( array $array ): array'\n\t},\n\tarray_slice: {\n\t\tdescription: 'Extract a slice of the array',\n\t\tsignature: '( array $array , int $offset [, int $length [, bool $preserve_keys ]]): array'\n\t},\n\tarray_splice: {\n\t\tdescription: 'Remove a portion of the array and replace it with something else',\n\t\tsignature: '( array $input , int $offset [, int $length = count($input) [, mixed $replacement = array() ]]): array'\n\t},\n\tarray_sum: {\n\t\tdescription: 'Calculate the sum of values in an array',\n\t\tsignature: '( array $array ): number'\n\t},\n\tarray_udiff_assoc: {\n\t\tdescription: 'Computes the difference of arrays with additional index check, compares data by a callback function',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $value_compare_func ]): array'\n\t},\n\tarray_udiff_uassoc: {\n\t\tdescription: 'Computes the difference of arrays with additional index check, compares data and indexes by a callback function',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $value_compare_func , callable $key_compare_func ]): array'\n\t},\n\tarray_udiff: {\n\t\tdescription: 'Computes the difference of arrays by using a callback function for data comparison',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $value_compare_func ]): array'\n\t},\n\tarray_uintersect_assoc: {\n\t\tdescription: 'Computes the intersection of arrays with additional index check, compares data by a callback function',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $value_compare_func ]): array'\n\t},\n\tarray_uintersect_uassoc: {\n\t\tdescription: 'Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $value_compare_func , callable $key_compare_func ]): array'\n\t},\n\tarray_uintersect: {\n\t\tdescription: 'Computes the intersection of arrays, compares data by a callback function',\n\t\tsignature: '( array $array1 , array $array2 [, array $... , callable $value_compare_func ]): array'\n\t},\n\tarray_unique: {\n\t\tdescription: 'Removes duplicate values from an array',\n\t\tsignature: '( array $array [, int $sort_flags = SORT_STRING ]): array'\n\t},\n\tarray_unshift: {\n\t\tdescription: 'Prepend one or more elements to the beginning of an array',\n\t\tsignature: '( array $array [, mixed $... ]): int'\n\t},\n\tarray_values: {\n\t\tdescription: 'Return all the values of an array',\n\t\tsignature: '( array $array ): array'\n\t},\n\tarray_walk_recursive: {\n\t\tdescription: 'Apply a user function recursively to every member of an array',\n\t\tsignature: '( array $array , callable $callback [, mixed $userdata ]): bool'\n\t},\n\tarray_walk: {\n\t\tdescription: 'Apply a user supplied function to every member of an array',\n\t\tsignature: '( array $array , callable $callback [, mixed $userdata ]): bool'\n\t},\n\tarray: {\n\t\tdescription: 'Create an array',\n\t\tsignature: '([ mixed $... ]): array'\n\t},\n\tarsort: {\n\t\tdescription: 'Sort an array in reverse order and maintain index association',\n\t\tsignature: '( array $array [, int $sort_flags = SORT_REGULAR ]): bool'\n\t},\n\tasort: {\n\t\tdescription: 'Sort an array and maintain index association',\n\t\tsignature: '( array $array [, int $sort_flags = SORT_REGULAR ]): bool'\n\t},\n\tcompact: {\n\t\tdescription: 'Create array containing variables and their values',\n\t\tsignature: '( mixed $varname1 [, mixed $... ]): array'\n\t},\n\tcount: {\n\t\tdescription: 'Count all elements in an array, or something in an object',\n\t\tsignature: '( mixed $array_or_countable [, int $mode = COUNT_NORMAL ]): int'\n\t},\n\tcurrent: {\n\t\tdescription: 'Return the current element in an array',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\teach: {\n\t\tdescription: 'Return the current key and value pair from an array and advance the array cursor',\n\t\tsignature: '( array $array ): array'\n\t},\n\tend: {\n\t\tdescription: 'Set the internal pointer of an array to its last element',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\textract: {\n\t\tdescription: 'Import variables into the current symbol table from an array',\n\t\tsignature: '( array $array [, int $flags = EXTR_OVERWRITE [, string $prefix ]]): int'\n\t},\n\tin_array: {\n\t\tdescription: 'Checks if a value exists in an array',\n\t\tsignature: '( mixed $needle , array $haystack [, bool $strict ]): bool'\n\t},\n\tkey_exists: {\n\t\tdescription: 'Alias of array_key_exists',\n\t},\n\tkey: {\n\t\tdescription: 'Fetch a key from an array',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\tkrsort: {\n\t\tdescription: 'Sort an array by key in reverse order',\n\t\tsignature: '( array $array [, int $sort_flags = SORT_REGULAR ]): bool'\n\t},\n\tksort: {\n\t\tdescription: 'Sort an array by key',\n\t\tsignature: '( array $array [, int $sort_flags = SORT_REGULAR ]): bool'\n\t},\n\tlist: {\n\t\tdescription: 'Assign variables as if they were an array',\n\t\tsignature: '( mixed $var1 [, mixed $... ]): array'\n\t},\n\tnatcasesort: {\n\t\tdescription: 'Sort an array using a case insensitive \"natural order\" algorithm',\n\t\tsignature: '( array $array ): bool'\n\t},\n\tnatsort: {\n\t\tdescription: 'Sort an array using a \"natural order\" algorithm',\n\t\tsignature: '( array $array ): bool'\n\t},\n\tnext: {\n\t\tdescription: 'Advance the internal pointer of an array',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\tpos: {\n\t\tdescription: 'Alias of current',\n\t},\n\tprev: {\n\t\tdescription: 'Rewind the internal array pointer',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\trange: {\n\t\tdescription: 'Create an array containing a range of elements',\n\t\tsignature: '( mixed $start , mixed $end [, number $step = 1 ]): array'\n\t},\n\treset: {\n\t\tdescription: 'Set the internal pointer of an array to its first element',\n\t\tsignature: '( array $array ): mixed'\n\t},\n\trsort: {\n\t\tdescription: 'Sort an array in reverse order',\n\t\tsignature: '( array $array [, int $sort_flags = SORT_REGULAR ]): bool'\n\t},\n\tshuffle: {\n\t\tdescription: 'Shuffle an array',\n\t\tsignature: '( array $array ): bool'\n\t},\n\tsizeof: {\n\t\tdescription: 'Alias of count',\n\t},\n\tsort: {\n\t\tdescription: 'Sort an array',\n\t\tsignature: '( array $array [, int $sort_flags = SORT_REGULAR ]): bool'\n\t},\n\tuasort: {\n\t\tdescription: 'Sort an array with a user-defined comparison function and maintain index association',\n\t\tsignature: '( array $array , callable $value_compare_func ): bool'\n\t},\n\tuksort: {\n\t\tdescription: 'Sort an array by keys using a user-defined comparison function',\n\t\tsignature: '( array $array , callable $key_compare_func ): bool'\n\t},\n\tusort: {\n\t\tdescription: 'Sort an array by values using a user-defined comparison function',\n\t\tsignature: '( array $array , callable $value_compare_func ): bool'\n\t},\n\t__autoload: {\n\t\tdescription: 'Attempt to load undefined class',\n\t\tsignature: '( string $class ): void'\n\t},\n\tcall_user_method_array: {\n\t\tdescription: 'Call a user method given with an array of parameters',\n\t\tsignature: '( string $method_name , object $obj , array $params ): mixed'\n\t},\n\tcall_user_method: {\n\t\tdescription: 'Call a user method on an specific object',\n\t\tsignature: '( string $method_name , object $obj [, mixed $... ]): mixed'\n\t},\n\tclass_alias: {\n\t\tdescription: 'Creates an alias for a class',\n\t\tsignature: '( string $original , string $alias [, bool $autoload ]): bool'\n\t},\n\tclass_exists: {\n\t\tdescription: 'Checks if the class has been defined',\n\t\tsignature: '( string $class_name [, bool $autoload ]): bool'\n\t},\n\tget_called_class: {\n\t\tdescription: 'The \"Late Static Binding\" class name',\n\t\tsignature: '(void): string'\n\t},\n\tget_class_methods: {\n\t\tdescription: 'Gets the class methods\\' names',\n\t\tsignature: '( mixed $class_name ): array'\n\t},\n\tget_class_vars: {\n\t\tdescription: 'Get the default properties of the class',\n\t\tsignature: '( string $class_name ): array'\n\t},\n\tget_class: {\n\t\tdescription: 'Returns the name of the class of an object',\n\t\tsignature: '([ object $object ]): string'\n\t},\n\tget_declared_classes: {\n\t\tdescription: 'Returns an array with the name of the defined classes',\n\t\tsignature: '(void): array'\n\t},\n\tget_declared_interfaces: {\n\t\tdescription: 'Returns an array of all declared interfaces',\n\t\tsignature: '(void): array'\n\t},\n\tget_declared_traits: {\n\t\tdescription: 'Returns an array of all declared traits',\n\t\tsignature: '(void): array'\n\t},\n\tget_object_vars: {\n\t\tdescription: 'Gets the properties of the given object',\n\t\tsignature: '( object $object ): array'\n\t},\n\tget_parent_class: {\n\t\tdescription: 'Retrieves the parent class name for object or class',\n\t\tsignature: '([ mixed $object ]): string'\n\t},\n\tinterface_exists: {\n\t\tdescription: 'Checks if the interface has been defined',\n\t\tsignature: '( string $interface_name [, bool $autoload ]): bool'\n\t},\n\tis_a: {\n\t\tdescription: 'Checks if the object is of this class or has this class as one of its parents',\n\t\tsignature: '( mixed $object , string $class_name [, bool $allow_string ]): bool'\n\t},\n\tis_subclass_of: {\n\t\tdescription: 'Checks if the object has this class as one of its parents or implements it',\n\t\tsignature: '( mixed $object , string $class_name [, bool $allow_string ]): bool'\n\t},\n\tmethod_exists: {\n\t\tdescription: 'Checks if the class method exists',\n\t\tsignature: '( mixed $object , string $method_name ): bool'\n\t},\n\tproperty_exists: {\n\t\tdescription: 'Checks if the object or class has a property',\n\t\tsignature: '( mixed $class , string $property ): bool'\n\t},\n\ttrait_exists: {\n\t\tdescription: 'Checks if the trait exists',\n\t\tsignature: '( string $traitname [, bool $autoload ]): bool'\n\t},\n\tctype_alnum: {\n\t\tdescription: 'Check for alphanumeric character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_alpha: {\n\t\tdescription: 'Check for alphabetic character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_cntrl: {\n\t\tdescription: 'Check for control character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_digit: {\n\t\tdescription: 'Check for numeric character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_graph: {\n\t\tdescription: 'Check for any printable character(s) except space',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_lower: {\n\t\tdescription: 'Check for lowercase character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_print: {\n\t\tdescription: 'Check for printable character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_punct: {\n\t\tdescription: 'Check for any printable character which is not whitespace or an   alphanumeric character',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_space: {\n\t\tdescription: 'Check for whitespace character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_upper: {\n\t\tdescription: 'Check for uppercase character(s)',\n\t\tsignature: '( string $text ): string'\n\t},\n\tctype_xdigit: {\n\t\tdescription: 'Check for character(s) representing a hexadecimal digit',\n\t\tsignature: '( string $text ): string'\n\t},\n\tfilter_has_var: {\n\t\tdescription: 'Checks if variable of specified type exists',\n\t\tsignature: '( int $type , string $variable_name ): bool'\n\t},\n\tfilter_id: {\n\t\tdescription: 'Returns the filter ID belonging to a named filter',\n\t\tsignature: '( string $filtername ): int'\n\t},\n\tfilter_input_array: {\n\t\tdescription: 'Gets external variables and optionally filters them',\n\t\tsignature: '( int $type [, mixed $definition [, bool $add_empty ]]): mixed'\n\t},\n\tfilter_input: {\n\t\tdescription: 'Gets a specific external variable by name and optionally filters it',\n\t\tsignature: '( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]]): mixed'\n\t},\n\tfilter_list: {\n\t\tdescription: 'Returns a list of all supported filters',\n\t\tsignature: '(void): array'\n\t},\n\tfilter_var_array: {\n\t\tdescription: 'Gets multiple variables and optionally filters them',\n\t\tsignature: '( array $data [, mixed $definition [, bool $add_empty ]]): mixed'\n\t},\n\tfilter_var: {\n\t\tdescription: 'Filters a variable with a specified filter',\n\t\tsignature: '( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]]): mixed'\n\t},\n\tcall_user_func_array: {\n\t\tdescription: 'Call a callback with an array of parameters',\n\t\tsignature: '( callable $callback , array $param_arr ): mixed'\n\t},\n\tcall_user_func: {\n\t\tdescription: 'Call the callback given by the first parameter',\n\t\tsignature: '( callable $callback [, mixed $... ]): mixed'\n\t},\n\tcreate_function: {\n\t\tdescription: 'Create an anonymous (lambda-style) function',\n\t\tsignature: '( string $args , string $code ): string'\n\t},\n\tforward_static_call_array: {\n\t\tdescription: 'Call a static method and pass the arguments as array',\n\t\tsignature: '( callable $function , array $parameters ): mixed'\n\t},\n\tforward_static_call: {\n\t\tdescription: 'Call a static method',\n\t\tsignature: '( callable $function [, mixed $... ]): mixed'\n\t},\n\tfunc_get_arg: {\n\t\tdescription: 'Return an item from the argument list',\n\t\tsignature: '( int $arg_num ): mixed'\n\t},\n\tfunc_get_args: {\n\t\tdescription: 'Returns an array comprising a function\\'s argument list',\n\t\tsignature: '(void): array'\n\t},\n\tfunc_num_args: {\n\t\tdescription: 'Returns the number of arguments passed to the function',\n\t\tsignature: '(void): int'\n\t},\n\tfunction_exists: {\n\t\tdescription: 'Return TRUE if the given function has been defined',\n\t\tsignature: '( string $function_name ): bool'\n\t},\n\tget_defined_functions: {\n\t\tdescription: 'Returns an array of all defined functions',\n\t\tsignature: '([ bool $exclude_disabled ]): array'\n\t},\n\tregister_shutdown_function: {\n\t\tdescription: 'Register a function for execution on shutdown',\n\t\tsignature: '( callable $callback [, mixed $... ]): void'\n\t},\n\tregister_tick_function: {\n\t\tdescription: 'Register a function for execution on each tick',\n\t\tsignature: '( callable $function [, mixed $... ]): bool'\n\t},\n\tunregister_tick_function: {\n\t\tdescription: 'De-register a function for execution on each tick',\n\t\tsignature: '( callable $function ): void'\n\t},\n\tboolval: {\n\t\tdescription: 'Get the boolean value of a variable',\n\t\tsignature: '( mixed $var ): boolean'\n\t},\n\tdebug_zval_dump: {\n\t\tdescription: 'Dumps a string representation of an internal zend value to output',\n\t\tsignature: '( mixed $variable [, mixed $... ]): void'\n\t},\n\tdoubleval: {\n\t\tdescription: 'Alias of floatval',\n\t},\n\tempty: {\n\t\tdescription: 'Determine whether a variable is empty',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tfloatval: {\n\t\tdescription: 'Get float value of a variable',\n\t\tsignature: '( mixed $var ): float'\n\t},\n\tget_defined_vars: {\n\t\tdescription: 'Returns an array of all defined variables',\n\t\tsignature: '(void): array'\n\t},\n\tget_resource_type: {\n\t\tdescription: 'Returns the resource type',\n\t\tsignature: '( resource $handle ): string'\n\t},\n\tgettype: {\n\t\tdescription: 'Get the type of a variable',\n\t\tsignature: '( mixed $var ): string'\n\t},\n\timport_request_variables: {\n\t\tdescription: 'Import GET/POST/Cookie variables into the global scope',\n\t\tsignature: '( string $types [, string $prefix ]): bool'\n\t},\n\tintval: {\n\t\tdescription: 'Get the integer value of a variable',\n\t\tsignature: '( mixed $var [, int $base = 10 ]): integer'\n\t},\n\tis_array: {\n\t\tdescription: 'Finds whether a variable is an array',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_bool: {\n\t\tdescription: 'Finds out whether a variable is a boolean',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_callable: {\n\t\tdescription: 'Verify that the contents of a variable can be called as a function',\n\t\tsignature: '( mixed $var [, bool $syntax_only [, string $callable_name ]]): bool'\n\t},\n\tis_countable: {\n\t\tdescription: 'Verify that the contents of a variable is a countable value',\n\t\tsignature: '( mixed $var ): array'\n\t},\n\tis_double: {\n\t\tdescription: 'Alias of is_float',\n\t},\n\tis_float: {\n\t\tdescription: 'Finds whether the type of a variable is float',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_int: {\n\t\tdescription: 'Find whether the type of a variable is integer',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_integer: {\n\t\tdescription: 'Alias of is_int',\n\t},\n\tis_iterable: {\n\t\tdescription: 'Verify that the contents of a variable is an iterable value',\n\t\tsignature: '( mixed $var ): array'\n\t},\n\tis_long: {\n\t\tdescription: 'Alias of is_int',\n\t},\n\tis_null: {\n\t\tdescription: 'Finds whether a variable is NULL',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_numeric: {\n\t\tdescription: 'Finds whether a variable is a number or a numeric string',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_object: {\n\t\tdescription: 'Finds whether a variable is an object',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_real: {\n\t\tdescription: 'Alias of is_float',\n\t},\n\tis_resource: {\n\t\tdescription: 'Finds whether a variable is a resource',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tis_scalar: {\n\t\tdescription: 'Finds whether a variable is a scalar',\n\t\tsignature: '( mixed $var ): resource'\n\t},\n\tis_string: {\n\t\tdescription: 'Find whether the type of a variable is string',\n\t\tsignature: '( mixed $var ): bool'\n\t},\n\tisset: {\n\t\tdescription: 'Determine if a variable is declared and is different than NULL',\n\t\tsignature: '( mixed $var [, mixed $... ]): bool'\n\t},\n\tprint_r: {\n\t\tdescription: 'Prints human-readable information about a variable',\n\t\tsignature: '( mixed $expression [, bool $return ]): mixed'\n\t},\n\tserialize: {\n\t\tdescription: 'Generates a storable representation of a value',\n\t\tsignature: '( mixed $value ): string'\n\t},\n\tsettype: {\n\t\tdescription: 'Set the type of a variable',\n\t\tsignature: '( mixed $var , string $type ): bool'\n\t},\n\tstrval: {\n\t\tdescription: 'Get string value of a variable',\n\t\tsignature: '( mixed $var ): string'\n\t},\n\tunserialize: {\n\t\tdescription: 'Creates a PHP value from a stored representation',\n\t\tsignature: '( string $str [, array $options ]): mixed'\n\t},\n\tunset: {\n\t\tdescription: 'Unset a given variable',\n\t\tsignature: '( mixed $var [, mixed $... ]): void'\n\t},\n\tvar_dump: {\n\t\tdescription: 'Dumps information about a variable',\n\t\tsignature: '( mixed $expression [, mixed $... ]): string'\n\t},\n\tvar_export: {\n\t\tdescription: 'Outputs or returns a parsable string representation of a variable',\n\t\tsignature: '( mixed $expression [, bool $return ]): mixed'\n\t},\n\txmlrpc_decode_request: {\n\t\tdescription: 'Decodes XML into native PHP types',\n\t\tsignature: '( string $xml , string $method [, string $encoding ]): mixed'\n\t},\n\txmlrpc_decode: {\n\t\tdescription: 'Decodes XML into native PHP types',\n\t\tsignature: '( string $xml [, string $encoding = \"iso-8859-1\" ]): mixed'\n\t},\n\txmlrpc_encode_request: {\n\t\tdescription: 'Generates XML for a method request',\n\t\tsignature: '( string $method , mixed $params [, array $output_options ]): string'\n\t},\n\txmlrpc_encode: {\n\t\tdescription: 'Generates XML for a PHP value',\n\t\tsignature: '( mixed $value ): string'\n\t},\n\txmlrpc_get_type: {\n\t\tdescription: 'Gets xmlrpc type for a PHP value',\n\t\tsignature: '( mixed $value ): string'\n\t},\n\txmlrpc_is_fault: {\n\t\tdescription: 'Determines if an array value represents an XMLRPC fault',\n\t\tsignature: '( array $arg ): bool'\n\t},\n\txmlrpc_parse_method_descriptions: {\n\t\tdescription: 'Decodes XML into a list of method descriptions',\n\t\tsignature: '( string $xml ): array'\n\t},\n\txmlrpc_server_add_introspection_data: {\n\t\tdescription: 'Adds introspection documentation',\n\t\tsignature: '( resource $server , array $desc ): int'\n\t},\n\txmlrpc_server_call_method: {\n\t\tdescription: 'Parses XML requests and call methods',\n\t\tsignature: '( resource $server , string $xml , mixed $user_data [, array $output_options ]): string'\n\t},\n\txmlrpc_server_create: {\n\t\tdescription: 'Creates an xmlrpc server',\n\t\tsignature: '(void): resource'\n\t},\n\txmlrpc_server_destroy: {\n\t\tdescription: 'Destroys server resources',\n\t\tsignature: '( resource $server ): bool'\n\t},\n\txmlrpc_server_register_introspection_callback: {\n\t\tdescription: 'Register a PHP function to generate documentation',\n\t\tsignature: '( resource $server , string $function ): bool'\n\t},\n\txmlrpc_server_register_method: {\n\t\tdescription: 'Register a PHP function to resource method matching method_name',\n\t\tsignature: '( resource $server , string $method_name , string $function ): bool'\n\t},\n\txmlrpc_set_type: {\n\t\tdescription: 'Sets xmlrpc type, base64 or datetime, for a PHP string value',\n\t\tsignature: '( string $value , string $type ): bool'\n\t},\n\tcom_create_guid: {\n\t\tdescription: 'Generate a globally unique identifier (GUID)',\n\t\tsignature: '(void): string'\n\t},\n\tcom_event_sink: {\n\t\tdescription: 'Connect events from a COM object to a PHP object',\n\t\tsignature: '( variant $comobject , object $sinkobject [, mixed $sinkinterface ]): bool'\n\t},\n\tcom_get_active_object: {\n\t\tdescription: 'Returns a handle to an already running instance of a COM object',\n\t\tsignature: '( string $progid [, int $code_page ]): variant'\n\t},\n\tcom_load_typelib: {\n\t\tdescription: 'Loads a Typelib',\n\t\tsignature: '( string $typelib_name [, bool $case_sensitive ]): bool'\n\t},\n\tcom_message_pump: {\n\t\tdescription: 'Process COM messages, sleeping for up to timeoutms milliseconds',\n\t\tsignature: '([ int $timeoutms = 0 ]): bool'\n\t},\n\tcom_print_typeinfo: {\n\t\tdescription: 'Print out a PHP class definition for a dispatchable interface',\n\t\tsignature: '( object $comobject [, string $dispinterface [, bool $wantsink ]]): bool'\n\t},\n\tvariant_abs: {\n\t\tdescription: 'Returns the absolute value of a variant',\n\t\tsignature: '( mixed $val ): mixed'\n\t},\n\tvariant_add: {\n\t\tdescription: '\"Adds\" two variant values together and returns the result',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_and: {\n\t\tdescription: 'Performs a bitwise AND operation between two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_cast: {\n\t\tdescription: 'Convert a variant into a new variant object of another type',\n\t\tsignature: '( variant $variant , int $type ): variant'\n\t},\n\tvariant_cat: {\n\t\tdescription: 'Concatenates two variant values together and returns the result',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_cmp: {\n\t\tdescription: 'Compares two variants',\n\t\tsignature: '( mixed $left , mixed $right [, int $lcid [, int $flags ]]): int'\n\t},\n\tvariant_date_from_timestamp: {\n\t\tdescription: 'Returns a variant date representation of a Unix timestamp',\n\t\tsignature: '( int $timestamp ): variant'\n\t},\n\tvariant_date_to_timestamp: {\n\t\tdescription: 'Converts a variant date/time value to Unix timestamp',\n\t\tsignature: '( variant $variant ): int'\n\t},\n\tvariant_div: {\n\t\tdescription: 'Returns the result from dividing two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_eqv: {\n\t\tdescription: 'Performs a bitwise equivalence on two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_fix: {\n\t\tdescription: 'Returns the integer portion of a variant',\n\t\tsignature: '( mixed $variant ): mixed'\n\t},\n\tvariant_get_type: {\n\t\tdescription: 'Returns the type of a variant object',\n\t\tsignature: '( variant $variant ): int'\n\t},\n\tvariant_idiv: {\n\t\tdescription: 'Converts variants to integers and then returns the result from dividing them',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_imp: {\n\t\tdescription: 'Performs a bitwise implication on two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_int: {\n\t\tdescription: 'Returns the integer portion of a variant',\n\t\tsignature: '( mixed $variant ): mixed'\n\t},\n\tvariant_mod: {\n\t\tdescription: 'Divides two variants and returns only the remainder',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_mul: {\n\t\tdescription: 'Multiplies the values of the two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_neg: {\n\t\tdescription: 'Performs logical negation on a variant',\n\t\tsignature: '( mixed $variant ): mixed'\n\t},\n\tvariant_not: {\n\t\tdescription: 'Performs bitwise not negation on a variant',\n\t\tsignature: '( mixed $variant ): mixed'\n\t},\n\tvariant_or: {\n\t\tdescription: 'Performs a logical disjunction on two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_pow: {\n\t\tdescription: 'Returns the result of performing the power function with two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_round: {\n\t\tdescription: 'Rounds a variant to the specified number of decimal places',\n\t\tsignature: '( mixed $variant , int $decimals ): mixed'\n\t},\n\tvariant_set_type: {\n\t\tdescription: 'Convert a variant into another type \"in-place\"',\n\t\tsignature: '( variant $variant , int $type ): void'\n\t},\n\tvariant_set: {\n\t\tdescription: 'Assigns a new value for a variant object',\n\t\tsignature: '( variant $variant , mixed $value ): void'\n\t},\n\tvariant_sub: {\n\t\tdescription: 'Subtracts the value of the right variant from the left variant value',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tvariant_xor: {\n\t\tdescription: 'Performs a logical exclusion on two variants',\n\t\tsignature: '( mixed $left , mixed $right ): mixed'\n\t},\n\tlibxml_clear_errors: {\n\t\tdescription: 'Clear libxml error buffer',\n\t\tsignature: '(void): void'\n\t},\n\tlibxml_disable_entity_loader: {\n\t\tdescription: 'Disable the ability to load external entities',\n\t\tsignature: '([ bool $disable ]): bool'\n\t},\n\tlibxml_get_errors: {\n\t\tdescription: 'Retrieve array of errors',\n\t\tsignature: '(void): array'\n\t},\n\tlibxml_get_last_error: {\n\t\tdescription: 'Retrieve last error from libxml',\n\t\tsignature: '(void): LibXMLError'\n\t},\n\tlibxml_set_external_entity_loader: {\n\t\tdescription: 'Changes the default external entity loader',\n\t\tsignature: '( callable $resolver_function ): bool'\n\t},\n\tlibxml_set_streams_context: {\n\t\tdescription: 'Set the streams context for the next libxml document load or write',\n\t\tsignature: '( resource $streams_context ): void'\n\t},\n\tlibxml_use_internal_errors: {\n\t\tdescription: 'Disable libxml errors and allow user to fetch error information as needed',\n\t\tsignature: '([ bool $use_errors ]): bool'\n\t},\n\tsimplexml_import_dom: {\n\t\tdescription: 'Get a SimpleXMLElement object from a DOM node',\n\t\tsignature: '( DOMNode $node [, string $class_name = \"SimpleXMLElement\" ]): SimpleXMLElement'\n\t},\n\tsimplexml_load_file: {\n\t\tdescription: 'Interprets an XML file into an object',\n\t\tsignature: '( string $filename [, string $class_name = \"SimpleXMLElement\" [, int $options = 0 [, string $ns = \"\" [, bool $is_prefix ]]]]): SimpleXMLElement'\n\t},\n\tsimplexml_load_string: {\n\t\tdescription: 'Interprets a string of XML into an object',\n\t\tsignature: '( string $data [, string $class_name = \"SimpleXMLElement\" [, int $options = 0 [, string $ns = \"\" [, bool $is_prefix ]]]]): SimpleXMLElement'\n\t},\n\tutf8_decode: {\n\t\tdescription: 'Converts a string with ISO-8859-1 characters encoded with UTF-8   to single-byte ISO-8859-1',\n\t\tsignature: '( string $data ): string'\n\t},\n\tutf8_encode: {\n\t\tdescription: 'Encodes an ISO-8859-1 string to UTF-8',\n\t\tsignature: '( string $data ): string'\n\t},\n\txml_error_string: {\n\t\tdescription: 'Get XML parser error string',\n\t\tsignature: '( int $code ): string'\n\t},\n\txml_get_current_byte_index: {\n\t\tdescription: 'Get current byte index for an XML parser',\n\t\tsignature: '( resource $parser ): int'\n\t},\n\txml_get_current_column_number: {\n\t\tdescription: 'Get current column number for an XML parser',\n\t\tsignature: '( resource $parser ): int'\n\t},\n\txml_get_current_line_number: {\n\t\tdescription: 'Get current line number for an XML parser',\n\t\tsignature: '( resource $parser ): int'\n\t},\n\txml_get_error_code: {\n\t\tdescription: 'Get XML parser error code',\n\t\tsignature: '( resource $parser ): int'\n\t},\n\txml_parse_into_struct: {\n\t\tdescription: 'Parse XML data into an array structure',\n\t\tsignature: '( resource $parser , string $data , array $values [, array $index ]): int'\n\t},\n\txml_parse: {\n\t\tdescription: 'Start parsing an XML document',\n\t\tsignature: '( resource $parser , string $data [, bool $is_final ]): int'\n\t},\n\txml_parser_create_ns: {\n\t\tdescription: 'Create an XML parser with namespace support',\n\t\tsignature: '([ string $encoding [, string $separator = \":\" ]]): resource'\n\t},\n\txml_parser_create: {\n\t\tdescription: 'Create an XML parser',\n\t\tsignature: '([ string $encoding ]): resource'\n\t},\n\txml_parser_free: {\n\t\tdescription: 'Free an XML parser',\n\t\tsignature: '( resource $parser ): bool'\n\t},\n\txml_parser_get_option: {\n\t\tdescription: 'Get options from an XML parser',\n\t\tsignature: '( resource $parser , int $option ): mixed'\n\t},\n\txml_parser_set_option: {\n\t\tdescription: 'Set options in an XML parser',\n\t\tsignature: '( resource $parser , int $option , mixed $value ): bool'\n\t},\n\txml_set_character_data_handler: {\n\t\tdescription: 'Set up character data handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txml_set_default_handler: {\n\t\tdescription: 'Set up default handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txml_set_element_handler: {\n\t\tdescription: 'Set up start and end element handlers',\n\t\tsignature: '( resource $parser , callable $start_element_handler , callable $end_element_handler ): bool'\n\t},\n\txml_set_end_namespace_decl_handler: {\n\t\tdescription: 'Set up end namespace declaration handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txml_set_external_entity_ref_handler: {\n\t\tdescription: 'Set up external entity reference handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txml_set_notation_decl_handler: {\n\t\tdescription: 'Set up notation declaration handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txml_set_object: {\n\t\tdescription: 'Use XML Parser within an object',\n\t\tsignature: '( resource $parser , object $object ): bool'\n\t},\n\txml_set_processing_instruction_handler: {\n\t\tdescription: 'Set up processing instruction (PI) handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txml_set_start_namespace_decl_handler: {\n\t\tdescription: 'Set up start namespace declaration handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txml_set_unparsed_entity_decl_handler: {\n\t\tdescription: 'Set up unparsed entity declaration handler',\n\t\tsignature: '( resource $parser , callable $handler ): bool'\n\t},\n\txmlwriter_end_attribute: {\n\t\tdescription: 'End attribute',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_cdata: {\n\t\tdescription: 'End current CDATA',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_comment: {\n\t\tdescription: 'Create end comment',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_document: {\n\t\tdescription: 'End current document',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_dtd_attlist: {\n\t\tdescription: 'End current DTD AttList',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_dtd_element: {\n\t\tdescription: 'End current DTD element',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_dtd_entity: {\n\t\tdescription: 'End current DTD Entity',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_dtd: {\n\t\tdescription: 'End current DTD',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_element: {\n\t\tdescription: 'End current element',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_end_pi: {\n\t\tdescription: 'End current PI',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_flush: {\n\t\tdescription: 'Flush current buffer',\n\t\tsignature: '([ bool $empty , resource $xmlwriter ]): mixed'\n\t},\n\txmlwriter_full_end_element: {\n\t\tdescription: 'End current element',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_open_memory: {\n\t\tdescription: 'Create new xmlwriter using memory for string output',\n\t\tsignature: '(void): resource'\n\t},\n\txmlwriter_open_uri: {\n\t\tdescription: 'Create new xmlwriter using source uri for output',\n\t\tsignature: '( string $uri ): resource'\n\t},\n\txmlwriter_output_memory: {\n\t\tdescription: 'Returns current buffer',\n\t\tsignature: '([ bool $flush , resource $xmlwriter ]): string'\n\t},\n\txmlwriter_set_indent_string: {\n\t\tdescription: 'Set string used for indenting',\n\t\tsignature: '( string $indentString , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_set_indent: {\n\t\tdescription: 'Toggle indentation on/off',\n\t\tsignature: '( bool $indent , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_attribute_ns: {\n\t\tdescription: 'Create start namespaced attribute',\n\t\tsignature: '( string $prefix , string $name , string $uri , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_attribute: {\n\t\tdescription: 'Create start attribute',\n\t\tsignature: '( string $name , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_cdata: {\n\t\tdescription: 'Create start CDATA tag',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_comment: {\n\t\tdescription: 'Create start comment',\n\t\tsignature: '( resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_document: {\n\t\tdescription: 'Create document tag',\n\t\tsignature: '([ string $version = 1.0 [, string $encoding [, string $standalone , resource $xmlwriter ]]]): bool'\n\t},\n\txmlwriter_start_dtd_attlist: {\n\t\tdescription: 'Create start DTD AttList',\n\t\tsignature: '( string $name , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_dtd_element: {\n\t\tdescription: 'Create start DTD element',\n\t\tsignature: '( string $qualifiedName , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_dtd_entity: {\n\t\tdescription: 'Create start DTD Entity',\n\t\tsignature: '( string $name , bool $isparam , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_dtd: {\n\t\tdescription: 'Create start DTD tag',\n\t\tsignature: '( string $qualifiedName [, string $publicId [, string $systemId , resource $xmlwriter ]]): bool'\n\t},\n\txmlwriter_start_element_ns: {\n\t\tdescription: 'Create start namespaced element tag',\n\t\tsignature: '( string $prefix , string $name , string $uri , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_element: {\n\t\tdescription: 'Create start element tag',\n\t\tsignature: '( string $name , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_start_pi: {\n\t\tdescription: 'Create start PI tag',\n\t\tsignature: '( string $target , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_text: {\n\t\tdescription: 'Write text',\n\t\tsignature: '( string $content , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_attribute_ns: {\n\t\tdescription: 'Write full namespaced attribute',\n\t\tsignature: '( string $prefix , string $name , string $uri , string $content , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_attribute: {\n\t\tdescription: 'Write full attribute',\n\t\tsignature: '( string $name , string $value , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_cdata: {\n\t\tdescription: 'Write full CDATA tag',\n\t\tsignature: '( string $content , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_comment: {\n\t\tdescription: 'Write full comment tag',\n\t\tsignature: '( string $content , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_dtd_attlist: {\n\t\tdescription: 'Write full DTD AttList tag',\n\t\tsignature: '( string $name , string $content , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_dtd_element: {\n\t\tdescription: 'Write full DTD element tag',\n\t\tsignature: '( string $name , string $content , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_dtd_entity: {\n\t\tdescription: 'Write full DTD Entity tag',\n\t\tsignature: '( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_dtd: {\n\t\tdescription: 'Write full DTD tag',\n\t\tsignature: '( string $name [, string $publicId [, string $systemId [, string $subset , resource $xmlwriter ]]]): bool'\n\t},\n\txmlwriter_write_element_ns: {\n\t\tdescription: 'Write full namespaced element tag',\n\t\tsignature: '( string $prefix , string $name , string $uri [, string $content , resource $xmlwriter ]): bool'\n\t},\n\txmlwriter_write_element: {\n\t\tdescription: 'Write full element tag',\n\t\tsignature: '( string $name [, string $content , resource $xmlwriter ]): bool'\n\t},\n\txmlwriter_write_pi: {\n\t\tdescription: 'Writes a PI',\n\t\tsignature: '( string $target , string $content , resource $xmlwriter ): bool'\n\t},\n\txmlwriter_write_raw: {\n\t\tdescription: 'Write a raw XML text',\n\t\tsignature: '( string $content , resource $xmlwriter ): bool'\n\t},\n};\n","module.exports = require(\"path\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\n\nimport PHPCompletionItemProvider from './features/completionItemProvider';\nimport PHPHoverProvider from './features/hoverProvider';\nimport PHPSignatureHelpProvider from './features/signatureHelpProvider';\nimport PHPValidationProvider from './features/validationProvider';\n\nexport function activate(context: vscode.ExtensionContext): any {\n\n\tlet validator = new PHPValidationProvider(context.workspaceState);\n\tvalidator.activate(context.subscriptions);\n\n\t// add providers\n\tcontext.subscriptions.push(vscode.languages.registerCompletionItemProvider('php', new PHPCompletionItemProvider(), '>', '$'));\n\tcontext.subscriptions.push(vscode.languages.registerHoverProvider('php', new PHPHoverProvider()));\n\tcontext.subscriptions.push(vscode.languages.registerSignatureHelpProvider('php', new PHPSignatureHelpProvider(), '(', ','));\n\n\t// need to set in the extension host as well as the completion provider uses it.\n\tvscode.languages.setLanguageConfiguration('php', {\n\t\twordPattern: /(-?\\d*\\.\\d\\w*)|([^\\-\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n\t\tonEnterRules: [\n\t\t\t{\n\t\t\t\t// e.g. /** | */\n\t\t\t\tbeforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n\t\t\t\tafterText: /^\\s*\\*\\/$/,\n\t\t\t\taction: { indentAction: vscode.IndentAction.IndentOutdent, appendText: ' * ' }\n\t\t\t},\n\t\t\t{\n\t\t\t\t// e.g. /** ...|\n\t\t\t\tbeforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n\t\t\t\taction: { indentAction: vscode.IndentAction.None, appendText: ' * ' }\n\t\t\t},\n\t\t\t{\n\t\t\t\t// e.g.  * ...|\n\t\t\t\tbeforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n\t\t\t\taction: { indentAction: vscode.IndentAction.None, appendText: '* ' }\n\t\t\t},\n\t\t\t{\n\t\t\t\t// e.g.  */|\n\t\t\t\tbeforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n\t\t\t\taction: { indentAction: vscode.IndentAction.None, removeText: 1 }\n\t\t\t},\n\t\t\t{\n\t\t\t\t// e.g.  *-----*/|\n\t\t\t\tbeforeText: /^(\\t|(\\ \\ ))*\\ \\*[^/]*\\*\\/\\s*$/,\n\t\t\t\taction: { indentAction: vscode.IndentAction.None, removeText: 1 }\n\t\t\t}\n\t\t]\n\t});\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompletionItemProvider, CompletionItem, CompletionItemKind, CancellationToken, TextDocument, Position, Range, TextEdit, workspace, CompletionContext } from 'vscode';\nimport phpGlobals = require('./phpGlobals');\nimport phpGlobalFunctions = require('./phpGlobalFunctions');\n\nexport default class PHPCompletionItemProvider implements CompletionItemProvider {\n\n\tpublic provideCompletionItems(document: TextDocument, position: Position, _token: CancellationToken, context: CompletionContext): Promise<CompletionItem[]> {\n\t\tlet result: CompletionItem[] = [];\n\n\t\tlet shouldProvideCompletionItems = workspace.getConfiguration('php').get<boolean>('suggest.basic', true);\n\t\tif (!shouldProvideCompletionItems) {\n\t\t\treturn Promise.resolve(result);\n\t\t}\n\n\t\tlet range = document.getWordRangeAtPosition(position);\n\t\tlet prefix = range ? document.getText(range) : '';\n\t\tif (!range) {\n\t\t\trange = new Range(position, position);\n\t\t}\n\n\t\tif (context.triggerCharacter === '>') {\n\t\t\tconst twoBeforeCursor = new Position(position.line, Math.max(0, position.character - 2));\n\t\t\tconst previousTwoChars = document.getText(new Range(twoBeforeCursor, position));\n\t\t\tif (previousTwoChars !== '->') {\n\t\t\t\treturn Promise.resolve(result);\n\t\t\t}\n\t\t}\n\n\t\tlet added: any = {};\n\t\tlet createNewProposal = function (kind: CompletionItemKind, name: string, entry: phpGlobals.IEntry | null): CompletionItem {\n\t\t\tlet proposal: CompletionItem = new CompletionItem(name);\n\t\t\tproposal.kind = kind;\n\t\t\tif (entry) {\n\t\t\t\tif (entry.description) {\n\t\t\t\t\tproposal.documentation = entry.description;\n\t\t\t\t}\n\t\t\t\tif (entry.signature) {\n\t\t\t\t\tproposal.detail = entry.signature;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn proposal;\n\t\t};\n\n\t\tlet matches = (name: string) => {\n\t\t\treturn prefix.length === 0 || name.length >= prefix.length && name.substr(0, prefix.length) === prefix;\n\t\t};\n\n\t\tif (matches('php') && range.start.character >= 2) {\n\t\t\tlet twoBeforePosition = new Position(range.start.line, range.start.character - 2);\n\t\t\tlet beforeWord = document.getText(new Range(twoBeforePosition, range.start));\n\n\t\t\tif (beforeWord === '<?') {\n\t\t\t\tlet proposal = createNewProposal(CompletionItemKind.Class, '<?php', null);\n\t\t\t\tproposal.textEdit = new TextEdit(new Range(twoBeforePosition, position), '<?php');\n\t\t\t\tresult.push(proposal);\n\t\t\t\treturn Promise.resolve(result);\n\t\t\t}\n\t\t}\n\n\t\tfor (let globalvariables in phpGlobals.globalvariables) {\n\t\t\tif (phpGlobals.globalvariables.hasOwnProperty(globalvariables) && matches(globalvariables)) {\n\t\t\t\tadded[globalvariables] = true;\n\t\t\t\tresult.push(createNewProposal(CompletionItemKind.Variable, globalvariables, phpGlobals.globalvariables[globalvariables]));\n\t\t\t}\n\t\t}\n\t\tfor (let globalfunctions in phpGlobalFunctions.globalfunctions) {\n\t\t\tif (phpGlobalFunctions.globalfunctions.hasOwnProperty(globalfunctions) && matches(globalfunctions)) {\n\t\t\t\tadded[globalfunctions] = true;\n\t\t\t\tresult.push(createNewProposal(CompletionItemKind.Function, globalfunctions, phpGlobalFunctions.globalfunctions[globalfunctions]));\n\t\t\t}\n\t\t}\n\t\tfor (let compiletimeconstants in phpGlobals.compiletimeconstants) {\n\t\t\tif (phpGlobals.compiletimeconstants.hasOwnProperty(compiletimeconstants) && matches(compiletimeconstants)) {\n\t\t\t\tadded[compiletimeconstants] = true;\n\t\t\t\tresult.push(createNewProposal(CompletionItemKind.Field, compiletimeconstants, phpGlobals.compiletimeconstants[compiletimeconstants]));\n\t\t\t}\n\t\t}\n\t\tfor (let keywords in phpGlobals.keywords) {\n\t\t\tif (phpGlobals.keywords.hasOwnProperty(keywords) && matches(keywords)) {\n\t\t\t\tadded[keywords] = true;\n\t\t\t\tresult.push(createNewProposal(CompletionItemKind.Keyword, keywords, phpGlobals.keywords[keywords]));\n\t\t\t}\n\t\t}\n\n\t\tlet text = document.getText();\n\t\tif (prefix[0] === '$') {\n\t\t\tlet variableMatch = /\\$([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)/g;\n\t\t\tlet match: RegExpExecArray | null = null;\n\t\t\twhile (match = variableMatch.exec(text)) {\n\t\t\t\tlet word = match[0];\n\t\t\t\tif (!added[word]) {\n\t\t\t\t\tadded[word] = true;\n\t\t\t\t\tresult.push(createNewProposal(CompletionItemKind.Variable, word, null));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet functionMatch = /function\\s+([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)\\s*\\(/g;\n\t\tlet match2: RegExpExecArray | null = null;\n\t\twhile (match2 = functionMatch.exec(text)) {\n\t\t\tlet word2 = match2[1];\n\t\t\tif (!added[word2]) {\n\t\t\t\tadded[word2] = true;\n\t\t\t\tresult.push(createNewProposal(CompletionItemKind.Function, word2, null));\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(result);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { HoverProvider, Hover, MarkedString, TextDocument, CancellationToken, Position, workspace } from 'vscode';\nimport { textToMarkedString } from './utils/markedTextUtil';\nimport phpGlobals = require('./phpGlobals');\nimport phpGlobalFunctions = require('./phpGlobalFunctions');\n\nexport default class PHPHoverProvider implements HoverProvider {\n\n\tpublic provideHover(document: TextDocument, position: Position, _token: CancellationToken): Hover | undefined {\n\t\tlet enable = workspace.getConfiguration('php').get<boolean>('suggest.basic', true);\n\t\tif (!enable) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet wordRange = document.getWordRangeAtPosition(position);\n\t\tif (!wordRange) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet name = document.getText(wordRange);\n\n\t\tlet entry = phpGlobalFunctions.globalfunctions[name] || phpGlobals.compiletimeconstants[name] || phpGlobals.globalvariables[name] || phpGlobals.keywords[name];\n\t\tif (entry && entry.description) {\n\t\t\tlet signature = name + (entry.signature || '');\n\t\t\tlet contents: MarkedString[] = [textToMarkedString(entry.description), { language: 'php', value: signature }];\n\t\t\treturn new Hover(contents, wordRange);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkedString } from 'vscode';\n\nexport function textToMarkedString(text: string): MarkedString {\n\treturn text.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SignatureHelpProvider, SignatureHelp, SignatureInformation, CancellationToken, TextDocument, Position, workspace } from 'vscode';\nimport phpGlobals = require('./phpGlobals');\nimport phpGlobalFunctions = require('./phpGlobalFunctions');\n\nconst _NL = '\\n'.charCodeAt(0);\nconst _TAB = '\\t'.charCodeAt(0);\nconst _WSB = ' '.charCodeAt(0);\nconst _LBracket = '['.charCodeAt(0);\nconst _RBracket = ']'.charCodeAt(0);\nconst _LCurly = '{'.charCodeAt(0);\nconst _RCurly = '}'.charCodeAt(0);\nconst _LParent = '('.charCodeAt(0);\nconst _RParent = ')'.charCodeAt(0);\nconst _Comma = ','.charCodeAt(0);\nconst _Quote = '\\''.charCodeAt(0);\nconst _DQuote = '\"'.charCodeAt(0);\nconst _USC = '_'.charCodeAt(0);\nconst _a = 'a'.charCodeAt(0);\nconst _z = 'z'.charCodeAt(0);\nconst _A = 'A'.charCodeAt(0);\nconst _Z = 'Z'.charCodeAt(0);\nconst _0 = '0'.charCodeAt(0);\nconst _9 = '9'.charCodeAt(0);\n\nconst BOF = 0;\n\n\nclass BackwardIterator {\n\tprivate lineNumber: number;\n\tprivate offset: number;\n\tprivate line: string;\n\tprivate model: TextDocument;\n\n\tconstructor(model: TextDocument, offset: number, lineNumber: number) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.offset = offset;\n\t\tthis.line = model.lineAt(this.lineNumber).text;\n\t\tthis.model = model;\n\t}\n\n\tpublic hasNext(): boolean {\n\t\treturn this.lineNumber >= 0;\n\t}\n\n\tpublic next(): number {\n\t\tif (this.offset < 0) {\n\t\t\tif (this.lineNumber > 0) {\n\t\t\t\tthis.lineNumber--;\n\t\t\t\tthis.line = this.model.lineAt(this.lineNumber).text;\n\t\t\t\tthis.offset = this.line.length - 1;\n\t\t\t\treturn _NL;\n\t\t\t}\n\t\t\tthis.lineNumber = -1;\n\t\t\treturn BOF;\n\t\t}\n\t\tlet ch = this.line.charCodeAt(this.offset);\n\t\tthis.offset--;\n\t\treturn ch;\n\t}\n\n}\n\n\nexport default class PHPSignatureHelpProvider implements SignatureHelpProvider {\n\n\tpublic provideSignatureHelp(document: TextDocument, position: Position, _token: CancellationToken): Promise<SignatureHelp> | null {\n\t\tlet enable = workspace.getConfiguration('php').get<boolean>('suggest.basic', true);\n\t\tif (!enable) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet iterator = new BackwardIterator(document, position.character - 1, position.line);\n\n\t\tlet paramCount = this.readArguments(iterator);\n\t\tif (paramCount < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet ident = this.readIdent(iterator);\n\t\tif (!ident) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet entry = phpGlobalFunctions.globalfunctions[ident] || phpGlobals.keywords[ident];\n\t\tif (!entry || !entry.signature) {\n\t\t\treturn null;\n\t\t}\n\t\tlet paramsString = entry.signature.substring(0, entry.signature.lastIndexOf(')') + 1);\n\t\tlet signatureInfo = new SignatureInformation(ident + paramsString, entry.description);\n\n\t\tlet re = /\\w*\\s+\\&?\\$[\\w_\\.]+|void/g;\n\t\tlet match: RegExpExecArray | null = null;\n\t\twhile ((match = re.exec(paramsString)) !== null) {\n\t\t\tsignatureInfo.parameters.push({ label: match[0], documentation: '' });\n\t\t}\n\t\tlet ret = new SignatureHelp();\n\t\tret.signatures.push(signatureInfo);\n\t\tret.activeSignature = 0;\n\t\tret.activeParameter = Math.min(paramCount, signatureInfo.parameters.length - 1);\n\t\treturn Promise.resolve(ret);\n\t}\n\n\tprivate readArguments(iterator: BackwardIterator): number {\n\t\tlet parentNesting = 0;\n\t\tlet bracketNesting = 0;\n\t\tlet curlyNesting = 0;\n\t\tlet paramCount = 0;\n\t\twhile (iterator.hasNext()) {\n\t\t\tlet ch = iterator.next();\n\t\t\tswitch (ch) {\n\t\t\t\tcase _LParent:\n\t\t\t\t\tparentNesting--;\n\t\t\t\t\tif (parentNesting < 0) {\n\t\t\t\t\t\treturn paramCount;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase _RParent: parentNesting++; break;\n\t\t\t\tcase _LCurly: curlyNesting--; break;\n\t\t\t\tcase _RCurly: curlyNesting++; break;\n\t\t\t\tcase _LBracket: bracketNesting--; break;\n\t\t\t\tcase _RBracket: bracketNesting++; break;\n\t\t\t\tcase _DQuote:\n\t\t\t\tcase _Quote:\n\t\t\t\t\twhile (iterator.hasNext() && ch !== iterator.next()) {\n\t\t\t\t\t\t// find the closing quote or double quote\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase _Comma:\n\t\t\t\t\tif (!parentNesting && !bracketNesting && !curlyNesting) {\n\t\t\t\t\t\tparamCount++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate isIdentPart(ch: number): boolean {\n\t\tif (ch === _USC || // _\n\t\t\tch >= _a && ch <= _z || // a-z\n\t\t\tch >= _A && ch <= _Z || // A-Z\n\t\t\tch >= _0 && ch <= _9 || // 0/9\n\t\t\tch >= 0x80 && ch <= 0xFFFF) { // nonascii\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate readIdent(iterator: BackwardIterator): string {\n\t\tlet identStarted = false;\n\t\tlet ident = '';\n\t\twhile (iterator.hasNext()) {\n\t\t\tlet ch = iterator.next();\n\t\t\tif (!identStarted && (ch === _WSB || ch === _TAB || ch === _NL)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.isIdentPart(ch)) {\n\t\t\t\tidentStarted = true;\n\t\t\t\tident = String.fromCharCode(ch) + ident;\n\t\t\t} else if (identStarted) {\n\t\t\t\treturn ident;\n\t\t\t}\n\t\t}\n\t\treturn ident;\n\t}\n\n}\n",null,"module.exports = require(\"child_process\");","module.exports = require(\"string_decoder\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ITask<T> {\n\t(): T;\n}\n\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tvar throttler = new Throttler();\n * \t\tvar letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Throttler<T> {\n\n\tprivate activePromise: Promise<T> | null;\n\tprivate queuedPromise: Promise<T> | null;\n\tprivate queuedPromiseFactory: ITask<Promise<T>> | null;\n\n\tconstructor() {\n\t\tthis.activePromise = null;\n\t\tthis.queuedPromise = null;\n\t\tthis.queuedPromiseFactory = null;\n\t}\n\n\tpublic queue(promiseFactory: ITask<Promise<T>>): Promise<T> {\n\t\tif (this.activePromise) {\n\t\t\tthis.queuedPromiseFactory = promiseFactory;\n\n\t\t\tif (!this.queuedPromise) {\n\t\t\t\tlet onComplete = () => {\n\t\t\t\t\tthis.queuedPromise = null;\n\n\t\t\t\t\tlet result = this.queue(this.queuedPromiseFactory!);\n\t\t\t\t\tthis.queuedPromiseFactory = null;\n\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\n\t\t\t\tthis.queuedPromise = new Promise<T>((resolve) => {\n\t\t\t\t\tthis.activePromise!.then(onComplete, onComplete).then(resolve);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\t\tthis.queuedPromise!.then(resolve, reject);\n\t\t\t});\n\t\t}\n\n\t\tthis.activePromise = promiseFactory();\n\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tthis.activePromise!.then((result: T) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\tresolve(result);\n\t\t\t}, (err: any) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * A helper to delay execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so the he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tvar delayer = new Delayer(WAITING_PERIOD);\n * \t\tvar letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer<T> {\n\n\tpublic defaultDelay: number;\n\tprivate timeout: NodeJS.Timer | null;\n\tprivate completionPromise: Promise<T> | null;\n\tprivate onResolve: ((value: T | Thenable<T> | undefined) => void) | null;\n\tprivate task: ITask<T> | null;\n\n\tconstructor(defaultDelay: number) {\n\t\tthis.defaultDelay = defaultDelay;\n\t\tthis.timeout = null;\n\t\tthis.completionPromise = null;\n\t\tthis.onResolve = null;\n\t\tthis.task = null;\n\t}\n\n\tpublic trigger(task: ITask<T>, delay: number = this.defaultDelay): Promise<T> {\n\t\tthis.task = task;\n\t\tthis.cancelTimeout();\n\n\t\tif (!this.completionPromise) {\n\t\t\tthis.completionPromise = new Promise<T>((resolve) => {\n\t\t\t\tthis.onResolve = resolve;\n\t\t\t}).then(() => {\n\t\t\t\tthis.completionPromise = null;\n\t\t\t\tthis.onResolve = null;\n\n\t\t\t\tlet result = this.task!();\n\t\t\t\tthis.task = null;\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\n\t\tthis.timeout = setTimeout(() => {\n\t\t\tthis.timeout = null;\n\t\t\tthis.onResolve!(undefined);\n\t\t}, delay);\n\n\t\treturn this.completionPromise;\n\t}\n\n\tpublic isTriggered(): boolean {\n\t\treturn this.timeout !== null;\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.cancelTimeout();\n\n\t\tif (this.completionPromise) {\n\t\t\tthis.completionPromise = null;\n\t\t}\n\t}\n\n\tprivate cancelTimeout(): void {\n\t\tif (this.timeout !== null) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n}\n\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * Simply combine the two mail man strategies from the Throttler and Delayer\n * helpers, for an analogy.\n */\nexport class ThrottledDelayer<T> extends Delayer<Promise<T>> {\n\n\tprivate throttler: Throttler<T>;\n\n\tconstructor(defaultDelay: number) {\n\t\tsuper(defaultDelay);\n\n\t\tthis.throttler = new Throttler<T>();\n\t}\n\n\tpublic trigger(promiseFactory: ITask<Promise<T>>, delay?: number): Promise<Promise<T>> {\n\t\treturn super.trigger(() => this.throttler.queue(promiseFactory), delay);\n\t}\n}","/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path = require(\"path\");\r\nvar fs = require(\"fs\");\r\nvar toString = Object.prototype.toString;\r\nfunction isDefined(value) {\r\n    return typeof value !== 'undefined';\r\n}\r\nfunction isNumber(value) {\r\n    return toString.call(value) === '[object Number]';\r\n}\r\nfunction isString(value) {\r\n    return toString.call(value) === '[object String]';\r\n}\r\nfunction isBoolean(value) {\r\n    return value === true || value === false;\r\n}\r\nfunction readJsonFileSync(filename) {\r\n    return JSON.parse(fs.readFileSync(filename, 'utf8'));\r\n}\r\nvar MessageFormat;\r\n(function (MessageFormat) {\r\n    MessageFormat[\"file\"] = \"file\";\r\n    MessageFormat[\"bundle\"] = \"bundle\";\r\n    MessageFormat[\"both\"] = \"both\";\r\n})(MessageFormat = exports.MessageFormat || (exports.MessageFormat = {}));\r\nvar LocalizeInfo;\r\n(function (LocalizeInfo) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && isDefined(candidate.key) && isDefined(candidate.comment);\r\n    }\r\n    LocalizeInfo.is = is;\r\n})(LocalizeInfo || (LocalizeInfo = {}));\r\nvar resolvedLanguage;\r\nvar resolvedBundles;\r\nvar options;\r\nvar isPseudo;\r\nfunction initializeSettings() {\r\n    options = { locale: undefined, languagePackSupport: false, cacheLanguageResolution: true, messageFormat: MessageFormat.bundle };\r\n    if (isString(process.env.VSCODE_NLS_CONFIG)) {\r\n        try {\r\n            var vscodeOptions = JSON.parse(process.env.VSCODE_NLS_CONFIG);\r\n            if (isString(vscodeOptions.locale)) {\r\n                options.locale = vscodeOptions.locale.toLowerCase();\r\n            }\r\n            if (isBoolean(vscodeOptions._languagePackSupport)) {\r\n                options.languagePackSupport = vscodeOptions._languagePackSupport;\r\n            }\r\n            if (isString(vscodeOptions._cacheRoot)) {\r\n                options.cacheRoot = vscodeOptions._cacheRoot;\r\n            }\r\n            if (isString(vscodeOptions._languagePackId)) {\r\n                options.languagePackId = vscodeOptions._languagePackId;\r\n            }\r\n            if (isString(vscodeOptions._translationsConfigFile)) {\r\n                options.translationsConfigFile = vscodeOptions._translationsConfigFile;\r\n                try {\r\n                    options.translationsConfig = readJsonFileSync(options.translationsConfigFile);\r\n                }\r\n                catch (error) {\r\n                    // We can't read the translation config file. Mark the cache as corrupted.\r\n                    if (vscodeOptions._corruptedFile) {\r\n                        fs.writeFile(vscodeOptions._corruptedFile, 'corrupted', 'utf8', function (err) {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Do nothing.\r\n        }\r\n    }\r\n    isPseudo = options.locale === 'pseudo';\r\n    resolvedLanguage = undefined;\r\n    resolvedBundles = Object.create(null);\r\n}\r\ninitializeSettings();\r\nfunction supportsLanguagePack() {\r\n    return options.languagePackSupport === true && options.cacheRoot !== undefined && options.languagePackId !== undefined && options.translationsConfigFile !== undefined\r\n        && options.translationsConfig !== undefined;\r\n}\r\nfunction format(message, args) {\r\n    var result;\r\n    if (isPseudo) {\r\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\r\n        message = '\\uFF3B' + message.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\r\n    }\r\n    if (args.length === 0) {\r\n        result = message;\r\n    }\r\n    else {\r\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\r\n            var index = rest[0];\r\n            var arg = args[index];\r\n            var replaced = match;\r\n            if (typeof arg === 'string') {\r\n                replaced = arg;\r\n            }\r\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\r\n                replaced = String(arg);\r\n            }\r\n            return replaced;\r\n        });\r\n    }\r\n    return result;\r\n}\r\nfunction createScopedLocalizeFunction(messages) {\r\n    return function (key, message) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (isNumber(key)) {\r\n            if (key >= messages.length) {\r\n                console.error(\"Broken localize call found. Index out of bounds. Stacktrace is\\n: \" + new Error('').stack);\r\n                return;\r\n            }\r\n            return format(messages[key], args);\r\n        }\r\n        else {\r\n            if (isString(message)) {\r\n                console.warn(\"Message \" + message + \" didn't get externalized correctly.\");\r\n                return format(message, args);\r\n            }\r\n            else {\r\n                console.error(\"Broken localize call found. Stacktrace is\\n: \" + new Error('').stack);\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction localize(key, message) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    return format(message, args);\r\n}\r\nfunction resolveLanguage(file) {\r\n    var resolvedLanguage;\r\n    if (options.cacheLanguageResolution && resolvedLanguage) {\r\n        resolvedLanguage = resolvedLanguage;\r\n    }\r\n    else {\r\n        if (isPseudo || !options.locale) {\r\n            resolvedLanguage = '.nls.json';\r\n        }\r\n        else {\r\n            var locale = options.locale;\r\n            while (locale) {\r\n                var candidate = '.nls.' + locale + '.json';\r\n                if (fs.existsSync(file + candidate)) {\r\n                    resolvedLanguage = candidate;\r\n                    break;\r\n                }\r\n                else {\r\n                    var index = locale.lastIndexOf('-');\r\n                    if (index > 0) {\r\n                        locale = locale.substring(0, index);\r\n                    }\r\n                    else {\r\n                        resolvedLanguage = '.nls.json';\r\n                        locale = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (options.cacheLanguageResolution) {\r\n            resolvedLanguage = resolvedLanguage;\r\n        }\r\n    }\r\n    return file + resolvedLanguage;\r\n}\r\nfunction findInTheBoxBundle(root) {\r\n    var locale = options.locale;\r\n    while (locale) {\r\n        var candidate = path.join(root, \"nls.bundle.\" + locale + \".json\");\r\n        if (fs.existsSync(candidate)) {\r\n            return candidate;\r\n        }\r\n        else {\r\n            var index = locale.lastIndexOf('-');\r\n            if (index > 0) {\r\n                locale = locale.substring(0, index);\r\n            }\r\n            else {\r\n                locale = undefined;\r\n            }\r\n        }\r\n    }\r\n    // Test if we can reslove the default bundle.\r\n    if (locale === undefined) {\r\n        var candidate = path.join(root, 'nls.bundle.json');\r\n        if (fs.existsSync(candidate)) {\r\n            return candidate;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction mkdir(directory) {\r\n    try {\r\n        fs.mkdirSync(directory);\r\n    }\r\n    catch (err) {\r\n        if (err.code === 'EEXIST') {\r\n            return;\r\n        }\r\n        else if (err.code === 'ENOENT') {\r\n            var parent = path.dirname(directory);\r\n            if (parent !== directory) {\r\n                mkdir(parent);\r\n                fs.mkdirSync(directory);\r\n            }\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\nfunction createDefaultNlsBundle(folder) {\r\n    var metaData = readJsonFileSync(path.join(folder, 'nls.metadata.json'));\r\n    var result = Object.create(null);\r\n    for (var module_1 in metaData) {\r\n        var entry = metaData[module_1];\r\n        result[module_1] = entry.messages;\r\n    }\r\n    return result;\r\n}\r\nfunction createNLSBundle(header, metaDataPath) {\r\n    var languagePackLocation = options.translationsConfig[header.id];\r\n    if (!languagePackLocation) {\r\n        return undefined;\r\n    }\r\n    var languagePack = readJsonFileSync(languagePackLocation).contents;\r\n    var metaData = readJsonFileSync(path.join(metaDataPath, 'nls.metadata.json'));\r\n    var result = Object.create(null);\r\n    for (var module_2 in metaData) {\r\n        var entry = metaData[module_2];\r\n        var translations = languagePack[header.outDir + \"/\" + module_2];\r\n        if (translations) {\r\n            var resultMessages = [];\r\n            for (var i = 0; i < entry.keys.length; i++) {\r\n                var messageKey = entry.keys[i];\r\n                var key = isString(messageKey) ? messageKey : messageKey.key;\r\n                var translatedMessage = translations[key];\r\n                if (translatedMessage === undefined) {\r\n                    translatedMessage = entry.messages[i];\r\n                }\r\n                resultMessages.push(translatedMessage);\r\n            }\r\n            result[module_2] = resultMessages;\r\n        }\r\n        else {\r\n            result[module_2] = entry.messages;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction touch(file) {\r\n    var d = new Date();\r\n    fs.utimes(file, d, d, function () {\r\n        // Do nothing. Ignore\r\n    });\r\n}\r\nfunction cacheBundle(key, bundle) {\r\n    resolvedBundles[key] = bundle;\r\n    return bundle;\r\n}\r\nfunction loadNlsBundleOrCreateFromI18n(header, bundlePath) {\r\n    var result;\r\n    var bundle = path.join(options.cacheRoot, header.id + \"-\" + header.hash + \".json\");\r\n    var useMemoryOnly = false;\r\n    var writeBundle = false;\r\n    try {\r\n        result = JSON.parse(fs.readFileSync(bundle, { encoding: 'utf8', flag: 'r' }));\r\n        touch(bundle);\r\n        return result;\r\n    }\r\n    catch (err) {\r\n        if (err.code === 'ENOENT') {\r\n            writeBundle = true;\r\n        }\r\n        else if (err instanceof SyntaxError) {\r\n            // We have a syntax error. So no valid JSON. Use\r\n            console.log(\"Syntax error parsing message bundle: \" + err.message + \".\");\r\n            fs.unlink(bundle, function (err) {\r\n                if (err) {\r\n                    console.error(\"Deleting corrupted bundle \" + bundle + \" failed.\");\r\n                }\r\n            });\r\n            useMemoryOnly = true;\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n    result = createNLSBundle(header, bundlePath);\r\n    if (!result || useMemoryOnly) {\r\n        return result;\r\n    }\r\n    if (writeBundle) {\r\n        try {\r\n            fs.writeFileSync(bundle, JSON.stringify(result), { encoding: 'utf8', flag: 'wx' });\r\n        }\r\n        catch (err) {\r\n            if (err.code === 'EEXIST') {\r\n                return result;\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction loadDefaultNlsBundle(bundlePath) {\r\n    try {\r\n        return createDefaultNlsBundle(bundlePath);\r\n    }\r\n    catch (err) {\r\n        console.log(\"Generating default bundle from meta data failed.\", err);\r\n        return undefined;\r\n    }\r\n}\r\nfunction loadNlsBundle(header, bundlePath) {\r\n    var result;\r\n    // Core decided to use a language pack. Do the same in the extension\r\n    if (supportsLanguagePack()) {\r\n        try {\r\n            result = loadNlsBundleOrCreateFromI18n(header, bundlePath);\r\n        }\r\n        catch (err) {\r\n            console.log(\"Load or create bundle failed \", err);\r\n        }\r\n    }\r\n    if (!result) {\r\n        // No language pack found, but core is running in language pack mode\r\n        // Don't try to use old in the box bundles since the might be stale\r\n        // Fall right back to the default bundle.\r\n        if (options.languagePackSupport) {\r\n            return loadDefaultNlsBundle(bundlePath);\r\n        }\r\n        var candidate = findInTheBoxBundle(bundlePath);\r\n        if (candidate) {\r\n            try {\r\n                return readJsonFileSync(candidate);\r\n            }\r\n            catch (err) {\r\n                console.log(\"Loading in the box message bundle failed.\", err);\r\n            }\r\n        }\r\n        result = loadDefaultNlsBundle(bundlePath);\r\n    }\r\n    return result;\r\n}\r\nfunction tryFindMetaDataHeaderFile(file) {\r\n    var result;\r\n    var dirname = path.dirname(file);\r\n    while (true) {\r\n        result = path.join(dirname, 'nls.metadata.header.json');\r\n        if (fs.existsSync(result)) {\r\n            break;\r\n        }\r\n        var parent = path.dirname(dirname);\r\n        if (parent === dirname) {\r\n            result = undefined;\r\n            break;\r\n        }\r\n        else {\r\n            dirname = parent;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction loadMessageBundle(file) {\r\n    if (!file) {\r\n        // No file. We are in dev mode. Return the default\r\n        // localize function.\r\n        return localize;\r\n    }\r\n    // Remove extension since we load json files.\r\n    var ext = path.extname(file);\r\n    if (ext) {\r\n        file = file.substr(0, file.length - ext.length);\r\n    }\r\n    if (options.messageFormat === MessageFormat.both || options.messageFormat === MessageFormat.bundle) {\r\n        var headerFile = tryFindMetaDataHeaderFile(file);\r\n        if (headerFile) {\r\n            var bundlePath = path.dirname(headerFile);\r\n            var bundle = resolvedBundles[bundlePath];\r\n            if (bundle === undefined) {\r\n                try {\r\n                    var header = JSON.parse(fs.readFileSync(headerFile, 'utf8'));\r\n                    try {\r\n                        var nlsBundle = loadNlsBundle(header, bundlePath);\r\n                        bundle = cacheBundle(bundlePath, nlsBundle ? { header: header, nlsBundle: nlsBundle } : null);\r\n                    }\r\n                    catch (err) {\r\n                        console.error('Failed to load nls bundle', err);\r\n                        bundle = cacheBundle(bundlePath, null);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error('Failed to read header file', err);\r\n                    bundle = cacheBundle(bundlePath, null);\r\n                }\r\n            }\r\n            if (bundle) {\r\n                var module_3 = file.substr(bundlePath.length + 1).replace(/\\\\/g, '/');\r\n                var messages = bundle.nlsBundle[module_3];\r\n                if (messages === undefined) {\r\n                    console.error(\"Messages for file \" + file + \" not found. See console for details.\");\r\n                    return function () {\r\n                        return 'Messages not found.';\r\n                    };\r\n                }\r\n                return createScopedLocalizeFunction(messages);\r\n            }\r\n        }\r\n    }\r\n    if (options.messageFormat === MessageFormat.both || options.messageFormat === MessageFormat.file) {\r\n        // Try to load a single file bundle\r\n        try {\r\n            var json = readJsonFileSync(resolveLanguage(file));\r\n            if (Array.isArray(json)) {\r\n                return createScopedLocalizeFunction(json);\r\n            }\r\n            else {\r\n                if (isDefined(json.messages) && isDefined(json.keys)) {\r\n                    return createScopedLocalizeFunction(json.messages);\r\n                }\r\n                else {\r\n                    console.error(\"String bundle '\" + file + \"' uses an unsupported format.\");\r\n                    return function () {\r\n                        return 'File bundle has unsupported format. See console for details';\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err.code !== 'ENOENT') {\r\n                console.error('Failed to load single file bundle', err);\r\n            }\r\n        }\r\n    }\r\n    console.error(\"Failed to load message bundle for file \" + file);\r\n    return function () {\r\n        return 'Failed to load message bundle. See console for details.';\r\n    };\r\n}\r\nexports.loadMessageBundle = loadMessageBundle;\r\nfunction config(opts) {\r\n    if (opts) {\r\n        if (isString(opts.locale)) {\r\n            options.locale = opts.locale.toLowerCase();\r\n            resolvedLanguage = undefined;\r\n            resolvedBundles = Object.create(null);\r\n        }\r\n        if (opts.messageFormat !== undefined) {\r\n            options.messageFormat = opts.messageFormat;\r\n        }\r\n    }\r\n    isPseudo = options.locale === 'pseudo';\r\n    return loadMessageBundle;\r\n}\r\nexports.config = config;\r\n//# sourceMappingURL=main.js.map","module.exports = require(\"fs\");"],"sourceRoot":""}