/// <reference types="node" />
import * as fs from "fs";
import { ClientServerProxy, EncodingOptions, EncodingOptionsCallback } from "../common/proxy";
import { FsModuleProxy, ReadStreamProxy, WatcherProxy, WriteStreamProxy } from "../server/fs";
interface ClientWatcherProxy extends WatcherProxy, ClientServerProxy<fs.FSWatcher> {
}
interface ClientReadStreamProxy extends ReadStreamProxy, ClientServerProxy<fs.ReadStream> {
}
interface ClientWriteStreamProxy extends WriteStreamProxy, ClientServerProxy<fs.WriteStream> {
}
interface ClientFsModuleProxy extends FsModuleProxy, ClientServerProxy {
    createReadStream(path: fs.PathLike, options?: any): Promise<ClientReadStreamProxy>;
    createWriteStream(path: fs.PathLike, options?: any): Promise<ClientWriteStreamProxy>;
    watch(filename: fs.PathLike, options?: EncodingOptions): Promise<ClientWatcherProxy>;
}
export declare class FsModule {
    private readonly proxy;
    private readonly statBatch;
    private readonly lstatBatch;
    private readonly readdirBatch;
    constructor(proxy: ClientFsModuleProxy);
    access: (path: fs.PathLike, mode: number | ((err: NodeJS.ErrnoException) => void) | undefined, callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    appendFile: (path: string | number | Buffer | import("url").URL, data: any, options?: string | {
        encoding?: string | null | undefined;
        mode?: string | number | undefined;
        flag?: string | undefined;
    } | ((err: NodeJS.ErrnoException) => void) | null | undefined, callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    chmod: (path: fs.PathLike, mode: string | number, callback: (err: NodeJS.ErrnoException) => void) => void;
    chown: (path: fs.PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void) => void;
    close: (fd: number, callback: (err: NodeJS.ErrnoException) => void) => void;
    copyFile: (src: fs.PathLike, dest: fs.PathLike, flags: number | ((err: NodeJS.ErrnoException) => void), callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    createReadStream: (path: fs.PathLike, options?: any) => fs.ReadStream;
    createWriteStream: (path: fs.PathLike, options?: any) => fs.WriteStream;
    exists: (path: fs.PathLike, callback: (exists: boolean) => void) => void;
    fchmod: (fd: number, mode: string | number, callback: (err: NodeJS.ErrnoException) => void) => void;
    fchown: (fd: number, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void) => void;
    fdatasync: (fd: number, callback: (err: NodeJS.ErrnoException) => void) => void;
    fstat: (fd: number, callback: (err: NodeJS.ErrnoException, stats: fs.Stats) => void) => void;
    fsync: (fd: number, callback: (err: NodeJS.ErrnoException) => void) => void;
    ftruncate: (fd: number, len: number | ((err: NodeJS.ErrnoException) => void) | null | undefined, callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    futimes: (fd: number, atime: string | number | Date, mtime: string | number | Date, callback: (err: NodeJS.ErrnoException) => void) => void;
    lchmod: (path: fs.PathLike, mode: string | number, callback: (err: NodeJS.ErrnoException) => void) => void;
    lchown: (path: fs.PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void) => void;
    link: (existingPath: fs.PathLike, newPath: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void) => void;
    lstat: (path: fs.PathLike, callback: (err: NodeJS.ErrnoException, stats: fs.Stats) => void) => void;
    mkdir: (path: fs.PathLike, mode: string | number | fs.MakeDirectoryOptions | ((err: NodeJS.ErrnoException) => void) | null | undefined, callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    mkdtemp: (prefix: string, options: EncodingOptionsCallback, callback?: ((err: NodeJS.ErrnoException | null, folder: string | Buffer) => void) | undefined) => void;
    open: (path: fs.PathLike, flags: string | number, mode: string | number | ((err: NodeJS.ErrnoException | null, fd: number) => void) | null | undefined, callback?: ((err: NodeJS.ErrnoException | null, fd: number) => void) | undefined) => void;
    read: (fd: number, buffer: Buffer, offset: number, length: number, position: number | null, callback: (err: NodeJS.ErrnoException, bytesRead: number, buffer: Buffer) => void) => void;
    readFile: (path: string | number | Buffer | import("url").URL, options: EncodingOptionsCallback, callback?: ((err: NodeJS.ErrnoException | null, data: string | Buffer) => void) | undefined) => void;
    readdir: (path: fs.PathLike, options: EncodingOptionsCallback, callback?: ((err: NodeJS.ErrnoException | null, files: string[] | Buffer[] | fs.Dirent[]) => void) | undefined) => void;
    readlink: (path: fs.PathLike, options: EncodingOptionsCallback, callback?: ((err: NodeJS.ErrnoException | null, linkString: string | Buffer) => void) | undefined) => void;
    realpath: (path: fs.PathLike, options: EncodingOptionsCallback, callback?: ((err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void) | undefined) => void;
    rename: (oldPath: fs.PathLike, newPath: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void) => void;
    rmdir: (path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void) => void;
    stat: (path: fs.PathLike, callback: (err: NodeJS.ErrnoException, stats: fs.Stats) => void) => void;
    symlink: (target: fs.PathLike, path: fs.PathLike, type: "dir" | "file" | "junction" | ((err: NodeJS.ErrnoException) => void) | null | undefined, callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    truncate: (path: fs.PathLike, len: number | ((err: NodeJS.ErrnoException) => void) | null | undefined, callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    unlink: (path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void) => void;
    utimes: (path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date, callback: (err: NodeJS.ErrnoException) => void) => void;
    write: (fd: number, buffer: Buffer, offset: number | ((err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void) | undefined, length: number | ((err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void) | undefined, position: number | ((err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void) | undefined, callback?: ((err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void) | undefined) => void;
    writeFile: (path: string | number | Buffer | import("url").URL, data: any, options: EncodingOptionsCallback, callback?: ((err: NodeJS.ErrnoException) => void) | undefined) => void;
    watch: (filename: fs.PathLike, options?: "ascii" | "utf8" | "utf16le" | "ucs2" | "base64" | "latin1" | "binary" | "hex" | {
        encoding?: "ascii" | "utf8" | "utf16le" | "ucs2" | "base64" | "latin1" | "binary" | "hex" | null | undefined;
        flag?: string | undefined;
        mode?: string | undefined;
        persistent?: boolean | undefined;
        recursive?: boolean | undefined;
    } | ((event: string, filename: string | Buffer) => void) | null | undefined, listener?: ((event: string, filename: string | Buffer) => void) | undefined) => fs.FSWatcher;
}
export {};
