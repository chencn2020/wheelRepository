(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Emitter typecasts for a single event type. You can optionally use IDs, but
     * using undefined with IDs will not work. If you emit without an ID, *all*
     * listeners regardless of their ID (or lack thereof) will receive the event.
     * Similarly, if you listen without an ID you will get *all* events for any or
     * no ID.
     */
    var Emitter = /** @class */ (function () {
        function Emitter() {
            this.listeners = [];
            this.idListeners = new Map();
        }
        Object.defineProperty(Emitter.prototype, "event", {
            get: function () {
                var _this = this;
                return function (id, cb) {
                    if (typeof id !== "function") {
                        if (_this.idListeners.has(id)) {
                            _this.idListeners.get(id).push(cb);
                        }
                        else {
                            _this.idListeners.set(id, [cb]);
                        }
                        return {
                            dispose: function () {
                                if (_this.idListeners.has(id)) {
                                    var cbs = _this.idListeners.get(id);
                                    var i = cbs.indexOf(cb);
                                    if (i !== -1) {
                                        cbs.splice(i, 1);
                                    }
                                }
                            },
                        };
                    }
                    cb = id;
                    _this.listeners.push(cb);
                    return {
                        dispose: function () {
                            var i = _this.listeners.indexOf(cb);
                            if (i !== -1) {
                                _this.listeners.splice(i, 1);
                            }
                        },
                    };
                };
            },
            enumerable: true,
            configurable: true
        });
        Emitter.prototype.emit = function (id, value) {
            if ((typeof id === "number" || typeof id === "string") && typeof value !== "undefined") {
                if (this.idListeners.has(id)) {
                    this.idListeners.get(id).forEach(function (cb) { return cb(value); });
                }
                this.listeners.forEach(function (cb) { return cb(value); });
            }
            else {
                this.idListeners.forEach(function (cbs) { return cbs.forEach(function (cb) { return cb(id); }); });
                this.listeners.forEach(function (cb) { return cb(id); });
            }
        };
        Emitter.prototype.dispose = function (id) {
            if (typeof id !== "undefined") {
                this.idListeners.delete(id);
            }
            else {
                this.listeners = [];
                this.idListeners.clear();
            }
        };
        Object.defineProperty(Emitter.prototype, "counts", {
            get: function () {
                var counts = {};
                if (this.listeners.length > 0) {
                    counts["n/a"] = this.listeners.length;
                }
                this.idListeners.forEach(function (cbs, id) {
                    if (cbs.length > 0) {
                        counts["" + id] = cbs.length;
                    }
                });
                return counts;
            },
            enumerable: true,
            configurable: true
        });
        return Emitter;
    }());
    exports.Emitter = Emitter;
});
