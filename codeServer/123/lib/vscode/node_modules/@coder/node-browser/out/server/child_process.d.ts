/// <reference types="node" />
import * as cp from "child_process";
import { ServerProxy } from "../common/proxy";
import { WritableProxy, ReadableProxy } from "./stream";
export declare type ForkProvider = (modulePath: string, args?: string[], options?: cp.ForkOptions) => cp.ChildProcess;
export declare class ChildProcessProxy extends ServerProxy<cp.ChildProcess> {
    private exited;
    constructor(instance: cp.ChildProcess);
    kill(signal?: string): Promise<void>;
    disconnect(): Promise<void>;
    ref(): Promise<void>;
    unref(): Promise<void>;
    send(message: any): Promise<void>;
    getPid(): Promise<number>;
    dispose(): Promise<void>;
}
export interface ChildProcessProxies {
    childProcess: ChildProcessProxy;
    stdin?: WritableProxy | null;
    stdout?: ReadableProxy | null;
    stderr?: ReadableProxy | null;
}
export declare class ChildProcessModuleProxy {
    private readonly forkProvider?;
    constructor(forkProvider?: ForkProvider | undefined);
    exec(command: string, options?: {
        encoding?: string | null;
    } & cp.ExecOptions | null): Promise<ChildProcessProxies>;
    fork(modulePath: string, args?: string[], options?: cp.ForkOptions): Promise<ChildProcessProxies>;
    spawn(command: string, args?: string[], options?: cp.SpawnOptions): Promise<ChildProcessProxies>;
    private returnProxies;
}
