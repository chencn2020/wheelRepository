/// <reference types="node" />
import * as net from "net";
import { ServerProxy } from "../common/proxy";
import { DuplexProxy } from "./stream";
export declare class NetSocketProxy extends DuplexProxy<net.Socket> {
    constructor(socket: net.Socket);
    connect(options: number | string | net.SocketConnectOpts, host?: string): Promise<void>;
    unref(): Promise<void>;
    ref(): Promise<void>;
    dispose(): Promise<void>;
}
export declare class NetServerProxy extends ServerProxy<net.Server> {
    constructor(instance: net.Server);
    listen(handle?: net.ListenOptions | number | string, hostname?: string | number, backlog?: number): Promise<void>;
    ref(): Promise<void>;
    unref(): Promise<void>;
    close(): Promise<void>;
    onConnection(cb: (proxy: NetSocketProxy) => void): Promise<void>;
    dispose(): Promise<void>;
}
export declare class NetModuleProxy {
    createSocket(options?: net.SocketConstructorOpts): Promise<NetSocketProxy>;
    createConnection(target: string | number | net.NetConnectOpts, host?: string): Promise<NetSocketProxy>;
    createServer(options?: {
        allowHalfOpen?: boolean;
        pauseOnConnect?: boolean;
    }): Promise<NetServerProxy>;
}
