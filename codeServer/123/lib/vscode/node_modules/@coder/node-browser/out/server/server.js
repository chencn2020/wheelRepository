var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "os", "../common/connection", "../common/messages", "../common/proxy", "../common/util", "../common/arguments", "./child_process", "./fs", "./net"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var os = require("os");
    var connection_1 = require("../common/connection");
    var Message = require("../common/messages");
    var proxy_1 = require("../common/proxy");
    var util_1 = require("../common/util");
    var arguments_1 = require("../common/arguments");
    var child_process_1 = require("./child_process");
    var fs_1 = require("./fs");
    var net_1 = require("./net");
    /**
     * Handle messages from the client.
     */
    var Server = /** @class */ (function () {
        function Server(connection, options) {
            var _this = this;
            this.connection = connection;
            this.options = options;
            this.proxyId = 0;
            this.proxies = new Map();
            this.status = connection_1.ConnectionStatus.Connected;
            this.responseTimeout = 10000;
            this.logger = (this.options && this.options.logger) || new connection_1.DefaultLogger("server");
            connection.onMessage(function (data) { return __awaiter(_this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.handleMessage(JSON.parse(data))];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.logger.error("failed to handle client message", { error: error_1.message });
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
            var handleDisconnect = function (permanent) {
                _this.lastDisconnect = Date.now();
                _this.status = permanent ? connection_1.ConnectionStatus.Closed : connection_1.ConnectionStatus.Disconnected;
                _this.logger.trace("disconnected" + (permanent ? " permanently" : "") + " from client", { proxies: _this.proxies.size });
                _this.proxies.forEach(function (_, proxyId) {
                    _this.removeProxy(proxyId, permanent, true);
                });
            };
            connection.onDown(function () { return handleDisconnect(); });
            connection.onClose(function () { return handleDisconnect(true); });
            connection.onUp(function () {
                if (_this.status === connection_1.ConnectionStatus.Disconnected) {
                    _this.logger.trace("reconnected to client");
                    _this.status = connection_1.ConnectionStatus.Connected;
                }
            });
            this.storeProxy(new child_process_1.ChildProcessModuleProxy(this.options ? this.options.fork : undefined), proxy_1.Module.ChildProcess);
            this.storeProxy(new fs_1.FsModuleProxy(), proxy_1.Module.Fs);
            this.storeProxy(new net_1.NetModuleProxy(), proxy_1.Module.Net);
        }
        /**
         * Handle all messages from the client.
         */
        Server.prototype.handleMessage = function (message) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this.status !== connection_1.ConnectionStatus.Connected) {
                                return [2 /*return*/, this.logger.trace("discarding message", { message: message })];
                            }
                            _a = message.type;
                            switch (_a) {
                                case Message.Client.Type.Proxy: return [3 /*break*/, 1];
                                case Message.Client.Type.Handshake: return [3 /*break*/, 3];
                                case Message.Client.Type.Ping: return [3 /*break*/, 4];
                            }
                            return [3 /*break*/, 5];
                        case 1: return [4 /*yield*/, this.runMethod(message)];
                        case 2:
                            _b.sent();
                            return [3 /*break*/, 6];
                        case 3:
                            this.send({
                                type: Message.Server.Type.Init,
                                clientId: message.clientId,
                                env: process.env,
                                os: {
                                    platform: os.platform(),
                                    homedir: os.homedir(),
                                    eol: os.EOL,
                                },
                            });
                            return [3 /*break*/, 6];
                        case 4:
                            this.logger.trace("received ping", { proxies: this.proxies.size });
                            this.send({
                                type: Message.Server.Type.Pong,
                                clientId: message.clientId,
                            });
                            return [3 /*break*/, 6];
                        case 5: throw new Error("unknown message type " + message.type);
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Run a method on a proxy.
         */
        Server.prototype.runMethod = function (message) {
            return __awaiter(this, void 0, void 0, function () {
                var clientId, messageId, proxyId, method, args, response, proxy, started, disconnected, value, error_2;
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            clientId = message.clientId;
                            messageId = message.messageId;
                            proxyId = message.proxyId;
                            method = message.method;
                            args = message.args.map(function (a) {
                                return arguments_1.decode(a, function (id, args) { return _this.sendCallback(clientId, proxyId, id, args); }, function (id) { return _this.getProxy(id, "Unable to decode").instance; });
                            });
                            this.logger.trace("received", { clientId: clientId, messageId: messageId, proxyId: proxyId, method: method, args: args });
                            try {
                                proxy = this.getProxy(proxyId, "Unable to call " + method);
                                if (typeof proxy.instance[method] !== "function") {
                                    throw new Error("\"" + method + "\" is not a function on proxy " + proxyId);
                                }
                                // We wait for the client to call "dispose" instead of doing it in onDone
                                // to ensure all messages get processed before we get rid of it.
                                if (method === "dispose") {
                                    response = this.removeProxy(proxyId);
                                }
                                else {
                                    response = (_a = proxy.instance)[method].apply(_a, args);
                                }
                                // Proxies must always return promises.
                                if (!util_1.isPromise(response)) {
                                    throw new Error("\"" + method + "\" must return a promise");
                                }
                            }
                            catch (error) {
                                this.logger.error(error.message, { type: typeof response, proxyId: proxyId });
                                this.sendException(clientId, messageId, error);
                            }
                            started = Date.now();
                            disconnected = function () {
                                return _this.status !== connection_1.ConnectionStatus.Connected ||
                                    (!!started && !!_this.lastDisconnect && started <= _this.lastDisconnect);
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, response];
                        case 2:
                            value = _b.sent();
                            if (!disconnected()) {
                                this.sendResponse(clientId, messageId, value);
                            }
                            else if (util_1.isNonModuleProxy(value)) {
                                this.logger.trace("discarding resolve", { clientId: clientId, messageId: messageId });
                                value.dispose().catch(function (error) { return _this.logger.error(error.message); });
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_2 = _b.sent();
                            if (!disconnected()) {
                                this.sendException(clientId, messageId, error_2);
                            }
                            else {
                                this.logger.trace("discarding reject", { clientId: clientId, messageId: messageId, error: error_2.message });
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send a callback to the client.
         */
        Server.prototype.sendCallback = function (clientId, proxyId, callbackId, args) {
            var _this = this;
            this.logger.trace("sending callback", { clientId: clientId, proxyId: proxyId, callbackId: callbackId });
            this.send({
                type: Message.Server.Type.Callback,
                clientId: clientId,
                callbackId: callbackId,
                proxyId: proxyId,
                args: args.map(function (a) { return _this.encode(clientId, a); }),
            });
        };
        Server.prototype.storeProxy = function (instance, clientOrModuleProxyId) {
            var _this = this;
            this.logger.trace("storing proxy", { proxyId: clientOrModuleProxyId });
            if (util_1.isNonModuleProxy(instance)) {
                if (typeof clientOrModuleProxyId !== "number") {
                    throw new Error("non-module proxies must have numerical IDs");
                }
                var proxyId_1 = this.proxyId++;
                instance.onEvent(function (event) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return _this.sendEvent.apply(_this, [clientOrModuleProxyId, proxyId_1, event].concat(args));
                });
                instance.onDone(function () {
                    var proxy = _this.getProxy(proxyId_1, "Unable to dispose");
                    _this.sendEvent(clientOrModuleProxyId, proxyId_1, "done");
                    proxy.disposeTimeout = setTimeout(function () {
                        _this.removeProxy(proxyId_1);
                    }, _this.responseTimeout);
                });
                this.proxies.set(proxyId_1, { clientId: clientOrModuleProxyId, instance: instance });
                return proxyId_1;
            }
            if (typeof clientOrModuleProxyId !== "string") {
                throw new Error("module proxies must have string IDs");
            }
            this.proxies.set(clientOrModuleProxyId, { instance: instance });
            return clientOrModuleProxyId;
        };
        /**
         * Send an event on a numbered proxy to the client that owns it.
         */
        Server.prototype.sendEvent = function (clientId, proxyId, event) {
            var _this = this;
            var args = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args[_i - 3] = arguments[_i];
            }
            this.logger.trace("sending event", function () { return ({
                clientId: clientId,
                proxyId: proxyId,
                event: event,
                args: args.map(function (a) { return (a instanceof Buffer ? a.toString() : a); }),
            }); });
            this.send({
                type: Message.Server.Type.Event,
                clientId: clientId,
                event: event,
                proxyId: proxyId,
                args: args.map(function (a) { return _this.encode(clientId, a); }),
            });
        };
        /**
         * Send a response back to the client.
         */
        Server.prototype.sendResponse = function (clientId, messageId, response) {
            var encoded = this.encode(clientId, response);
            this.logger.trace("sending resolve", { clientId: clientId, messageId: messageId, response: encoded });
            this.send({
                type: Message.Server.Type.Success,
                clientId: clientId,
                messageId: messageId,
                response: encoded,
            });
        };
        /**
         * Send an exception back to the client.
         */
        Server.prototype.sendException = function (clientId, messageId, error) {
            this.logger.trace("sending reject", { clientId: clientId, messageId: messageId, message: error.message });
            this.send({
                type: Message.Server.Type.Fail,
                clientId: clientId,
                messageId: messageId,
                response: this.encode(clientId, error),
            });
        };
        Server.prototype.isProxyData = function (p) {
            return util_1.isNonModuleProxy(p.instance);
        };
        /**
         * Dispose then remove a proxy. Module proxies are immune to removal unless
         * otherwise specified.
         */
        Server.prototype.removeProxy = function (proxyId, modules, disconnect) {
            return __awaiter(this, void 0, void 0, function () {
                var proxy;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            proxy = this.proxies.get(proxyId);
                            if (!proxy) {
                                throw new Error("unable to remove: proxy " + proxyId + " already removed");
                            }
                            if (!this.isProxyData(proxy)) return [3 /*break*/, 2];
                            // If disconnected we don't want to send any more events.
                            if (disconnect && !proxy.disconnected) {
                                proxy.disconnected = true;
                                proxy.instance.instance.removeAllListeners();
                            }
                            if (!proxy.disposePromise) {
                                clearTimeout(proxy.disposeTimeout);
                                this.logger.trace("disposing proxy", { proxyId: proxyId });
                                proxy.disposePromise = proxy.instance
                                    .dispose()
                                    .then(function () { return _this.logger.trace("disposed proxy", { proxyId: proxyId }); })
                                    .catch(function (error) { return _this.logger.error("failed to dispose proxy", { proxyId: proxyId, error: error.message }); })
                                    .finally(function () {
                                    _this.proxies.delete(proxyId);
                                    _this.logger.trace("removed proxy", { proxyId: proxyId, proxies: _this.proxies.size });
                                });
                            }
                            return [4 /*yield*/, proxy.disposePromise];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            if (modules) {
                                this.proxies.delete(proxyId);
                                this.logger.trace("removed proxy", { proxyId: proxyId, proxies: this.proxies.size });
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Same as encode but provides storeProxy.
         */
        Server.prototype.encode = function (clientId, value) {
            var _this = this;
            return arguments_1.encode(value, undefined, function (p) { return _this.storeProxy(p, clientId); });
        };
        Server.prototype.getProxy = function (proxyId, message) {
            var proxy = this.proxies.get(proxyId);
            if (!proxy || "disposePromise" in proxy) {
                throw new Error(message + ": proxy " + proxyId + " disposed too early");
            }
            return proxy;
        };
        Server.prototype.send = function (message) {
            if (this.status === connection_1.ConnectionStatus.Connected) {
                this.connection.send(JSON.stringify(message));
            }
        };
        return Server;
    }());
    exports.Server = Server;
});
