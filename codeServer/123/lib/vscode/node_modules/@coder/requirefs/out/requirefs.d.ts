import { Resolver } from "./resolver";
declare type Module = any;
export interface FileReader {
    exists(filePath: string): boolean;
    read(filePath: string, encoding?: "utf8"): string | Uint8Array;
}
/**
 * Allow requiring modules and files from a provided file system.
 */
export declare class RequireFS extends Resolver {
    private readonly reader;
    private readonly customModules;
    private readonly requireCache;
    constructor(reader: FileReader);
    /**
     * Provide a custom module.
     */
    provide(moduleName: string, value: Module): void;
    /**
     * Require a path relative to the root.
     */
    require(target: string): Module;
    /**
     * Attempt to require the provided path. If the path requires another path, it
     * will recursively follow the dependency tree and return any exported data.
     */
    private doRequire;
    /**
     * Require a module using NodeJS's `module.require`. Note that script runners
     * (e.g. Jest, which uses `resolve.Sync` under the hood) may interfere.
     */
    private tryNativeRequire;
    protected isFile(filePath: string): boolean;
    readFile(filePath: string): Uint8Array;
    readFile(filePath: string, encoding: "utf8"): string;
}
/**
 * Return a readable and requirable file system from a tar.
 */
export declare const fromTar: (content: Uint8Array) => RequireFS;
/**
 * Return a readable and requirable file system from a zip.
 */
export declare const fromZip: (content: Uint8Array) => RequireFS;
export {};
