{"version":3,"sources":["webpack://WebglAddon/webpack/universalModuleDefinition","webpack://WebglAddon/webpack/bootstrap","webpack://WebglAddon/./src/WebglUtils.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/buffer/Constants.ts","webpack://WebglAddon/./src/RenderModel.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/TypedArrayUtils.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/buffer/AttributeData.ts","webpack://WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://WebglAddon/./src/atlas/CharAtlasCache.ts","webpack://WebglAddon/./src/atlas/CharAtlasUtils.ts","webpack://WebglAddon//home/vsts/work/1/s/src/browser/renderer/atlas/Constants.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/buffer/CellData.ts","webpack://WebglAddon/./src/WebglAddon.ts","webpack://WebglAddon/./src/WebglRenderer.ts","webpack://WebglAddon/./src/GlyphRenderer.ts","webpack://WebglAddon/./src/TypedArray.ts","webpack://WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://WebglAddon/./src/atlas/WebglCharAtlas.ts","webpack://WebglAddon//home/vsts/work/1/s/src/browser/Color.ts","webpack://WebglAddon/./src/renderLayer/CursorRenderLayer.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/input/TextDecoder.ts","webpack://WebglAddon/./src/RectangleRenderer.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/Lifecycle.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/EventEmitter.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","createShader","gl","type","source","shader","throwIfFalsy","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","Error","PROJECTION_MATRIX","Float32Array","vertexSource","fragmentSource","program","createProgram","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","max","newLength","Math","min","length","newArray","DEFAULT_COLOR","DEFAULT_ATTR","CHAR_DATA_ATTR_INDEX","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","CHAR_DATA_CODE_INDEX","NULL_CELL_CHAR","NULL_CELL_WIDTH","NULL_CELL_CODE","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","WHITESPACE_CELL_CODE","RENDER_MODEL_INDICIES_PER_CELL","RENDER_MODEL_BG_OFFSET","RENDER_MODEL_FG_OFFSET","COMBINED_CHAR_BIT_MASK","this","cells","Uint32Array","lineLengths","selection","hasSelection","viewportStartRow","viewportEndRow","viewportCappedStartRow","viewportCappedEndRow","startCol","endCol","resize","cols","rows","indexCount","clear","fill","clearSelection","RenderModel","fillFallback","array","start","end","a","b","result","constructor","set","fg","bg","toColorRGB","fromColorRGB","clone","newObj","AttributeData","isInverse","isBold","isUnderline","isBlink","isInvisible","isItalic","isDim","getFgColorMode","getBgColorMode","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","getFgColor","getBgColor","_container","id","zIndex","_alpha","_colors","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","_canvas","document","createElement","classList","add","style","toString","_initCanvas","appendChild","dispose","removeChild","_charAtlas","_ctx","getContext","alpha","_clearAll","onOptionsChanged","terminal","onBlur","onFocus","onCursorMove","onGridChanged","startRow","endRow","onSelectionChanged","columnSelectMode","setColors","colorSet","_refreshCharAtlas","_setTransparency","oldCanvas","cloneNode","replaceChild","acquireCharAtlas","warmUp","dim","scaledCellWidth","scaledCellHeight","scaledCharWidth","scaledCharHeight","scaledCharLeft","scaledCharTop","width","scaledCanvasWidth","height","scaledCanvasHeight","canvasWidth","canvasHeight","_fillCells","x","y","fillRect","_fillBottomLineAtCells","devicePixelRatio","_fillLeftLineAtCell","_strokeRectAtCell","lineWidth","strokeRect","clearRect","fillStyle","background","css","_clearCells","_fillCharTrueColor","cell","font","_getFont","textBaseline","_clipRow","fillText","getChars","beginPath","rect","clip","getOption","BaseRenderLayer","charAtlasCache","colors","newConfig","generateConfig","ownedByIndex","entry","ownedBy","indexOf","configEquals","config","atlas","splice","push","newEntry","WebglCharAtlas","index","NULL_COLOR","rgba","clonedColors","foreground","cursor","cursorAccent","selectionOpaque","ansi","slice","contrastCache","fontFamily","fontSize","fontWeight","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colorCode","INVERTED_DEFAULT_COLOR","DIM_OPACITY","CHAR_ATLAS_CELL_SPACING","content","combinedData","fromCharData","obj","CellData","setFromCharData","isCombined","getWidth","stringFromCodePoint","getCode","charCodeAt","combined","code","second","getAsCharData","_preserveDrawingBuffer","activate","element","_terminal","renderService","_core","_renderService","_colorManager","_renderer","WebglRenderer","setRenderer","_createRenderer","onResize","undefined","textureAtlas","WebglAddon","preserveDrawingBuffer","_model","_workCell","_onRequestRefreshRows","EventEmitter","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","dimensions","actualCellWidth","actualCellHeight","_devicePixelRatio","_updateDimensions","contextAttributes","antialias","depth","_gl","_rectangleRenderer","RectangleRenderer","_glyphRenderer","GlyphRenderer","onCharSizeChanged","_isAttached","body","contains","event","forEach","cacheCanvas","reset","onDevicePixelRatioChange","setDimensions","_updateSelectionModel","updateSelection","fire","setAtlas","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","_charSizeService","beginFrame","_updateModel","render","row","buffer","ydisp","line","lines","loadCell","chars","updateCell","updateBackgrounds","viewportY","floor","ceil","round","Disposable","vertexShaderSource","fragmentShaderSource","BYTES_PER_CELL","BYTES_PER_ELEMENT","_dimensions","_activeBuffer","_vertices","count","attributes","attributesBuffers","selectionAttributes","_program","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_atlas","_updateCell","rasterizedGlyph","getRasterizedGlyphCombinedChar","getRasterizedGlyph","offset","size","texturePositionClipSpace","sizeClipSpace","model","_updateSelectionRange","startRowEndCol","middleRowsCount","workCell","_getColorFromAnsiIndex","arr","c2","getLine","getCell","idx","viewport","canvas","newCount","renderModel","isSelectionVisible","useProgram","activeBuffer","bufferLength","si","sub","subarray","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","generateMipmap","uniformMatrix4fv","uniform2f","drawElementsInstanced","TRIANGLES","sliceFallback","container","linkifier","onLinkHover","e","_onLinkHover","onLinkLeave","_onLinkLeave","_state","_clearCurrentLink","x1","y1","middleRowCount","y2","x2","is256Color","TEXTURE_WIDTH","TEXTURE_HEIGHT","TEXTURE_CAPACITY","TRANSPARENT_COLOR","NULL_RASTERIZED_GLYPH","texturePosition","TMP_CANVAS_GLYPH_PADDING","_config","_didWarmUp","_cacheMap","_cacheMapCombined","_currentRowY","_currentRowX","_currentRowHeight","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","_tmpCanvas","_tmpCtx","parentElement","_doWarmUp","_drawToCache","rasterizedGlyphSet","rasterizedGlyphSetBg","_getBackgroundColor","bgColorMode","bgColor","inverse","toPaddedHex","_getForegroundCss","fgColorMode","fgColor","bold","minimumContrastCss","_getMinimumContrastCss","channels","toCss","substr","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getCss","bgRgba","fgRgba","ensureContrastRatio","setCss","codeOrChars","String","fromCharCode","save","italic","temp","temp2","backgroundColor","globalCompositeOperation","fontStyle","globalAlpha","restore","imageData","getImageData","color","isEmpty","g","data","clearColor","_findGlyphBoundingBox","clippedImageData","_clipImageData","putImageData","boundingBox","found","alphaOffset","clippedData","Uint8ClampedArray","oldOffset","newOffset","ImageData","rgb","contrastRatio","l1","l2","toRgba","blend","fgR","fgG","fgB","bgR","bgG","bgB","ratio","toColor","opaque","rgbaColor","parseInt","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","toChannels","_onRequestRefreshRowsEvent","_cell","isFocused","_cursorRenderers","_renderBarCursor","_renderBlockCursor","_renderUnderlineCursor","_clearCursor","_cursorBlinkStateManager","pause","cursorY","resume","CursorBlinkStateManager","_render","restartBlinkAnimation","isPaused","triggeredByAnimationFrame","_coreService","isCursorInitialized","isCursorHidden","baseY","viewportRelativeCursorY","cursorX","isTerminalFocused","cursorStyle","_renderBlurCursor","isCursorVisible","strokeStyle","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","setTimeout","time","setInterval","activeElement","textarea","hasFocus","codePoint","codepoint","_interim","decode","input","target","startPos","StringToUtf32","interim","byte1","byte2","byte3","byte4","discardInterim","cp","pos","tmp","missing","fourStop","Utf8ToUtf32","INDICES_PER_RECTANGLE","BYTES_PER_RECTANGLE","INITIAL_BUFFER_RECTANGLE_CAPACITY","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","_bgFloat","_colorToFloat32Array","_selectionFloat","_addRectangleFloat","vertices","rectangleCount","currentStartX","currentBg","currentFg","currentInverse","modelIndex","_updateRectangle","startX","endX","expandFloat32Array","_addRectangle","_disposables","_isDisposed","register","unregister","_listeners","_disposed","_event","listener","arg1","arg2","queue"],"mappings":"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","file":"xterm-addon-webgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..31 (32th bit unused)\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 4 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 3;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n    this.clearSelection();\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray\n  | Int8Array | Int16Array | Int32Array\n  | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n  static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    return newObj;\n  }\n\n  // data\n  public fg: number = 0;\n  public bg: number = 0;\n\n  // flags\n  public isInverse(): number   { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number      { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number     { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number    { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number       { return this.bg & BgFlags.DIM; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._container.removeChild(this._canvas);\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', {alpha: this._alpha}));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number], end: [number, number], columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = <HTMLCanvasElement>this._canvas.cloneNode();\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n        width * this._scaledCellWidth,\n        window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        window.devicePixelRatio * width,\n        this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n        x * this._scaledCellWidth + window.devicePixelRatio / 2,\n        y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n        width * this._scaledCellWidth - window.devicePixelRatio,\n        (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n          x * this._scaledCellWidth,\n          y * this._scaledCellHeight,\n          width * this._scaledCellWidth,\n          height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n          x * this._scaledCellWidth,\n          y * this._scaledCellHeight,\n          width * this._scaledCellWidth,\n          height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = 'middle';\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2);\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: Terminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n        0,\n        y * this._scaledCellHeight,\n        terminal.cols * this._scaledCellWidth,\n        this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.getOption('fontWeightBold') : terminal.getOption('fontWeight');\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.getOption('fontSize') * window.devicePixelRatio}px ${terminal.getOption('fontFamily')}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selection: NULL_COLOR,\n    selectionOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.getOption('fontFamily'),\n    fontSize: terminal.getOption('fontSize'),\n    fontWeight: terminal.getOption('fontWeight') as FontWeight,\n    fontWeightBold: terminal.getOption('fontWeightBold') as FontWeight,\n    allowTransparency: terminal.getOption('allowTransparency'),\n    drawBoldTextInBrightColors: terminal.getOption('drawBoldTextInBrightColors'),\n    minimumContrastRatio: terminal.getOption('minimumContrastRatio'),\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content: number = 0;\n  public fg: number = 0;\n  public bg: number = 0;\n  public combinedData: string = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService =  (<any>terminal)._core._renderService;\n    const colors: IColorSet = (<any>terminal)._core._colorManager.colors;\n    this._renderer = new WebglRenderer(terminal, colors, this._preserveDrawingBuffer);\n    renderService.setRenderer(this._renderer);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (<any>this._terminal)._core._renderService;\n    renderService.setRenderer((<any>this._terminal)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer = undefined;\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from '../../../src/Types';\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRefreshRowsEvent } from 'browser/renderer/Types';\nimport { IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer: RectangleRenderer;\n  private _glyphRenderer: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n\n  private _onRequestRefreshRows = new EventEmitter<IRequestRefreshRowsEvent>();\n  public get onRequestRefreshRows(): IEvent<IRequestRefreshRowsEvent> { return this._onRequestRefreshRows.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (<any>this._terminal)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement, 2, this._colors, this._core),\n      new CursorRenderLayer(this._core.screenElement, 3, this._colors, this._onRequestRefreshRows)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n        throw new Error('WebGL2 not supported');\n    }\n    this._core.screenElement.appendChild(this._canvas);\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n\n    this._isAttached = document.body.contains(this._core.screenElement);\n  }\n\n  public dispose(): void {\n    this._renderLayers.forEach(l => l.dispose());\n    this._core.screenElement.removeChild(this._canvas);\n    super.dispose();\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.cacheCanvas;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    this._renderLayers.forEach(l => {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    });\n\n    this._rectangleRenderer.setColors();\n    this._glyphRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n    this._rectangleRenderer.onResize();\n\n    // Resize all render layers\n    this._renderLayers.forEach(l => l.resize(this._terminal, this.dimensions));\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    this._renderLayers.forEach(l => l.onBlur(this._terminal));\n  }\n\n  public onFocus(): void {\n    this._renderLayers.forEach(l => l.onFocus(this._terminal));\n  }\n\n  public onSelectionChanged(start: [number, number], end: [number, number], columnSelectMode: boolean): void {\n    this._renderLayers.forEach(l => l.onSelectionChanged(this._terminal, start, end, columnSelectMode));\n\n    this._updateSelectionModel(start, end);\n\n    this._rectangleRenderer.updateSelection(this._model.selection, columnSelectMode);\n    this._glyphRenderer.updateSelection(this._model, columnSelectMode);\n\n    this._onRequestRefreshRows.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public onCursorMove(): void {\n    this._renderLayers.forEach(l => l.onCursorMove(this._terminal));\n  }\n\n  public onOptionsChanged(): void {\n    this._renderLayers.forEach(l => l.onOptionsChanged(this._terminal));\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    this._charAtlas = atlas as WebglCharAtlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  public clear(): void {\n    this._renderLayers.forEach(l => l.reset(this._terminal));\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (document.body.contains(this._core.screenElement) && (<any>this._core)._charSizeService.width && (<any>this._core)._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    this._renderLayers.forEach(l => l.onGridChanged(this._terminal, start, end));\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._model.clear();\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model, this._model.selection.hasSelection);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + terminal.buffer.ydisp;\n      const line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      for (let x = 0; x < terminal.cols; x++) {\n        line.loadCell(x, this._workCell);\n\n        const chars = this._workCell.getChars();\n        let code = this._workCell.getCode();\n        const i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._workCell.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._workCell.fg) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code = code | COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._workCell.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._workCell.fg;\n\n        this._glyphRenderer.updateCell(x, y, code, this._workCell.bg, this._workCell.fg, chars);\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n  }\n\n  private _updateSelectionModel(start: [number, number], end: [number, number]): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(<any>this._core)._charSizeService.width || !(<any>this._core)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n\n    // NOTE: ceil fixes sometime, floor does others :s\n\n    this.dimensions.scaledCharWidth = Math.floor((<any>this._core)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil((<any>this._core)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.getOption('lineHeight'));\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._terminal.getOption('lineHeight') === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.getOption('letterSpacing'));\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.getOption('letterSpacing') / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // this.dimensions.scaledCanvasHeight = this.dimensions.canvasHeight * devicePixelRatio;\n    // this.dimensions.scaledCanvasWidth = this.dimensions.canvasWidth * devicePixelRatio;\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\n    // measured in CSS pixels, but the actual char size on the canvas can\n    // differ.\n    // this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n    // this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n\n    // This fixes 110% and 125%, not 150% or 175% though\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { COMBINED_CHAR_BIT_MASK, RENDER_MODEL_INDICIES_PER_CELL, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_BG_OFFSET } from './RenderModel';\nimport { fill } from 'common/TypedArrayUtils';\nimport { slice } from './TypedArray';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CODE, Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal, IBufferLine } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  selectionAttributes: Float32Array;\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\nexport class GlyphRenderer {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ],\n    selectionAttributes: new Float32Array(0)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n    const program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this._program = program;\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, chars: string): void {\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, chars);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, chars?: string): void {\n    const terminal = this._terminal;\n\n    const i = (y * terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null/space character\n    if (code === NULL_CELL_CODE || code === WHITESPACE_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    let rasterizedGlyph: IRasterizedGlyph;\n    if (!this._atlas) {\n      return;\n    }\n    if (chars && chars.length > 1) {\n      rasterizedGlyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg);\n    } else {\n      rasterizedGlyph = this._atlas.getRasterizedGlyph(code, bg, fg);\n    }\n\n    // Fill empty if no glyph was found\n    if (!rasterizedGlyph) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    // a_origin\n    array[i    ] = -rasterizedGlyph.offset.x + this._dimensions.scaledCharLeft;\n    array[i + 1] = -rasterizedGlyph.offset.y + this._dimensions.scaledCharTop;\n    // a_size\n    array[i + 2] = rasterizedGlyph.size.x / this._dimensions.scaledCanvasWidth;\n    array[i + 3] = rasterizedGlyph.size.y / this._dimensions.scaledCanvasHeight;\n    // a_texcoord\n    array[i + 4] = rasterizedGlyph.texturePositionClipSpace.x;\n    array[i + 5] = rasterizedGlyph.texturePositionClipSpace.y;\n    // a_texsize\n    array[i + 6] = rasterizedGlyph.sizeClipSpace.x;\n    array[i + 7] = rasterizedGlyph.sizeClipSpace.y;\n    // a_cellpos only changes on resize\n  }\n\n  public updateSelection(model: IRenderModel, columnSelectMode: boolean): void {\n    const terminal = this._terminal;\n\n    this._vertices.selectionAttributes = slice(this._vertices.attributes, 0);\n\n    const bg = (this._colors.selectionOpaque.rgba >>> 8) | Attributes.CM_RGB;\n\n    if (columnSelectMode) {\n      const startCol = model.selection.startCol;\n      const width = model.selection.endCol - startCol;\n      const height = model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow + 1;\n      for (let y = model.selection.viewportCappedStartRow; y < model.selection.viewportCappedStartRow + height; y++) {\n        this._updateSelectionRange(startCol, startCol + width, y, model, bg);\n      }\n    } else {\n      // Draw first row\n      const startCol = model.selection.viewportStartRow === model.selection.viewportCappedStartRow ? model.selection.startCol : 0;\n      const startRowEndCol = model.selection.viewportCappedStartRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n      this._updateSelectionRange(startCol, startRowEndCol, model.selection.viewportCappedStartRow, model, bg);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow - 1, 0);\n      for (let y = model.selection.viewportCappedStartRow + 1; y <= model.selection.viewportCappedStartRow + middleRowsCount; y++) {\n        this._updateSelectionRange(0, startRowEndCol, y, model, bg);\n      }\n\n      // Draw final row\n      if (model.selection.viewportCappedStartRow !== model.selection.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.selection.viewportEndRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n        this._updateSelectionRange(0, endCol, model.selection.viewportCappedEndRow, model, bg);\n      }\n    }\n  }\n\n  private _updateSelectionRange(startCol: number, endCol: number, y: number, model: IRenderModel, bg: number): void {\n    const terminal = this._terminal;\n    const row = y + terminal.buffer.viewportY;\n    let line: IBufferLine | undefined;\n    for (let x = startCol; x < endCol; x++) {\n      const offset = (y * this._terminal.cols + x) * RENDER_MODEL_INDICIES_PER_CELL;\n      const code = model.cells[offset];\n      let fg = model.cells[offset + RENDER_MODEL_FG_OFFSET];\n      if (fg & FgFlags.INVERSE) {\n        const workCell = new AttributeData();\n        workCell.fg = fg;\n        workCell.bg = model.cells[offset + RENDER_MODEL_BG_OFFSET];\n        // Get attributes from fg (excluding inverse) and resolve inverse by pullibng rgb colors\n        // from bg. This is needed since the inverse fg color should be based on the original bg\n        // color, not on the selection color\n        fg = (fg & ~(Attributes.CM_MASK | Attributes.RGB_MASK | FgFlags.INVERSE));\n        switch (workCell.getBgColorMode()) {\n          case Attributes.CM_P16:\n          case Attributes.CM_P256:\n            const c = this._getColorFromAnsiIndex(workCell.getBgColor()).rgba;\n            fg |= (c >> 8) & Attributes.RED_MASK | (c >> 8) & Attributes.GREEN_MASK | (c >> 8) & Attributes.BLUE_MASK;\n          case Attributes.CM_RGB:\n            const arr = AttributeData.toColorRGB(workCell.getBgColor());\n            fg |= arr[0] << Attributes.RED_SHIFT | arr[1] << Attributes.GREEN_SHIFT | arr[2] << Attributes.BLUE_SHIFT;\n          case Attributes.CM_DEFAULT:\n          default:\n            const c2 = this._colors.background.rgba;\n            fg |= (c2 >> 8) & Attributes.RED_MASK | (c2 >> 8) & Attributes.GREEN_MASK | (c2 >> 8) & Attributes.BLUE_MASK;\n        }\n        fg |= Attributes.CM_RGB;\n      }\n      if (code & COMBINED_CHAR_BIT_MASK) {\n        if (!line) {\n          line = terminal.buffer.getLine(row);\n        }\n        const chars = line!.getCell(x)!.getChars();\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg, chars);\n      } else {\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg);\n      }\n    }\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._colors.ansi[idx];\n  }\n\n  public onResize(): void {\n    const terminal = this._terminal;\n    const gl = this._gl;\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Update vertices\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n    if (this._vertices.count !== newCount) {\n      this._vertices.count = newCount;\n      this._vertices.attributes = new Float32Array(newCount);\n      for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      }\n\n      let i = 0;\n      for (let y = 0; y < terminal.rows; y++) {\n        for (let x = 0; x < terminal.cols; x++) {\n          this._vertices.attributes[i + 8] = x / terminal.cols;\n          this._vertices.attributes[i + 9] = y / terminal.rows;\n          i += INDICES_PER_CELL;\n        }\n      }\n    }\n  }\n\n  public setColors(): void {\n  }\n\n  public render(renderModel: IRenderModel, isSelectionVisible: boolean): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = (isSelectionVisible ? this._vertices.selectionAttributes : this._vertices.attributes).subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray\n  | Int8Array | Int16Array | Int32Array\n  | Float32Array | Float64Array;\n\nexport function slice<T extends TypedArray>(array: T, start?: number, end?: number): T {\n  // all modern engines that support .slice\n  if (array.slice) {\n    return array.slice(start, end) as T;\n  }\n  return sliceFallback(array, start, end);\n}\n\nexport function sliceFallback<T extends TypedArray>(array: T, start: number = 0, end: number = array.length): T {\n  if (start < 0) {\n    start = (array.length + start) % array.length;\n  }\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  start = Math.min(start, end);\n\n  const result: T = new (array.constructor as any)(end - start);\n  for (let i = 0; i < end - start; ++i) {\n    result[i] = array[i + start];\n  }\n  return result;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifierAccessor } from '../../../../src/Types';\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ILinkifierAccessor) {\n    super(container, 'link', zIndex, true, colors);\n    terminal.linkifier.onLinkHover(e => this._onLinkHover(e));\n    terminal.linkifier.onLinkLeave(e => this._onLinkLeave(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onLinkHover(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onLinkLeave(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY } from 'browser/renderer/atlas/Constants';\nimport { IRasterizedGlyph, IBoundingBox, IRasterizedGlyphSet } from '../Types';\nimport { DEFAULT_COLOR, Attributes } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'browser/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { channels, rgba } from 'browser/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: { [code: number]: IRasterizedGlyphSet } = {};\n  private _cacheMapCombined: { [chars: string]: IRasterizedGlyphSet } = {};\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Since glyphs are expected to be around the same height, the packing\n  // strategy used it to fill a row with glyphs while keeping track of the\n  // tallest glyph in the row. Once the row is full a new row is started at\n  // (0,lastRow+lastRowTallestGlyph).\n  private _currentRowY: number = 0;\n  private _currentRowX: number = 0;\n  private _currentRowHeight: number = 0;\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private _config: ICharAtlasConfig\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', {alpha: true}));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCharWidth * 2 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCharHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {alpha: this._config.allowTransparency}));\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  protected _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR);\n      this._cacheMap[i] = {\n        [DEFAULT_COLOR]: {\n          [DEFAULT_COLOR]: rasterizedGlyph\n        }\n      };\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRowY > TEXTURE_CAPACITY) {\n      this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n      this._cacheMap = {};\n      this._currentRowHeight = 0;\n      this._currentRowX = 0;\n      this._currentRowY = 0;\n      this._doWarmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMapCombined[chars];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMapCombined[chars] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(chars, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  public getRasterizedGlyph(code: number, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMap[code];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMap[code] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(code, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor);\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        return {\n          rgba: bgColor << 8,\n          css: `#${toPaddedHex(arr[0])}${toPaddedHex(arr[1])}${toPaddedHex(arr[2])}`\n        };\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground;\n        }\n        return this._config.colors.background;\n    }\n  }\n\n  private _getForegroundCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string {\n    const minimumContrastCss = this._getMinimumContrastCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n    if (minimumContrastCss) {\n      return minimumContrastCss;\n    }\n\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).css;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        return channels.toCss(arr[0], arr[1], arr[2]);\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          const bg = this._config.colors.background.css;\n          if (bg.length === 9) {\n            // Remove bg alpha channel if present\n            return bg.substr(0, 7);\n          }\n          return bg;\n        }\n        return this._config.colors.foreground.css;\n    }\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string | undefined {\n    if (this._config.minimumContrastRatio === 1) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getCss(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setCss(bg, fg, null);\n      return undefined;\n    }\n\n    const css = channels.toCss(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setCss(bg, fg, css);\n\n    return css;\n  }\n\n  private _drawToCache(code: number, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(chars: string, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = 'top';\n\n    this._tmpCtx.fillStyle = this._getForegroundCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n\n    // Apply alpha to dim the character\n    if (dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw the character\n    this._tmpCtx.fillText(chars, TMP_CANVAS_GLYPH_PADDING, TMP_CANVAS_GLYPH_PADDING);\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // TODO: Support transparency\n    // let isEmpty = false;\n    // if (!this._config.allowTransparency) {\n    //   isEmpty = clearColor(imageData, backgroundColor);\n    // }\n\n    // Clear out the background color and determine if the glyph is empty.\n    const isEmpty = clearColor(imageData, backgroundColor);\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Check if there is enough room in the current row and go to next if needed\n    if (this._currentRowX + this._config.scaledCharWidth > TEXTURE_WIDTH) {\n      this._currentRowX = 0;\n      this._currentRowY += this._currentRowHeight;\n      this._currentRowHeight = 0;\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = this._currentRowX;\n    rasterizedGlyph.texturePosition.y = this._currentRowY;\n    rasterizedGlyph.texturePositionClipSpace.x = this._currentRowX / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = this._currentRowY / TEXTURE_HEIGHT;\n\n    // Update atlas current row\n    this._currentRowHeight = Math.max(this._currentRowHeight, rasterizedGlyph.size.y);\n    this._currentRowX += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox): IRasterizedGlyph {\n    boundingBox.top = 0;\n    let found = false;\n    for (let y = 0; y < this._tmpCanvas.height; y++) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < this._tmpCanvas.width; x++) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = this._tmpCanvas.width;\n    found = false;\n    for (let x = this._tmpCanvas.width - 1; x >= 0; x--) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = this._tmpCanvas.height;\n    found = false;\n    for (let y = this._tmpCanvas.height - 1; y >= 0; y--) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + TMP_CANVAS_GLYPH_PADDING,\n        y: -boundingBox.top + TMP_CANVAS_GLYPH_PADDING\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n\nfunction toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor } from 'browser/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    return {\n      css,\n      rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        return reduceLuminance(bgRgba, fgRgba, ratio);\n      }\n      return increaseLuminance(bgRgba, fgRgba, ratio);\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number): IColor {\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions, IRequestRefreshRowsEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRefreshRowsEvent>\n  ) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this.onOptionsChanged(terminal);\n    }\n  }\n\n  public onBlur(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.pause();\n    }\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.cursorY, end: terminal.buffer.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.resume(terminal);\n    } else {\n      this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.cursorY, end: terminal.buffer.cursorY });\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.getOption('cursorBlink')) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\n          this._render(terminal, true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.cursorY, end: terminal.buffer.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    // TODO: Need to expose API for this\n    if (!(terminal as any)._core._coreService.isCursorInitialized || (terminal as any)._core._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.baseY + terminal.buffer.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.viewportY;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(terminal.buffer.cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!isTerminalFocused(terminal)) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.getOption('cursorStyle');\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, terminal.buffer.cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, terminal.buffer.cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = terminal.buffer.cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === terminal.buffer.cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === isTerminalFocused(terminal) &&\n          this._state.style === terminal.getOption('cursorStyle') &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.getOption('cursorStyle') || 'block'](terminal, terminal.buffer.cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = terminal.buffer.cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.getOption('cursorStyle');\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, terminal.getOption('cursorWidth'));\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isTerminalFocused(terminal)) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = <number><any>setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = <number><any>setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n\nfunction isTerminalFocused(terminal: Terminal): boolean {\n  return document.activeElement === terminal.textarea && document.hasFocus();\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF)) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF)) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = (a_position + (a_unitquad * a_size)) / u_resolution;\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  selection: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nexport class RectangleRenderer {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _selectionFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY),\n    selection: new Float32Array(3 * INDICES_PER_RECTANGLE)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n\n    // Uniform locations\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n\n    // Bind selection buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.selection, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, 3);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n    this._selectionFloat = this._colorToFloat32Array(this._colors.selectionOpaque);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateSelection(model: ISelectionRenderModel, columnSelectMode: boolean): void {\n    const terminal = this._terminal;\n\n    if (!model.hasSelection) {\n      fill(this._vertices.selection, 0, 0);\n      return;\n    }\n\n    if (columnSelectMode) {\n      const startCol = model.startCol;\n      const width = model.endCol - startCol;\n      const height = model.viewportCappedEndRow - model.viewportCappedStartRow + 1;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        width * this._dimensions.scaledCellWidth,\n        height * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n      fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE);\n    } else {\n      // Draw first row\n      const startCol = model.viewportStartRow === model.viewportCappedStartRow ? model.startCol : 0;\n      const startRowEndCol = model.viewportCappedStartRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        (startRowEndCol - startCol) * this._dimensions.scaledCellWidth,\n        this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.viewportCappedEndRow - model.viewportCappedStartRow - 1, 0);\n      this._addRectangleFloat(\n        this._vertices.selection,\n        INDICES_PER_RECTANGLE,\n        0,\n        (model.viewportCappedStartRow + 1) * this._dimensions.scaledCellHeight,\n        terminal.cols * this._dimensions.scaledCellWidth,\n        middleRowsCount * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw final row\n      if (model.viewportCappedStartRow !== model.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.viewportEndRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n        this._addRectangleFloat(\n          this._vertices.selection,\n          INDICES_PER_RECTANGLE * 2,\n          0,\n          model.viewportCappedEndRow * this._dimensions.scaledCellHeight,\n          endCol * this._dimensions.scaledCellWidth,\n          this._dimensions.scaledCellHeight,\n          this._selectionFloat\n        );\n      } else {\n        fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE * 2);\n      }\n    }\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    let rectangleCount = 1;\n\n    for (let y = 0; y < terminal.rows; y++) {\n      let currentStartX = -1;\n      let currentBg = 0;\n      let currentFg = 0;\n      let currentInverse = false;\n      for (let x = 0; x < terminal.cols; x++) {\n        const modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        const bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        const fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        const inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    let rgba: number | undefined;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.background.rgba;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    const x1 = startX * this._dimensions.scaledCellWidth;\n    const y1 = y * this._dimensions.scaledCellHeight;\n    const r = ((rgba >> 24) & 0xFF) / 255;\n    const g = ((rgba >> 16) & 0xFF) / 255;\n    const b = ((rgba >> 8 ) & 0xFF) / 255;\n\n    this._addRectangle(vertices.attributes, offset, x1, y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, r, g, b, 1);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    this._disposables.forEach(d => d.dispose());\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   */\n  public register<T extends IDisposable>(d: T): void {\n    this._disposables.push(d);\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n"],"sourceRoot":""}