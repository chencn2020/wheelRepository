{"version":3,"sources":["bootstrap-fork.orig.js"],"names":["bootstrap","require","pipeLoggingToParent","MAX_LENGTH","safeToArray","args","seen","argsArray","res","length","i","Error","errorObj","stack","toString","push","process","env","VSCODE_LOG_STACK","__$stack","split","slice","join","JSON","stringify","key","value","obj","Array","isArray","RegExp","Date","indexOf","error","safeSend","arg","send","VERBOSE_LOGGING","console","log","type","severity","arguments","info","warn","handleExceptions","on","err","reason","terminateWhenParentTerminates","parentPid","Number","isNaN","setInterval","kill","e","exit","configureCrashReporter","crashReporterOptionsRaw","crashReporterOptions","parse","start","enableASARSupport","injectNodeModuleLookupPath","PIPE_LOGGING","load"],"mappings":";;;;AAMA,aAEA,MAAMA,UAAYC,QAAQ,eAgC1B,SAASC,sBACR,MAAMC,EAAa,IAGnB,SAASC,EAAYC,GACpB,MAAMC,EAAO,GACPC,EAAY,GAElB,IAAIC,EAGJ,GAAIH,EAAKI,OACR,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAKI,OAAQC,IAAK,CAKrC,QAAuB,IAAZL,EAAKK,GACfL,EAAKK,GAAK,iBAKN,GAAIL,EAAKK,aAAcC,MAAO,CAClC,MAAMC,EAAWP,EAAKK,GAClBE,EAASC,MACZR,EAAKK,GAAKE,EAASC,MAEnBR,EAAKK,GAAKE,EAASE,WAIrBP,EAAUQ,KAAKV,EAAKK,IAMtB,GAAqC,SAAjCM,QAAQC,IAAIC,iBAA6B,CAC5C,MAAML,GAAQ,IAAIF,OAAQE,MAC1BN,EAAUQ,KAAK,CAAEI,SAAUN,EAAMO,MAAM,MAAMC,MAAM,GAAGC,KAAK,QAG5D,IACCd,EAAMe,KAAKC,UAAUjB,GAAW,SAAUkB,EAAKC,GAG9C,KA8BoB,iBADLC,EA7BFD,IA+BH,OAARC,GACCC,MAAMC,QAAQF,IACbA,aAAeG,QACfH,aAAeI,OAlCIH,MAAMC,QAAQH,GAAQ,CAC5C,IAA6B,IAAzBpB,EAAK0B,QAAQN,GAChB,MAAO,aAGRpB,EAAKS,KAAKW,GAwBd,IAAkBC,EArBf,OAAOD,KAEP,MAAOO,GACR,MAAO,0DAA4DA,EAAMnB,WAAa,IAGvF,OAAIN,GAAOA,EAAIC,OAASN,EAChB,4DAGDK,EAGR,SAAS0B,EAASC,GACjB,IACCnB,QAAQoB,KAAKD,GACZ,MAAOF,KAc0B,SAAhCjB,QAAQC,IAAIoB,iBACfC,QAAQC,IAAM,WAAcL,EAAS,CAAEM,KAAM,aAAcC,SAAU,MAAOC,UAAWtC,EAAYsC,cACnGJ,QAAQK,KAAO,WAAcT,EAAS;AAAEM,KAAM,aAAcC,SAAU,MAAOC,UAAWtC,EAAYsC,cACpGJ,QAAQM,KAAO,WAAcV,EAAS,CAAEM,KAAM,aAAcC,SAAU,OAAQC,UAAWtC,EAAYsC,gBAErGJ,QAAQC,IAAM,aACdD,QAAQM,KAAO,aACfN,QAAQK,KAAO,cAGhBL,QAAQL,MAAQ,WAAcC,EAAS,CAAEM,KAAM,aAAcC,SAAU,QAASC,UAAWtC,EAAYsC,cAGxG,SAASG,mBAIR7B,QAAQ8B,GAAG,qBAAqB,SAAUC,GACzCT,QAAQL,MAAM,uBAAwBc,MAKvC/B,QAAQ8B,GAAG,sBAAsB,SAAUE,GAC1CV,QAAQL,MAAM,gCAAiCe,MAIjD,SAASC,gCACR,MAAMC,EAAYC,OAAOnC,QAAQC,IAAuB,mBAE/B,iBAAdiC,GAA2BE,MAAMF,IAC3CG,aAAY,WACX,IACCrC,QAAQsC,KAAKJ,EAAW,GACvB,MAAOK,GACRvC,QAAQwC,UAEP,KAIL,SAASC,yBACR,MAAMC,EAA0B1C,QAAQC,IAAkC,6BAC1E,GAAuC,iBAA5ByC,EACV,IACC,MAAMC,EAAuBpC,KAAKqC,MAAMF,GACpCC,GACH3C,QAAuB,cAAE6C,MAAMF,GAE/B,MAAO1B,GACRK,QAAQL,MAAMA,IArKjBjC,UAAU8D;AAEN9C,QAAQC,IAA2C,uCACtDjB,UAAU+D,2BAA2B/C,QAAQC,IAA2C,uCAInFD,QAAQoB,MAAqC,SAA7BpB,QAAQC,IAAI+C,cACjC9D,sBAIIc,QAAQC,IAAoC,gCAChD4B,mBAIG7B,QAAQC,IAAuB,mBAClCgC,gCAIDQ,yBAGAxD,QAAQ,mBAAmBgE,KAAKjD,QAAQC,IAAoB","file":"bootstrap-fork.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\nconst bootstrap = require('./bootstrap');\n\n// Enable ASAR in our forked processes\nbootstrap.enableASARSupport();\n\nif (process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tbootstrap.injectNodeModuleLookupPath(process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env.PIPE_LOGGING === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Configure Crash Reporter\nconfigureCrashReporter();\n\n// Load AMD entry point\nrequire('./bootstrap-amd').load(process.env['AMD_ENTRYPOINT']);\n\n//#region Helpers\n\nfunction pipeLoggingToParent() {\n\tconst MAX_LENGTH = 100000;\n\n\t// Prevent circular stringify and convert arguments to real array\n\tfunction safeToArray(args) {\n\t\tconst seen = [];\n\t\tconst argsArray = [];\n\n\t\tlet res;\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof args[i] === 'undefined') {\n\t\t\t\t\targs[i] = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (args[i] instanceof Error) {\n\t\t\t\t\tconst errorObj = args[i];\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targs[i] = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targs[i] = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(args[i]);\n\t\t\t}\n\t\t}\n\n\t\t// Add the stack trace as payload if we are told so. We remove the message and the 2 top frames\n\t\t// to start the stacktrace where the console message was being written\n\t\tif (process.env.VSCODE_LOG_STACK === 'true') {\n\t\t\tconst stack = new Error().stack;\n\t\t\targsArray.push({ __$stack: stack.split('\\n').slice(3).join('\\n') });\n\t\t}\n\n\t\ttry {\n\t\t\tres = JSON.stringify(argsArray, function (key, value) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\treturn 'Output omitted for an object that cannot be inspected (' + error.toString() + ')';\n\t\t}\n\n\t\tif (res && res.length > MAX_LENGTH) {\n\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tfunction safeSend(arg) {\n\t\ttry {\n\t\t\tprocess.send(arg);\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\tfunction isObject(obj) {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env.VERBOSE_LOGGING === 'true') {\n\t\tconsole.log = function () { safeSend({ type: '__$console', severity: 'log', arguments: safeToArray(arguments) }); };\n\t\tconsole.info = function () { safeSend({ type: '__$console', severity: 'log', arguments: safeToArray(arguments) }); };\n\t\tconsole.warn = function () { safeSend({ type: '__$console', severity: 'warn', arguments: safeToArray(arguments) }); };\n\t} else {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t}\n\n\tconsole.error = function () { safeSend({ type: '__$console', severity: 'error', arguments: safeToArray(arguments) }); };\n}\n\nfunction handleExceptions() {\n\n\t// Handle uncaught exceptions\n\t// @ts-ignore\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\t// @ts-ignore\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates() {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter() {\n\tconst crashReporterOptionsRaw = process.env['CRASH_REPORTER_START_OPTIONS'];\n\tif (typeof crashReporterOptionsRaw === 'string') {\n\t\ttry {\n\t\t\tconst crashReporterOptions = JSON.parse(crashReporterOptionsRaw);\n\t\t\tif (crashReporterOptions) {\n\t\t\t\tprocess['crashReporter'].start(crashReporterOptions);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n"]}