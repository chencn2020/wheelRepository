{"version":3,"sources":["bootstrap.js"],"names":["Error","stackTraceLimit","process","on","console","error","exports","injectNodeModuleLookupPath","injectPath","Module","require","nodeModulesPath","join","__dirname","originalResolveLookupPaths","_resolveLookupPaths","moduleName","parent","paths","Array","isArray","i","len","length","splice","enableASARSupport","path","NODE_MODULES_PATH","NODE_MODULES_ASAR_PATH","request","uriFromPath","_path","uri","pathName","resolve","replace","charAt","platform","startsWith","encodeURI","readFile","file","fs","Promise","reject","err","data","writeFile","content","mkdirp","dir","c","e","mkdir","recursive","code","setupNLS","nlsConfig","availableLanguages","env","JSON","parse","_resolvedLanguagePackCoreLocation","bundles","Object","create","loadBundle","bundle","language","cb","result","undefined","bundleFile","then","json","catch","_corruptedFile","configurePortable","product","appRoot","dirname","getApplicationPath","portableDataPath","portableDataName","portable","applicationName","getPortableDataPath","isPortable","existsSync","portableTempPath","isTempPortable","avoidMonkeyPatchFromAppInsights","global"],"mappings":"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","file":"bootstrap.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n//#region global bootstrapping\n\n// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\nError.stackTraceLimit = 100;\n\n// Workaround for Electron not installing a handler to ignore SIGPIPE\n// (https://github.com/electron/electron/issues/13254)\n// @ts-ignore\nprocess.on('SIGPIPE', () => {\n\tconsole.error(new Error('Unexpected SIGPIPE'));\n});\n\n//#endregion\n\n//#region Add support for redirecting the loading of node modules\n\nexports.injectNodeModuleLookupPath = function (injectPath) {\n\tif (!injectPath) {\n\t\tthrow new Error('Missing injectPath');\n\t}\n\n\t// @ts-ignore\n\tconst Module = require('module');\n\tconst path = require('path');\n\n\tconst nodeModulesPath = path.join(__dirname, '../node_modules');\n\n\t// @ts-ignore\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t// @ts-ignore\n\tModule._resolveLookupPaths = function (moduleName, parent) {\n\t\tconst paths = originalResolveLookupPaths(moduleName, parent);\n\t\tif (Array.isArray(paths)) {\n\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\tif (paths[i] === nodeModulesPath) {\n\t\t\t\t\tpaths.splice(i, 0, injectPath);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t};\n};\n//#endregion\n\n//#region Add support for using node_modules.asar\n/**\n * @param {string=} nodeModulesPath\n */\nexports.enableASARSupport = function (nodeModulesPath) {\n\n\t// @ts-ignore\n\tconst Module = require('module');\n\tconst path = require('path');\n\n\tlet NODE_MODULES_PATH = nodeModulesPath;\n\tif (!NODE_MODULES_PATH) {\n\t\tNODE_MODULES_PATH = path.join(__dirname, '../node_modules');\n\t}\n\n\tconst NODE_MODULES_ASAR_PATH = NODE_MODULES_PATH + '.asar';\n\n\t// @ts-ignore\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t// @ts-ignore\n\tModule._resolveLookupPaths = function (request, parent) {\n\t\tconst paths = originalResolveLookupPaths(request, parent);\n\t\tif (Array.isArray(paths)) {\n\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\tif (paths[i] === NODE_MODULES_PATH) {\n\t\t\t\t\tpaths.splice(i, 0, NODE_MODULES_ASAR_PATH);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t};\n};\n//#endregion\n\n//#region URI helpers\n/**\n * @param {string} _path\n * @returns {string}\n */\nexports.uriFromPath = function (_path) {\n\tconst path = require('path');\n\n\tlet pathName = path.resolve(_path).replace(/\\\\/g, '/');\n\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\tpathName = '/' + pathName;\n\t}\n\n\t/** @type {string} */\n\tlet uri;\n\tif (process.platform === 'win32' && pathName.startsWith('//')) { // specially handle Windows UNC paths\n\t\turi = encodeURI('file:' + pathName);\n\t} else {\n\t\turi = encodeURI('file://' + pathName);\n\t}\n\n\treturn uri.replace(/#/g, '%23');\n};\n//#endregion\n\n//#region FS helpers\n/**\n * @param {string} file\n * @returns {Promise<string>}\n */\nexports.readFile = function (file) {\n\tconst fs = require('fs');\n\n\treturn new Promise(function (resolve, reject) {\n\t\tfs.readFile(file, 'utf8', function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresolve(data);\n\t\t});\n\t});\n};\n\n/**\n * @param {string} file\n * @param {string} content\n * @returns {Promise<void>}\n */\nexports.writeFile = function (file, content) {\n\tconst fs = require('fs');\n\n\treturn new Promise(function (resolve, reject) {\n\t\tfs.writeFile(file, content, 'utf8', function (err) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t});\n};\n\n/**\n * @param {string} dir\n * @returns {Promise<string>}\n */\nexports.mkdirp = function mkdirp(dir) {\n\tconst fs = require('fs');\n\n\treturn new Promise((c, e) => fs.mkdir(dir, { recursive: true }, err => (err && err.code !== 'EEXIST') ? e(err) : c(dir)));\n};\n//#endregion\n\n//#region NLS helpers\n/**\n * @returns {{locale?: string, availableLanguages: {[lang: string]: string;}, pseudo?: boolean }}\n */\nexports.setupNLS = function () {\n\tconst path = require('path');\n\n\t// Get the nls configuration into the process.env as early as possible.\n\tlet nlsConfig = { availableLanguages: {} };\n\tif (process.env['VSCODE_NLS_CONFIG']) {\n\t\ttry {\n\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t} catch (e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\n\tif (nlsConfig._resolvedLanguagePackCoreLocation) {\n\t\tconst bundles = Object.create(null);\n\n\t\tnlsConfig.loadBundle = function (bundle, language, cb) {\n\t\t\tconst result = bundles[bundle];\n\t\t\tif (result) {\n\t\t\t\tcb(undefined, result);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst bundleFile = path.join(nlsConfig._resolvedLanguagePackCoreLocation, bundle.replace(/\\//g, '!') + '.nls.json');\n\t\t\texports.readFile(bundleFile).then(function (content) {\n\t\t\t\tconst json = JSON.parse(content);\n\t\t\t\tbundles[bundle] = json;\n\n\t\t\t\tcb(undefined, json);\n\t\t\t}).catch((error) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (nlsConfig._corruptedFile) {\n\t\t\t\t\t\texports.writeFile(nlsConfig._corruptedFile, 'corrupted').catch(function (error) { console.error(error); });\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tcb(error, undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t}\n\n\treturn nlsConfig;\n};\n//#endregion\n\n//#region Portable helpers\n/**\n * @returns {{ portableDataPath: string, isPortable: boolean }}\n */\nexports.configurePortable = function () {\n\t// @ts-ignore\n\tconst product = require('../product.json');\n\tconst path = require('path');\n\tconst fs = require('fs');\n\n\tconst appRoot = path.dirname(__dirname);\n\n\tfunction getApplicationPath() {\n\t\tif (process.env['VSCODE_DEV']) {\n\t\t\treturn appRoot;\n\t\t}\n\n\t\tif (process.platform === 'darwin') {\n\t\t\treturn path.dirname(path.dirname(path.dirname(appRoot)));\n\t\t}\n\n\t\treturn path.dirname(path.dirname(appRoot));\n\t}\n\n\tfunction getPortableDataPath() {\n\t\tif (process.env['VSCODE_PORTABLE']) {\n\t\t\treturn process.env['VSCODE_PORTABLE'];\n\t\t}\n\n\t\tif (process.platform === 'win32' || process.platform === 'linux') {\n\t\t\treturn path.join(getApplicationPath(), 'data');\n\t\t}\n\n\t\tconst portableDataName = product.portable || `${product.applicationName}-portable-data`;\n\t\treturn path.join(path.dirname(getApplicationPath()), portableDataName);\n\t}\n\n\tconst portableDataPath = getPortableDataPath();\n\tconst isPortable = !('target' in product) && fs.existsSync(portableDataPath);\n\tconst portableTempPath = path.join(portableDataPath, 'tmp');\n\tconst isTempPortable = isPortable && fs.existsSync(portableTempPath);\n\n\tif (isPortable) {\n\t\tprocess.env['VSCODE_PORTABLE'] = portableDataPath;\n\t} else {\n\t\tdelete process.env['VSCODE_PORTABLE'];\n\t}\n\n\tif (isTempPortable) {\n\t\tif (process.platform === 'win32') {\n\t\t\tprocess.env['TMP'] = portableTempPath;\n\t\t\tprocess.env['TEMP'] = portableTempPath;\n\t\t} else {\n\t\t\tprocess.env['TMPDIR'] = portableTempPath;\n\t\t}\n\t}\n\n\treturn {\n\t\tportableDataPath,\n\t\tisPortable\n\t};\n};\n//#endregion\n\n//#region ApplicationInsights\n/**\n * Prevents appinsights from monkey patching modules.\n * This should be called before importing the applicationinsights module\n */\nexports.avoidMonkeyPatchFromAppInsights = function () {\n\t// @ts-ignore\n\tprocess.env['APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL'] = true; // Skip monkey patching of 3rd party modules by appinsights\n\tglobal['diagnosticsSource'] = {}; // Prevents diagnostic channel (which patches \"require\") from initializing entirely\n};\n//#endregion\n"]}