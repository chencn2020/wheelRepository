{"version":3,"sources":["vs/code/browser/workbench/fake","vs/code/browser/workbench/file:/repo/lib/vscode/src/vs/server/node/util.ts","vs/code/browser/workbench/file:/repo/lib/vscode/src/vs/code/browser/workbench/workbench.ts"],"names":["__m","__M","deps","result","i","len","length","exports","uriTransformerPath","amd_1","getPathFromAmdModule","require","getUriTransformer","remoteAuthority","rawURITransformer","__$__nodeRequire","rawURITransformerFactory","uriIpc_1","URITransformer","encodePath","path","split","map","p","encodeURIComponent","join","LocalStorageCredentialsProvider","credentials","this","_credentials","serializedCredentials","window","localStorage","getItem","CREDENTIALS_OPENED_KEY","JSON","parse","error","Array","isArray","[object Object]","setItem","stringify","service","account","doGetPassword","credential","password","deletePassword","push","save","found","filter","PollingURLCallbackProvider","lifecycle_1","Disposable","_onCallback","_register","workbench_web_api_1","Emitter","onCallback","event","options","queryValues","Map","requestId","uuid_1","generateUuid","set","QUERY_KEYS","REQUEST_ID","scheme","authority","query","fragment","undefined","SCHEME","AUTHORITY","PATH","QUERY","FRAGMENT","periodicFetchCallback","Date","now","doCreateUri","startTime","request_1","request","url","toString","cancellation_1","CancellationToken","None","content","buffer_1","streamToBuffer","stream","byteLength","fire","URI","revive","console","FETCH_TIMEOUT","setTimeout","FETCH_INTERVAL","index","forEach","value","key","prefix","location","href","with","WorkspaceProvider","workspace","payload","reuse","isSame","targetHref","createTargetUrl","browser_1","isStandalone","open","windows_1","isFolderToOpen","target","folderUri","network_1","Schemas","vscodeRemote","util_1","document","origin","pathname","QUERY_PARAM_FOLDER","isWorkspaceToOpen","workspaceUri","QUERY_PARAM_WORKSPACE","QUERY_PARAM_EMPTY_WINDOW","QUERY_PARAM_PAYLOAD","workspaceA","workspaceB","resources_1","isEqual","configElement","getElementById","configElementAttribute","getAttribute","Error","config","normalizeAuthority","replace","staticExtensions","extension","extensionLocation","Object","create","applicationLinks","uri","from","product_1","default","quality","path_1","posix","sep","label","nls_1","localize","body","assign","workspaceProvider","urlCallbackProvider","credentialsProvider","call"],"mappings":"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","file":"workbench.js","sourcesContent":["}).call(this);","import { getPathFromAmdModule } from 'vs/base/common/amd';\nimport { URITransformer, IRawURITransformer } from 'vs/base/common/uriIpc';\n\nexport const uriTransformerPath = getPathFromAmdModule(require, 'vs/server/node/uriTransformer');\nexport const getUriTransformer = (remoteAuthority: string): URITransformer => {\n\tconst rawURITransformerFactory = <any>require.__$__nodeRequire(uriTransformerPath);\n\tconst rawURITransformer = <IRawURITransformer>rawURITransformerFactory(remoteAuthority);\n\treturn new URITransformer(rawURITransformer);\n};\n\n/**\n * Encode a path for opening via the folder or workspace query parameter. This\n * preserves slashes so it can be edited by hand more easily.\n */\nexport const encodePath = (path: string): string => {\n\treturn path.split(\"/\").map((p) => encodeURIComponent(p)).join(\"/\");\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchConstructionOptions, create, URI, Event, Emitter, UriComponents, ICredentialsProvider, IURLCallbackProvider, IWorkspaceProvider, IWorkspace, IApplicationLink } from 'vs/workbench/workbench.web.api';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { streamToBuffer } from 'vs/base/common/buffer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { request } from 'vs/base/parts/request/browser/request';\nimport { isFolderToOpen, isWorkspaceToOpen } from 'vs/platform/windows/common/windows';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isStandalone } from 'vs/base/browser/browser';\nimport product from 'vs/platform/product/common/product';\nimport { Schemas } from 'vs/base/common/network';\nimport { posix } from 'vs/base/common/path';\nimport { localize } from 'vs/nls';\nimport { encodePath } from 'vs/server/node/util';\n\ninterface ICredential {\n\tservice: string;\n\taccount: string;\n\tpassword: string;\n}\n\nclass LocalStorageCredentialsProvider implements ICredentialsProvider {\n\n\tstatic readonly CREDENTIALS_OPENED_KEY = 'credentials.provider';\n\n\tprivate _credentials: ICredential[] | undefined;\n\tprivate get credentials(): ICredential[] {\n\t\tif (!this._credentials) {\n\t\t\ttry {\n\t\t\t\tconst serializedCredentials = window.localStorage.getItem(LocalStorageCredentialsProvider.CREDENTIALS_OPENED_KEY);\n\t\t\t\tif (serializedCredentials) {\n\t\t\t\t\tthis._credentials = JSON.parse(serializedCredentials);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\t\tif (!Array.isArray(this._credentials)) {\n\t\t\t\tthis._credentials = [];\n\t\t\t}\n\t\t}\n\n\t\treturn this._credentials;\n\t}\n\n\tprivate save(): void {\n\t\twindow.localStorage.setItem(LocalStorageCredentialsProvider.CREDENTIALS_OPENED_KEY, JSON.stringify(this.credentials));\n\t}\n\n\tasync getPassword(service: string, account: string): Promise<string | null> {\n\t\treturn this.doGetPassword(service, account);\n\t}\n\n\tprivate async doGetPassword(service: string, account?: string): Promise<string | null> {\n\t\tfor (const credential of this.credentials) {\n\t\t\tif (credential.service === service) {\n\t\t\t\tif (typeof account !== 'string' || account === credential.account) {\n\t\t\t\t\treturn credential.password;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tasync setPassword(service: string, account: string, password: string): Promise<void> {\n\t\tthis.deletePassword(service, account);\n\n\t\tthis.credentials.push({ service, account, password });\n\n\t\tthis.save();\n\t}\n\n\tasync deletePassword(service: string, account: string): Promise<boolean> {\n\t\tlet found = false;\n\n\t\tthis._credentials = this.credentials.filter(credential => {\n\t\t\tif (credential.service === service && credential.account === account) {\n\t\t\t\tfound = true;\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tif (found) {\n\t\t\tthis.save();\n\t\t}\n\n\t\treturn found;\n\t}\n\n\tasync findPassword(service: string): Promise<string | null> {\n\t\treturn this.doGetPassword(service);\n\t}\n\n\tasync findCredentials(service: string): Promise<Array<{ account: string, password: string }>> {\n\t\treturn this.credentials\n\t\t\t.filter(credential => credential.service === service)\n\t\t\t.map(({ account, password }) => ({ account, password }));\n\t}\n}\n\nclass PollingURLCallbackProvider extends Disposable implements IURLCallbackProvider {\n\n\tstatic readonly FETCH_INTERVAL = 500; \t\t\t// fetch every 500ms\n\tstatic readonly FETCH_TIMEOUT = 5 * 60 * 1000; \t// ...but stop after 5min\n\n\tstatic readonly QUERY_KEYS = {\n\t\tREQUEST_ID: 'vscode-requestId',\n\t\tSCHEME: 'vscode-scheme',\n\t\tAUTHORITY: 'vscode-authority',\n\t\tPATH: 'vscode-path',\n\t\tQUERY: 'vscode-query',\n\t\tFRAGMENT: 'vscode-fragment'\n\t};\n\n\tprivate readonly _onCallback: Emitter<URI> = this._register(new Emitter<URI>());\n\treadonly onCallback: Event<URI> = this._onCallback.event;\n\n\tcreate(options?: Partial<UriComponents>): URI {\n\t\tconst queryValues: Map<string, string> = new Map();\n\n\t\tconst requestId = generateUuid();\n\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.REQUEST_ID, requestId);\n\n\t\tconst { scheme, authority, path, query, fragment } = options ? options : { scheme: undefined, authority: undefined, path: undefined, query: undefined, fragment: undefined };\n\n\t\tif (scheme) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.SCHEME, scheme);\n\t\t}\n\n\t\tif (authority) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.AUTHORITY, authority);\n\t\t}\n\n\t\tif (path) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.PATH, path);\n\t\t}\n\n\t\tif (query) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.QUERY, query);\n\t\t}\n\n\t\tif (fragment) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.FRAGMENT, fragment);\n\t\t}\n\n\t\t// Start to poll on the callback being fired\n\t\tthis.periodicFetchCallback(requestId, Date.now());\n\n\t\treturn this.doCreateUri('/callback', queryValues);\n\t}\n\n\tprivate async periodicFetchCallback(requestId: string, startTime: number): Promise<void> {\n\n\t\t// Ask server for callback results\n\t\tconst queryValues: Map<string, string> = new Map();\n\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.REQUEST_ID, requestId);\n\n\t\tconst result = await request({\n\t\t\turl: this.doCreateUri('/fetch-callback', queryValues).toString(true)\n\t\t}, CancellationToken.None);\n\n\t\t// Check for callback results\n\t\tconst content = await streamToBuffer(result.stream);\n\t\tif (content.byteLength > 0) {\n\t\t\ttry {\n\t\t\t\tthis._onCallback.fire(URI.revive(JSON.parse(content.toString())));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\n\t\t\treturn; // done\n\t\t}\n\n\t\t// Continue fetching unless we hit the timeout\n\t\tif (Date.now() - startTime < PollingURLCallbackProvider.FETCH_TIMEOUT) {\n\t\t\tsetTimeout(() => this.periodicFetchCallback(requestId, startTime), PollingURLCallbackProvider.FETCH_INTERVAL);\n\t\t}\n\t}\n\n\tprivate doCreateUri(path: string, queryValues: Map<string, string>): URI {\n\t\tlet query: string | undefined = undefined;\n\n\t\tif (queryValues) {\n\t\t\tlet index = 0;\n\t\t\tqueryValues.forEach((value, key) => {\n\t\t\t\tif (!query) {\n\t\t\t\t\tquery = '';\n\t\t\t\t}\n\n\t\t\t\tconst prefix = (index++ === 0) ? '' : '&';\n\t\t\t\tquery += `${prefix}${key}=${encodeURIComponent(value)}`;\n\t\t\t});\n\t\t}\n\n\t\treturn URI.parse(window.location.href).with({ path, query });\n\t}\n}\n\nclass WorkspaceProvider implements IWorkspaceProvider {\n\n\tstatic QUERY_PARAM_EMPTY_WINDOW = 'ew';\n\tstatic QUERY_PARAM_FOLDER = 'folder';\n\tstatic QUERY_PARAM_WORKSPACE = 'workspace';\n\n\tstatic QUERY_PARAM_PAYLOAD = 'payload';\n\n\tconstructor(\n\t\tpublic readonly workspace: IWorkspace,\n\t\tpublic readonly payload: object\n\t) { }\n\n\tasync open(workspace: IWorkspace, options?: { reuse?: boolean, payload?: object }): Promise<void> {\n\t\tif (options?.reuse && !options.payload && this.isSame(this.workspace, workspace)) {\n\t\t\treturn; // return early if workspace and environment is not changing and we are reusing window\n\t\t}\n\n\t\tconst targetHref = this.createTargetUrl(workspace, options);\n\t\tif (targetHref) {\n\t\t\tif (options?.reuse) {\n\t\t\t\twindow.location.href = targetHref;\n\t\t\t} else {\n\t\t\t\tif (isStandalone) {\n\t\t\t\t\twindow.open(targetHref, '_blank', 'toolbar=no'); // ensures to open another 'standalone' window!\n\t\t\t\t} else {\n\t\t\t\t\twindow.open(targetHref);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createTargetUrl(workspace: IWorkspace, options?: { reuse?: boolean, payload?: object }): string | undefined {\n\t\t// Empty\n\t\tlet targetHref: string | undefined = undefined;\n\t\tif (!workspace) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW}=true`;\n\t\t}\n\n\t\t// Folder\n\t\telse if (isFolderToOpen(workspace)) {\n\t\t\tconst target = workspace.folderUri.scheme === Schemas.vscodeRemote\n\t\t\t\t? encodePath(workspace.folderUri.path)\n\t\t\t\t: encodeURIComponent(workspace.folderUri.toString());\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_FOLDER}=${target}`;\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isWorkspaceToOpen(workspace)) {\n\t\t\tconst target = workspace.workspaceUri.scheme === Schemas.vscodeRemote\n\t\t\t\t? encodePath(workspace.workspaceUri.path)\n\t\t\t\t: encodeURIComponent(workspace.workspaceUri.toString());\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_WORKSPACE}=${target}`;\n\t\t}\n\n\t\t// Append payload if any\n\t\tif (options?.payload) {\n\t\t\ttargetHref += `&${WorkspaceProvider.QUERY_PARAM_PAYLOAD}=${encodeURIComponent(JSON.stringify(options.payload))}`;\n\t\t}\n\n\t\treturn targetHref;\n\t}\n\n\tprivate isSame(workspaceA: IWorkspace, workspaceB: IWorkspace): boolean {\n\t\tif (!workspaceA || !workspaceB) {\n\t\t\treturn workspaceA === workspaceB; // both empty\n\t\t}\n\n\t\tif (isFolderToOpen(workspaceA) && isFolderToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.folderUri, workspaceB.folderUri); // same workspace\n\t\t}\n\n\t\tif (isWorkspaceToOpen(workspaceA) && isWorkspaceToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.workspaceUri, workspaceB.workspaceUri); // same workspace\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n(function () {\n\n\t// Find config by checking for DOM\n\tconst configElement = document.getElementById('vscode-workbench-web-configuration');\n\tconst configElementAttribute = configElement ? configElement.getAttribute('data-settings') : undefined;\n\tif (!configElement || !configElementAttribute) {\n\t\tthrow new Error('Missing web configuration element');\n\t}\n\n\tconst config: IWorkbenchConstructionOptions & { folderUri?: UriComponents, workspaceUri?: UriComponents } = JSON.parse(configElementAttribute);\n\n\t// Strip the protocol from the authority if it exists.\n\tconst normalizeAuthority = (authority: string): string => authority.replace(/^https?:\\/\\//, \"\");\n\tif (config.remoteAuthority) {\n\t\t(config as any).remoteAuthority = normalizeAuthority(config.remoteAuthority);\n\t}\n\tif (config.workspaceUri && config.workspaceUri.authority) {\n\t\tconfig.workspaceUri.authority = normalizeAuthority(config.workspaceUri.authority);\n\t}\n\tif (config.folderUri && config.folderUri.authority) {\n\t\tconfig.folderUri.authority = normalizeAuthority(config.folderUri.authority);\n\t}\n\n\t// Revive static extension locations\n\tif (Array.isArray(config.staticExtensions)) {\n\t\tconfig.staticExtensions.forEach(extension => {\n\t\t\textension.extensionLocation = URI.revive(extension.extensionLocation);\n\t\t});\n\t}\n\n\t// Find workspace to open and payload\n\tlet foundWorkspace = false;\n\tlet workspace: IWorkspace;\n\tlet payload = Object.create(null);\n\n\t// If no workspace is provided through the URL, check for config attribute from server\n\tif (!foundWorkspace) {\n\t\tif (config.folderUri) {\n\t\t\tworkspace = { folderUri: URI.revive(config.folderUri) };\n\t\t} else if (config.workspaceUri) {\n\t\t\tworkspace = { workspaceUri: URI.revive(config.workspaceUri) };\n\t\t} else {\n\t\t\tworkspace = undefined;\n\t\t}\n\t}\n\n\t// Application links (\"Open in Desktop\")\n\tlet applicationLinks: IApplicationLink[] | undefined = undefined;\n\tif (workspace) {\n\t\tconst workspaceUri = isWorkspaceToOpen(workspace) ? workspace.workspaceUri : isFolderToOpen(workspace) ? workspace.folderUri : undefined;\n\t\tif (workspaceUri) {\n\t\t\tapplicationLinks = [{\n\t\t\t\turi: URI.from({\n\t\t\t\t\tscheme: product.quality === 'stable' ? 'vscode' : 'vscode-insiders',\n\t\t\t\t\tauthority: Schemas.vscodeRemote,\n\t\t\t\t\tpath: posix.join(posix.sep, workspaceUri.authority, workspaceUri.path),\n\t\t\t\t\tquery: workspaceUri.query,\n\t\t\t\t\tfragment: workspaceUri.fragment,\n\t\t\t\t}),\n\t\t\t\tlabel: localize('openInDesktop', \"Open in Desktop\")\n\t\t\t}];\n\t\t}\n\t}\n\n\t// Finally create workbench\n\tcreate(document.body, {\n\t\t...config,\n\t\tworkspaceProvider: new WorkspaceProvider(workspace, payload),\n\t\turlCallbackProvider: new PollingURLCallbackProvider(),\n\t\tcredentialsProvider: new LocalStorageCredentialsProvider(),\n\t\tapplicationLinks: applicationLinks\n\t});\n})();\n"]}