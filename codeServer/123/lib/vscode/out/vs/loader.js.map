{"version":3,"sources":["vs/vs/loader.js","vs/vs/css.js","vs/vs/nls.js"],"names":["define","AMDLoader","CSSLoaderPlugin","NLSLoaderPlugin","_amdLoaderGlobal","this","_commonjsGlobal","global","Environment","_detected","_isWindows","_isNode","_isElectronRenderer","_isWebWorker","Object","defineProperty","prototype","get","_detect","enumerable","configurable","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","isWindows","uri","decodeURI","replace","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ensureError","err","Error","message","String","stack","ConfigurationOptionsUtil","validateConfigurationOptions","options","baseUrl","isBuild","paths","config","catchError","recordStats","urlArgs","onError","phase","console","error","moduleId","neededBy","ignoreDuplicateModules","cspNonce","nodeModules","nodeCachedData","seed","writeDelay","path","undefined","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","isNode","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","OnlyOnceScriptLoader","_scriptLoader","_callbackMap","load","moduleManager","scriptSrc","errorback","isWebWorker","WorkerScriptLoader","NodeScriptLoader","BrowserScriptLoader","scriptCallbacks","triggerCallback","triggerErrorback","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getConfig","getElementsByTagName","appendChild","_didInitialize","_didPatchNodeRequire","_init","_fs","_vm","_path","_crypto","_initNodeRequire","that","Module","_compile","content","hashData","scriptSource","wrap","recorder","getRecorder","cachedDataPath","_getCachedDataPath","data","readFileSync","slice","cachedData","_e","Script","compileWrapper","runInThisContext","dirname","require","mod","constructor","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","makeRequireFunction","args","Buffer","apply","_handleCachedData","_verifyCachedData","opts","nodeInstrumenter","c","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","normalizedScriptSrc_1","normalize","vmScriptPathOrUri_1","_getElectronRendererScriptPathOrUri","wantsCachedData_1","Boolean","cachedDataPath_1","_readSourceAndCachedData","charCodeAt","_BOM","_PREFIX","_SUFFIX","scriptOpts","_createAndEvalScript","contents","ret","globalDefineFunc","getGlobalAMDDefineFunc","receivedDefineCall","localDefineFunc","arguments","amd","call","getGlobalAMDRequireFunc","isElectronRenderer","driveLetterMatch","match","toUpperCase","hash","createHash","update","digest","basename","join","createCachedData","cachedDataRejected","unlink","_createAndWriteCachedData","timeout","ceil","random","lastSize","iteration","createLoop","setTimeout","writeFile","pow","sourcePath","source_1","cachedData_1","hashData_1","steps_1","step_1","readFile","encoding","hashDataNow","equals","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","r","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","warn","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","_err","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","DefineFunc","jQuery","_requireFunc_config","RequireFunc","init","_nodeRequire_1","what","doNotInitLoader","BrowserCSSLoader","_pendingLoads","name","linkNode","_insertLinkNode","head","other","insertBefore","createLinkTag","cssUrl","externalCallback","externalErrorback","_linkTagExists","nameAttr","hrefAttr","links","getAttribute","CSSPlugin","_cssLoader","req","_isPseudo","location","_format","rest","index","arg","isPseudo","localize","createScopedLocalize","scope","idx","defaultValue","restArgs","NLSPlugin","setPseudoTranslation","pluginConfig","language","availableLanguages","findLanguageForModule","suffix","DEFAULT_TAG","messagesLoaded_1","messages","loadBundle"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar _commonjsGlobal = typeof global === 'object' ? global : {};\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    var Environment = /** @class */ (function () {\n        function Environment() {\n            this._detected = false;\n            this._isWindows = false;\n            this._isNode = false;\n            this._isElectronRenderer = false;\n            this._isWebWorker = false;\n        }\n        Object.defineProperty(Environment.prototype, \"isWindows\", {\n            get: function () {\n                this._detect();\n                return this._isWindows;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isNode\", {\n            get: function () {\n                this._detect();\n                return this._isNode;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isElectronRenderer\", {\n            get: function () {\n                this._detect();\n                return this._isElectronRenderer;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isWebWorker\", {\n            get: function () {\n                this._detect();\n                return this._isWebWorker;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Environment.prototype._detect = function () {\n            if (this._detected) {\n                return;\n            }\n            this._detected = true;\n            this._isWindows = Environment._isWindows();\n            this._isNode = (typeof module !== 'undefined' && !!module.exports);\n            this._isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n            this._isWebWorker = (typeof AMDLoader.global.importScripts === 'function');\n        };\n        Environment._isWindows = function () {\n            if (typeof navigator !== 'undefined') {\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                    return true;\n                }\n            }\n            if (typeof process !== 'undefined') {\n                return (process.platform === 'win32');\n            }\n            return false;\n        };\n        return Environment;\n    }());\n    AMDLoader.Environment = Environment;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEvent = /** @class */ (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = /** @class */ (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(1 /* LoaderAvailable */, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = /** @class */ (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n        return NullLoaderEventRecorder;\n    }());\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = /** @class */ (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\n            uri = decodeURI(uri).replace(/%23/g, '#');\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return Utilities.startsWith(id, '===anonymous');\n        };\n        Utilities.getHighPerformanceTimestamp = function () {\n            if (!this.PERFORMANCE_NOW_PROBED) {\n                this.PERFORMANCE_NOW_PROBED = true;\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n            }\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\n        };\n        Utilities.NEXT_ANONYMOUS_ID = 1;\n        Utilities.PERFORMANCE_NOW_PROBED = false;\n        Utilities.HAS_PERFORMANCE_NOW = false;\n        return Utilities;\n    }());\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    function ensureError(err) {\n        if (err instanceof Error) {\n            return err;\n        }\n        var result = new Error(err.message || String(err) || 'Unknown Error');\n        if (err.stack) {\n            result.stack = err.stack;\n        }\n        return result;\n    }\n    AMDLoader.ensureError = ensureError;\n    ;\n    var ConfigurationOptionsUtil = /** @class */ (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\n            function defaultOnError(err) {\n                if (err.phase === 'loading') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error(err);\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.phase === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err);\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                options.catchError = false;\n            }\n            if (typeof options.recordStats === 'undefined') {\n                options.recordStats = false;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (!Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (typeof options.cspNonce !== 'string') {\n                options.cspNonce = '';\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (options.nodeCachedData && typeof options.nodeCachedData === 'object') {\n                if (typeof options.nodeCachedData.seed !== 'string') {\n                    options.nodeCachedData.seed = 'seed';\n                }\n                if (typeof options.nodeCachedData.writeDelay !== 'number' || options.nodeCachedData.writeDelay < 0) {\n                    options.nodeCachedData.writeDelay = 1000 * 7;\n                }\n                if (!options.nodeCachedData.path || typeof options.nodeCachedData.path !== 'string') {\n                    var err = ensureError(new Error('INVALID cached data configuration, \\'path\\' MUST be set'));\n                    err.phase = 'configuration';\n                    options.onError(err);\n                    options.nodeCachedData = undefined;\n                }\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = /** @class */ (function () {\n        function Configuration(env, options) {\n            this._env = env;\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename && this._env.isNode) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (this.options.nodeMain && this._env.isNode) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = /** @class */ (function () {\n        function OnlyOnceScriptLoader(env) {\n            this._env = env;\n            this._scriptLoader = null;\n            this._callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            if (!this._scriptLoader) {\n                this._scriptLoader = (this._env.isWebWorker\n                    ? new WorkerScriptLoader()\n                    : this._env.isNode\n                        ? new NodeScriptLoader(this._env)\n                        : new BrowserScriptLoader());\n            }\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this._callbackMap.hasOwnProperty(scriptSrc)) {\n                this._callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this._callbackMap[scriptSrc] = [scriptCallbacks];\n            this._scriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = /** @class */ (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            // Propagate CSP nonce to dynamically created script tag.\n            var cspNonce = moduleManager.getConfig().getOptionsLiteral().cspNonce;\n            if (cspNonce) {\n                script.setAttribute('nonce', cspNonce);\n            }\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = /** @class */ (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                importScripts(scriptSrc);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = /** @class */ (function () {\n        function NodeScriptLoader(env) {\n            this._env = env;\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            // capture node modules\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            // It is important to check for `nodeCachedData` first and then set `_didPatchNodeRequire`.\n            // That's because `nodeCachedData` is set _after_ calling this for the first time...\n            var nodeCachedData = moduleManager.getConfig().getOptionsLiteral().nodeCachedData;\n            if (!nodeCachedData) {\n                return;\n            }\n            if (this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang and create wrapper function\n                var scriptSource = Module.wrap(content.replace(/^#!.*/, ''));\n                // create script\n                var recorder = moduleManager.getRecorder();\n                var cachedDataPath = that._getCachedDataPath(nodeCachedData, filename);\n                var options = { filename: filename };\n                var hashData;\n                try {\n                    var data = that._fs.readFileSync(cachedDataPath);\n                    hashData = data.slice(0, 16);\n                    options.cachedData = data.slice(16);\n                    recorder.record(60 /* CachedDataFound */, cachedDataPath);\n                }\n                catch (_e) {\n                    recorder.record(61 /* CachedDataMissed */, cachedDataPath);\n                }\n                var script = new that._vm.Script(scriptSource, options);\n                var compileWrapper = script.runInThisContext(options);\n                // run script\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, _commonjsGlobal, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                // cached data aftermath\n                that._handleCachedData(script, scriptSource, cachedDataPath, !options.cachedData, moduleManager);\n                that._verifyCachedData(script, scriptSource, cachedDataPath, hashData, moduleManager);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\n                var normalizedScriptSrc_1 = this._path.normalize(scriptSrc);\n                var vmScriptPathOrUri_1 = this._getElectronRendererScriptPathOrUri(normalizedScriptSrc_1);\n                var wantsCachedData_1 = Boolean(opts.nodeCachedData);\n                var cachedDataPath_1 = wantsCachedData_1 ? this._getCachedDataPath(opts.nodeCachedData, scriptSrc) : undefined;\n                this._readSourceAndCachedData(normalizedScriptSrc_1, cachedDataPath_1, recorder, function (err, data, cachedData, hashData) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var scriptSource;\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        scriptSource = NodeScriptLoader._PREFIX + data.substring(1) + NodeScriptLoader._SUFFIX;\n                    }\n                    else {\n                        scriptSource = NodeScriptLoader._PREFIX + data + NodeScriptLoader._SUFFIX;\n                    }\n                    scriptSource = nodeInstrumenter(scriptSource, normalizedScriptSrc_1);\n                    var scriptOpts = { filename: vmScriptPathOrUri_1, cachedData: cachedData };\n                    var script = _this._createAndEvalScript(moduleManager, scriptSource, scriptOpts, callback, errorback);\n                    _this._handleCachedData(script, scriptSource, cachedDataPath_1, wantsCachedData_1 && !cachedData, moduleManager);\n                    _this._verifyCachedData(script, scriptSource, cachedDataPath_1, hashData, moduleManager);\n                });\n            }\n        };\n        NodeScriptLoader.prototype._createAndEvalScript = function (moduleManager, contents, options, callback, errorback) {\n            var recorder = moduleManager.getRecorder();\n            recorder.record(31 /* NodeBeginEvaluatingScript */, options.filename);\n            var script = new this._vm.Script(contents, options);\n            var ret = script.runInThisContext(options);\n            var globalDefineFunc = moduleManager.getGlobalAMDDefineFunc();\n            var receivedDefineCall = false;\n            var localDefineFunc = function () {\n                receivedDefineCall = true;\n                return globalDefineFunc.apply(null, arguments);\n            };\n            localDefineFunc.amd = globalDefineFunc.amd;\n            ret.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), localDefineFunc, options.filename, this._path.dirname(options.filename));\n            recorder.record(32 /* NodeEndEvaluatingScript */, options.filename);\n            if (receivedDefineCall) {\n                callback();\n            }\n            else {\n                errorback(new Error(\"Didn't receive define call in \" + options.filename + \"!\"));\n            }\n            return script;\n        };\n        NodeScriptLoader.prototype._getElectronRendererScriptPathOrUri = function (path) {\n            if (!this._env.isElectronRenderer) {\n                return path;\n            }\n            var driveLetterMatch = path.match(/^([a-z])\\:(.*)/i);\n            if (driveLetterMatch) {\n                // windows\n                return \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n            }\n            else {\n                // nix\n                return \"file://\" + path;\n            }\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (config, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(config.seed, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(config.path, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._handleCachedData = function (script, scriptSource, cachedDataPath, createCachedData, moduleManager) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // cached data got rejected -> delete and re-create\n                this._fs.unlink(cachedDataPath, function (err) {\n                    moduleManager.getRecorder().record(62 /* CachedDataRejected */, cachedDataPath);\n                    _this._createAndWriteCachedData(script, scriptSource, cachedDataPath, moduleManager);\n                    if (err) {\n                        moduleManager.getConfig().onError(err);\n                    }\n                });\n            }\n            else if (createCachedData) {\n                // no cached data, but wanted\n                this._createAndWriteCachedData(script, scriptSource, cachedDataPath, moduleManager);\n            }\n        };\n        // Cached data format: | SOURCE_HASH | V8_CACHED_DATA |\n        // -SOURCE_HASH is the md5 hash of the JS source (always 16 bytes)\n        // -V8_CACHED_DATA is what v8 produces\n        NodeScriptLoader.prototype._createAndWriteCachedData = function (script, scriptSource, cachedDataPath, moduleManager) {\n            var _this = this;\n            var timeout = Math.ceil(moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay * (1 + Math.random()));\n            var lastSize = -1;\n            var iteration = 0;\n            var hashData = undefined;\n            var createLoop = function () {\n                setTimeout(function () {\n                    if (!hashData) {\n                        hashData = _this._crypto.createHash('md5').update(scriptSource, 'utf8').digest();\n                    }\n                    var cachedData = script.createCachedData();\n                    if (cachedData.length === 0 || cachedData.length === lastSize || iteration >= 5) {\n                        return;\n                    }\n                    lastSize = cachedData.length;\n                    _this._fs.writeFile(cachedDataPath, Buffer.concat([hashData, cachedData]), function (err) {\n                        if (err) {\n                            moduleManager.getConfig().onError(err);\n                        }\n                        moduleManager.getRecorder().record(63 /* CachedDataCreated */, cachedDataPath);\n                        createLoop();\n                    });\n                }, timeout * (Math.pow(4, iteration++)));\n            };\n            // with some delay (`timeout`) create cached data\n            // and repeat that (with backoff delay) until the\n            // data seems to be not changing anymore\n            createLoop();\n        };\n        NodeScriptLoader.prototype._readSourceAndCachedData = function (sourcePath, cachedDataPath, recorder, callback) {\n            if (!cachedDataPath) {\n                // no cached data case\n                this._fs.readFile(sourcePath, { encoding: 'utf8' }, callback);\n            }\n            else {\n                // cached data case: read both files in parallel\n                var source_1 = undefined;\n                var cachedData_1 = undefined;\n                var hashData_1 = undefined;\n                var steps_1 = 2;\n                var step_1 = function (err) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else if (--steps_1 === 0) {\n                        callback(undefined, source_1, cachedData_1, hashData_1);\n                    }\n                };\n                this._fs.readFile(sourcePath, { encoding: 'utf8' }, function (err, data) {\n                    source_1 = data;\n                    step_1(err);\n                });\n                this._fs.readFile(cachedDataPath, function (err, data) {\n                    if (!err && data && data.length > 0) {\n                        hashData_1 = data.slice(0, 16);\n                        cachedData_1 = data.slice(16);\n                        recorder.record(60 /* CachedDataFound */, cachedDataPath);\n                    }\n                    else {\n                        recorder.record(61 /* CachedDataMissed */, cachedDataPath);\n                    }\n                    step_1(); // ignored: cached data is optional\n                });\n            }\n        };\n        NodeScriptLoader.prototype._verifyCachedData = function (script, scriptSource, cachedDataPath, hashData, moduleManager) {\n            var _this = this;\n            if (!hashData) {\n                // nothing to do\n                return;\n            }\n            if (script.cachedDataRejected) {\n                // invalid anyways\n                return;\n            }\n            setTimeout(function () {\n                // check source hash - the contract is that file paths change when file content\n                // change (e.g use the commit or version id as cache path). this check is\n                // for violations of this contract.\n                var hashDataNow = _this._crypto.createHash('md5').update(scriptSource, 'utf8').digest();\n                if (!hashData.equals(hashDataNow)) {\n                    moduleManager.getConfig().onError(new Error(\"FAILED TO VERIFY CACHED DATA, deleting stale '\" + cachedDataPath + \"' now, but a RESTART IS REQUIRED\"));\n                    _this._fs.unlink(cachedDataPath, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().onError(err);\n                        }\n                    });\n                }\n            }, Math.ceil(5000 * (1 + Math.random())));\n        };\n        NodeScriptLoader._BOM = 0xFEFF;\n        NodeScriptLoader._PREFIX = '(function (require, define, __filename, __dirname) { ';\n        NodeScriptLoader._SUFFIX = '\\n});';\n        return NodeScriptLoader;\n    }());\n    function createScriptLoader(env) {\n        return new OnlyOnceScriptLoader(env);\n    }\n    AMDLoader.createScriptLoader = createScriptLoader;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = /** @class */ (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        ModuleIdResolver.ROOT = new ModuleIdResolver('');\n        return ModuleIdResolver;\n    }());\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = /** @class */ (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.error = null;\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(21 /* BeginInvokeFactory */, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(22 /* EndInvokeFactory */, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                var err = AMDLoader.ensureError(producedError);\n                err.phase = 'factory';\n                err.moduleId = this.strId;\n                this.error = err;\n                config.onError(err);\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            this._isComplete = true;\n            this.error = err;\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = /** @class */ (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = /** @class */ (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n        RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n        RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n        return RegularDependency;\n    }());\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = /** @class */ (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = /** @class */ (function () {\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._env = env;\n            this._scriptLoader = scriptLoader;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._defineFunc = defineFunc;\n            this._requireFunc = requireFunc;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration(this._env);\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._recorder = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager.prototype.reset = function () {\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\n        };\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\n            return this._defineFunc;\n        };\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\n            return this._requireFunc;\n        };\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack || null;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = (m.dependencies || []).map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            if (m.error) {\n                throw m.error;\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(this._env, params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, _err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            var err = AMDLoader.ensureError(_err);\n            err.phase = 'loading';\n            err.moduleId = strModuleId;\n            err.neededBy = neededBy;\n            return err;\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            if (!this._modules2[moduleId]) {\n                this._modules2[moduleId] = new Module(moduleId, this._moduleIdProvider.getStrModuleId(moduleId), [], function () { }, function () { }, null);\n            }\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            if (dependencies) {\n                for (var i = 0, len = dependencies.length; i < len; i++) {\n                    var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                    if (path !== null) {\n                        path.push(fromId);\n                        return path;\n                    }\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            var scopedPackageRegex = /^@[^\\/]+\\/[^\\/]+$/; // matches @scope/package-name\n            if (this._env.isNode && (strModuleId.indexOf('/') === -1 || scopedPackageRegex.test(strModuleId))) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(10 /* BeginLoadingScript */, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(11 /* EndLoadingScriptOK */, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(12 /* EndLoadingScriptError */, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            if (dependencies) {\n                for (var i = 0, len = dependencies.length; i < len; i++) {\n                    var dependency = dependencies[i];\n                    if (dependency === RegularDependency.EXPORTS) {\n                        module.exportsPassedIn = true;\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    if (dependency === RegularDependency.MODULE) {\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    if (dependency === RegularDependency.REQUIRE) {\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    var dependencyModule = this._modules2[dependency.id];\n                    if (dependencyModule && dependencyModule.isComplete()) {\n                        if (dependencyModule.error) {\n                            module.onDependencyError(dependencyModule.error);\n                            return;\n                        }\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    if (this._hasDependencyPath(dependency.id, module.id)) {\n                        console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                        var cyclePath = this._findCyclePath(dependency.id, module.id, 0) || [];\n                        cyclePath.reverse();\n                        cyclePath.push(dependency.id);\n                        console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                        // Break the cycle\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    // record inverse dependency\n                    this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                    this._inverseDependencies2[dependency.id].push(module.id);\n                    if (dependency instanceof PluginDependency) {\n                        var plugin = this._modules2[dependency.pluginId];\n                        if (plugin && plugin.isComplete()) {\n                            this._loadPluginDependency(plugin.exports, dependency);\n                            continue;\n                        }\n                        // Record dependency for when the plugin gets loaded\n                        var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                        if (!inversePluginDeps) {\n                            inversePluginDeps = [];\n                            this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                        }\n                        inversePluginDeps.push(dependency);\n                        this._loadModule(dependency.pluginId);\n                        continue;\n                    }\n                    this._loadModule(dependency.id);\n                }\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            if (dependencies) {\n                for (var i = 0, len = dependencies.length; i < len; i++) {\n                    var dependency = dependencies[i];\n                    if (dependency === RegularDependency.EXPORTS) {\n                        dependenciesValues[i] = module.exports;\n                        continue;\n                    }\n                    if (dependency === RegularDependency.MODULE) {\n                        dependenciesValues[i] = {\n                            id: module.strId,\n                            config: function () {\n                                return _this._config.getConfigForModule(module.strId);\n                            }\n                        };\n                        continue;\n                    }\n                    if (dependency === RegularDependency.REQUIRE) {\n                        dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                        continue;\n                    }\n                    var dependencyModule = this._modules2[dependency.id];\n                    if (dependencyModule) {\n                        dependenciesValues[i] = dependencyModule.exports;\n                        continue;\n                    }\n                    dependenciesValues[i] = null;\n                }\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var env = new AMDLoader.Environment();\n    var moduleManager = null;\n    var DefineFunc = function (id, dependencies, callback) {\n        if (typeof id !== 'string') {\n            callback = dependencies;\n            dependencies = id;\n            id = null;\n        }\n        if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n            callback = dependencies;\n            dependencies = null;\n        }\n        if (!dependencies) {\n            dependencies = ['require', 'exports', 'module'];\n        }\n        if (id) {\n            moduleManager.defineModule(id, dependencies, callback, null, null);\n        }\n        else {\n            moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n        }\n    };\n    DefineFunc.amd = {\n        jQuery: true\n    };\n    var _requireFunc_config = function (params, shouldOverwrite) {\n        if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n        moduleManager.configure(params, shouldOverwrite);\n    };\n    var RequireFunc = function () {\n        if (arguments.length === 1) {\n            if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                _requireFunc_config(arguments[0]);\n                return;\n            }\n            if (typeof arguments[0] === 'string') {\n                return moduleManager.synchronousRequire(arguments[0]);\n            }\n        }\n        if (arguments.length === 2 || arguments.length === 3) {\n            if (Array.isArray(arguments[0])) {\n                moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                return;\n            }\n        }\n        throw new Error('Unrecognized require call');\n    };\n    RequireFunc.config = _requireFunc_config;\n    RequireFunc.getConfig = function () {\n        return moduleManager.getConfig().getOptionsLiteral();\n    };\n    RequireFunc.reset = function () {\n        moduleManager = moduleManager.reset();\n    };\n    RequireFunc.getBuildInfo = function () {\n        return moduleManager.getBuildInfo();\n    };\n    RequireFunc.getStats = function () {\n        return moduleManager.getLoaderEvents();\n    };\n    RequireFunc.define = function () {\n        return DefineFunc.apply(null, arguments);\n    };\n    function init() {\n        if (typeof AMDLoader.global.require !== 'undefined' || typeof require !== 'undefined') {\n            var _nodeRequire_1 = (AMDLoader.global.require || require);\n            if (typeof _nodeRequire_1 === 'function' && typeof _nodeRequire_1.resolve === 'function') {\n                // re-expose node's require function\n                var nodeRequire = function (what) {\n                    moduleManager.getRecorder().record(33 /* NodeBeginNativeRequire */, what);\n                    try {\n                        return _nodeRequire_1(what);\n                    }\n                    finally {\n                        moduleManager.getRecorder().record(34 /* NodeEndNativeRequire */, what);\n                    }\n                };\n                AMDLoader.global.nodeRequire = nodeRequire;\n                RequireFunc.nodeRequire = nodeRequire;\n                RequireFunc.__$__nodeRequire = nodeRequire;\n            }\n        }\n        if (env.isNode && !env.isElectronRenderer) {\n            module.exports = RequireFunc;\n            require = RequireFunc;\n        }\n        else {\n            if (!env.isElectronRenderer) {\n                AMDLoader.global.define = DefineFunc;\n            }\n            AMDLoader.global.require = RequireFunc;\n        }\n    }\n    AMDLoader.init = init;\n    if (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd) {\n        moduleManager = new AMDLoader.ModuleManager(env, AMDLoader.createScriptLoader(env), DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\n        // The global variable require can configure the loader\n        if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n            RequireFunc.config(AMDLoader.global.require);\n        }\n        // This define is for the local closure defined in node in the case that the loader is concatenated\n        define = function () {\n            return DefineFunc.apply(null, arguments);\n        };\n        define.amd = DefineFunc.amd;\n        if (typeof doNotInitLoader === 'undefined') {\n            init();\n        }\n    }\n})(AMDLoader || (AMDLoader = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar CSSLoaderPlugin;\n(function (CSSLoaderPlugin) {\n    /**\n     * Known issue:\n     * - In IE there is no way to know if the CSS file loaded successfully or not.\n     */\n    var BrowserCSSLoader = /** @class */ (function () {\n        function BrowserCSSLoader() {\n            this._pendingLoads = 0;\n        }\n        BrowserCSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\n            var unbind = function () {\n                linkNode.removeEventListener('load', loadEventListener);\n                linkNode.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            linkNode.addEventListener('load', loadEventListener);\n            linkNode.addEventListener('error', errorEventListener);\n        };\n        BrowserCSSLoader.prototype._onLoad = function (name, callback) {\n            this._pendingLoads--;\n            callback();\n        };\n        BrowserCSSLoader.prototype._onLoadError = function (name, errorback, err) {\n            this._pendingLoads--;\n            errorback(err);\n        };\n        BrowserCSSLoader.prototype._insertLinkNode = function (linkNode) {\n            this._pendingLoads++;\n            var head = document.head || document.getElementsByTagName('head')[0];\n            var other = head.getElementsByTagName('link') || document.head.getElementsByTagName('script');\n            if (other.length > 0) {\n                head.insertBefore(linkNode, other[other.length - 1]);\n            }\n            else {\n                head.appendChild(linkNode);\n            }\n        };\n        BrowserCSSLoader.prototype.createLinkTag = function (name, cssUrl, externalCallback, externalErrorback) {\n            var _this = this;\n            var linkNode = document.createElement('link');\n            linkNode.setAttribute('rel', 'stylesheet');\n            linkNode.setAttribute('type', 'text/css');\n            linkNode.setAttribute('data-name', name);\n            var callback = function () { return _this._onLoad(name, externalCallback); };\n            var errorback = function (err) { return _this._onLoadError(name, externalErrorback, err); };\n            this.attachListeners(name, linkNode, callback, errorback);\n            linkNode.setAttribute('href', cssUrl);\n            return linkNode;\n        };\n        BrowserCSSLoader.prototype._linkTagExists = function (name, cssUrl) {\n            var i, len, nameAttr, hrefAttr, links = document.getElementsByTagName('link');\n            for (i = 0, len = links.length; i < len; i++) {\n                nameAttr = links[i].getAttribute('data-name');\n                hrefAttr = links[i].getAttribute('href');\n                if (nameAttr === name || hrefAttr === cssUrl) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        BrowserCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            if (this._linkTagExists(name, cssUrl)) {\n                externalCallback();\n                return;\n            }\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\n            this._insertLinkNode(linkNode);\n        };\n        return BrowserCSSLoader;\n    }());\n    // ------------------------------ Finally, the plugin\n    var CSSPlugin = /** @class */ (function () {\n        function CSSPlugin() {\n            this._cssLoader = new BrowserCSSLoader();\n        }\n        CSSPlugin.prototype.load = function (name, req, load) {\n            var cssUrl = req.toUrl(name + '.css');\n            this._cssLoader.load(name, cssUrl, function (contents) {\n                load({});\n            }, function (err) {\n                if (typeof load.error === 'function') {\n                    load.error('Could not find ' + cssUrl + ' or it was empty');\n                }\n            });\n        };\n        return CSSPlugin;\n    }());\n    CSSLoaderPlugin.CSSPlugin = CSSPlugin;\n    define('vs/css', new CSSPlugin());\n})(CSSLoaderPlugin || (CSSLoaderPlugin = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar NLSLoaderPlugin;\n(function (NLSLoaderPlugin) {\n    var Environment = /** @class */ (function () {\n        function Environment() {\n            this._detected = false;\n            this._isPseudo = false;\n        }\n        Object.defineProperty(Environment.prototype, \"isPseudo\", {\n            get: function () {\n                this._detect();\n                return this._isPseudo;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Environment.prototype._detect = function () {\n            if (this._detected) {\n                return;\n            }\n            this._detected = true;\n            this._isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\n        };\n        return Environment;\n    }());\n    function _format(message, args, env) {\n        var result;\n        if (args.length === 0) {\n            result = message;\n        }\n        else {\n            result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n                var index = rest[0];\n                var arg = args[index];\n                var result = match;\n                if (typeof arg === 'string') {\n                    result = arg;\n                }\n                else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n                    result = String(arg);\n                }\n                return result;\n            });\n        }\n        if (env.isPseudo) {\n            // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n            result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n        }\n        return result;\n    }\n    function findLanguageForModule(config, name) {\n        var result = config[name];\n        if (result)\n            return result;\n        result = config['*'];\n        if (result)\n            return result;\n        return null;\n    }\n    function localize(env, data, message) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return _format(message, args, env);\n    }\n    function createScopedLocalize(scope, env) {\n        return function (idx, defaultValue) {\n            var restArgs = Array.prototype.slice.call(arguments, 2);\n            return _format(scope[idx], restArgs, env);\n        };\n    }\n    var NLSPlugin = /** @class */ (function () {\n        function NLSPlugin(env) {\n            var _this = this;\n            this._env = env;\n            this.localize = function (data, message) {\n                var args = [];\n                for (var _i = 2; _i < arguments.length; _i++) {\n                    args[_i - 2] = arguments[_i];\n                }\n                return localize.apply(void 0, [_this._env, data, message].concat(args));\n            };\n        }\n        NLSPlugin.prototype.setPseudoTranslation = function (value) {\n            this._env._isPseudo = value;\n        };\n        NLSPlugin.prototype.create = function (key, data) {\n            return {\n                localize: createScopedLocalize(data[key], this._env)\n            };\n        };\n        NLSPlugin.prototype.load = function (name, req, load, config) {\n            var _this = this;\n            config = config || {};\n            if (!name || name.length === 0) {\n                load({\n                    localize: this.localize\n                });\n            }\n            else {\n                var pluginConfig = config['vs/nls'] || {};\n                var language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n                var suffix = '.nls';\n                if (language !== null && language !== NLSPlugin.DEFAULT_TAG) {\n                    suffix = suffix + '.' + language;\n                }\n                var messagesLoaded_1 = function (messages) {\n                    if (Array.isArray(messages)) {\n                        messages.localize = createScopedLocalize(messages, _this._env);\n                    }\n                    else {\n                        messages.localize = createScopedLocalize(messages[name], _this._env);\n                    }\n                    load(messages);\n                };\n                if (typeof pluginConfig.loadBundle === 'function') {\n                    pluginConfig.loadBundle(name, language, function (err, messages) {\n                        // We have an error. Load the English default strings to not fail\n                        if (err) {\n                            req([name + '.nls'], messagesLoaded_1);\n                        }\n                        else {\n                            messagesLoaded_1(messages);\n                        }\n                    });\n                }\n                else {\n                    req([name + suffix], messagesLoaded_1);\n                }\n            }\n        };\n        NLSPlugin.DEFAULT_TAG = 'i-default';\n        return NLSPlugin;\n    }());\n    NLSLoaderPlugin.NLSPlugin = NLSPlugin;\n    define('vs/nls', new NLSPlugin(new Environment()));\n})(NLSLoaderPlugin || (NLSLoaderPlugin = {}));\n"]}